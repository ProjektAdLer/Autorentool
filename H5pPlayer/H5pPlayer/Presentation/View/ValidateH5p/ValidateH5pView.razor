@using H5pPlayer.Presentation.PresentationLogic.ValidateH5p

<div class="flex justify-between items-center text-2xl text-adlergrey-800 adler">
    <div>H5P-Validierung</div>
    <p class="text-sm text-red-500 whitespace-nowrap">
        Dieses Fenster muss offen bleiben bis die Validierung abgeschlossen ist!
    </p>
</div>

<ValidationNecessaryView></ValidationNecessaryView>

<div style="margin-top: 20px;"></div>
<div id="h5p-container"></div>
<div style="margin-top: 20px;"></div>

@if (ValidateH5pVm != null)
{
    @if (ValidateH5pVm.IsCompletable)
    {
        <div style="color: green; display: flex; align-items: center;">
            <span>&#10003;</span> <!-- Grüner Haken -->
            <span style="margin-left: 5px;">H5P ist abschließbar</span>
        </div>
    }

    <div class="fixed bottom-4 right-4 flex flex-row gap-4 justify-end items-center z-50">
        <NotUsableH5pButton ValidateH5pController="@ValidateH5pController" />
        <PrimitiveH5pButton ValidateH5pController="@ValidateH5pController" />
        <CompletableH5pButton IsEnabled="@ValidateH5pVm.IsCompletable"
                              ValidateH5pController="@ValidateH5pController" />
    </div>

}

@code {
    private bool showDefectExplanation = false;

    [Parameter]
    public required IValidateH5pViewModel ValidateH5pVm { get; set; }

    [Parameter]
    public required IValidateH5pController ValidateH5pController { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ValidateH5pVm.OnChange += StateHasChanged;
    }


}
