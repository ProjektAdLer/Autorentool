@using H5pPlayer.Presentation.PresentationLogic.ValidateH5p
@using MudBlazor
@inject IDialogService DialogService

<div class="flex flex-col gap-2">
    <header class="flex-none px-4">
        <p class="text-lg">H5P-Validator</p>
    </header>
    <div class="bg-adlergrey-100 px-4">
       
        <ValidationNecessaryView></ValidationNecessaryView>
            
        <div class="bg-white border-adlergrey-300 gap-2 border-2 rounded py-1">

            <div style="height: 450px; overflow: auto;" scrolling="yes" id="h5p-container"></div>

            @if (ValidateH5pVm != null)
            {
                @if (ValidateH5pVm.IsCompletable)
                {
                    <div style="color: green; display: flex; align-items: center;">
                        <span>&#10003;</span> <!-- Grüner Haken -->
                        <span style="margin-left: 5px;">H5P ist abschließbar</span>
                    </div>
                }
            }
        </div>
        
        <footer class="flex flex-row gap-4 justify-end items-end">
            <NotUsableH5pButton ValidateH5pController="@ValidateH5pController"/>
            <PrimitiveH5pButton ValidateH5pController="@ValidateH5pController"/>
            <CompletableH5pButton IsEnabled="@ValidateH5pVm.IsCompletable"
                                  ValidateH5pController="@ValidateH5pController"/>
            <CancelValidateH5pButton ValidateH5pController="ValidateH5pController"
                                     DialogService="@DialogService"></CancelValidateH5pButton>

        </footer>
        
    </div>
</div>
        

@code {
    private bool showDefectExplanation = false;

    [Parameter]
    public required IValidateH5pViewModel ValidateH5pVm { get; set; }

    [Parameter]
    public required IValidateH5pController ValidateH5pController { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ValidateH5pVm.OnChange += StateHasChanged;
    }
}
