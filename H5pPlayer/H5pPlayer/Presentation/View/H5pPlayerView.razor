@using H5pPlayer.BusinessLogic.Entities
@using H5pPlayer.Main
@using H5pPlayer.Presentation.PresentationLogic
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime


<div>
    <p style="color: red">Dieses Fenster muss geöffnet bleiben bis die Validierung abgeschlossen ist!</p>
    <p>Bitte prüfen Sie das H5P, indem Sie die darin enthaltenen Aufgaben lösen.</p>
    <div style="margin-top: 20px;"></div>
    <div id="h5p-container"></div>
    <div style="margin-top: 20px;"></div>

    @if (H5pPlayerVm != null)
    {
    
        @ActiveView
        
        <InvalidPathErrorView InvalidPathErrorVm="H5pPlayerVm.InvalidPathErrorVm"></InvalidPathErrorView>

        
        @if (H5pPlayerVm.IsCompletable)
        {
            <div style="color: green; display: flex; align-items: center;">
                <span>&#10003;</span> <!-- Grüner Haken -->
                <span style="margin-left: 5px;">H5P ist abschließbar</span>
            </div>
        }
    }
  
</div>

@code {

    private RenderFragment? ActiveView { get; set; }
    [Parameter] 
    public string? H5pZipSourcePath { get; set; }
    
    
    [Parameter] 
    public string? UnzippedH5psPath{ get; set; }
    
    /// <summary>
    /// <para>
    /// Do never use directly this DisplayMode this is only for StartupPurpose
    /// Use -> <see cref="H5pPlayerViewModel.IsDisplayModeActive"/> 
    /// Or <see cref="H5pPlayerViewModel.IsValidationModeActive"/>
    /// </para>
    /// <para>
    /// Bacause: The right way is StartH5pPlayerUc -> decides which DisplayMode -> triggers correct Uc (Display Or Validate)
    /// and calls the OutputPort(Presenter) Presenter sets DisplayMode in Viewmodel -> View Updates!
    /// </para>
    /// </summary>
    [Parameter] 
    public H5pDisplayMode DisplayMode{ get; set; }
    
    [Inject]
    public required IStartH5pPlayerFactory StartH5pPlayerFactory{ get; set; }
    
    [Inject]
    public required IDisplayH5pFactory DisplayH5pFactory{ get; set; }
    
    [Inject]
    public required IValidateH5pFactory ValidateH5pFactory{ get; set; }

    internal H5pPlayerController? H5pPlayerController { get; private set; }
    internal H5pPlayerViewModel? H5pPlayerVm { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            InitializeStartH5pPlayer();
            await StartH5pPlayer();
        }
        
        if (IsDisplayModeActive())
        {
            InitializeDisplayH5pView();
        }
        else if(IsValidationModeActive())
        {
            InitializeValidateH5p();
        }
        await base.OnAfterRenderAsync(firstRender);

    }

 



    internal void InitializeStartH5pPlayer()
    {
        StartH5pPlayerFactory.CreateStartH5pPlayerPresentationAndUseCaseStructure(StateHasChanged, JsRuntime);
        H5pPlayerController = StartH5pPlayerFactory.H5pPlayerController;
        H5pPlayerVm = StartH5pPlayerFactory.H5pPlayerVm;
    }

    private async Task StartH5pPlayer()
    {
        //"https://localhost:8001/H5pStandalone/h5p-folder/AbfrageDefinitionen"
        await H5pPlayerController!.StartH5pPlayer(DisplayMode, H5pZipSourcePath!, UnzippedH5psPath!);
    }

    private void InitializeDisplayH5pView()
    {
        DisplayH5pFactory.CreateDisplayH5pPresentationStructure(StartH5pPlayerFactory.DisplayH5pUc);
        ActiveView = builder =>
        {
            builder.OpenComponent(0, typeof(DisplayH5pView)); 
            builder.AddAttribute(1, "DisplayH5pVm", DisplayH5pFactory.DisplayH5pVm);
            builder.AddAttribute(2, "DisplayH5pController", DisplayH5pFactory.DisplayH5pController);
            builder.CloseComponent();
        };
    }
    private void InitializeValidateH5p()
    {
        ValidateH5pFactory.CreateValidateH5pPresentationStructure(StartH5pPlayerFactory.ValidateH5pUc);
        ActiveView = builder =>
        {
            builder.OpenComponent(0, typeof(ValidateH5pView)); 
            builder.AddAttribute(1, "ValidateH5pVm", ValidateH5pFactory.ValidateH5pVm);
            builder.AddAttribute(2, "ValidateH5pController", ValidateH5pFactory.ValidateH5pController);
            builder.CloseComponent();
        };
    }


    private bool IsValidationModeActive()
    {
        return H5pPlayerVm?.IsValidationModeActive == true;
    }

    private bool IsDisplayModeActive()
    {
        return H5pPlayerVm?.IsDisplayModeActive == true;
    }
  

}