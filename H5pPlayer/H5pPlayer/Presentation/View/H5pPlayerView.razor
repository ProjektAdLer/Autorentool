@using H5pPlayer.BusinessLogic.Entities
@using H5pPlayer.Presentation.PresentationLogic
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime


<div>
    <p style="color: red">Dieses Fenster muss geöffnet bleiben bis die Validierung abgeschlossen ist!</p>
    <p>Bitte prüfen Sie das H5P, indem Sie die darin enthaltenen Aufgaben lösen.</p>
    <div style="margin-top: 20px;"></div>
    <div id="h5p-container"></div>
    <div style="margin-top: 20px;"></div>

    @if (_h5pPlayerVm != null)
    {
        <InvalidPathErrorView InvalidPathErrorVm="_h5pPlayerVm.InvalidPathErrorVm"></InvalidPathErrorView>

        
        @if (_h5pPlayerVm.IsCompletable)
        {
            <div style="color: green; display: flex; align-items: center;">
                <span>&#10003;</span> <!-- Grüner Haken -->
                <span style="margin-left: 5px;">H5P ist abschließbar</span>
            </div>
        }
    }
  
</div>

@code {

    
    [Parameter] 
    public string? H5pZipSourcePath { get; set; }
    
    
    [Parameter] 
    public string? UnzippedH5psPath{ get; set; }
    
    [Parameter] 
    public H5pDisplayMode DisplayMode{ get; set; }
    
    private H5pPlayerController? _h5pPlayerController;
    private H5pPlayerViewModel? _h5pPlayerVm;

    protected override async void OnAfterRender(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            CreateH5pPlayerVm();
            await StartH5pPlayer();
        }
    }

    private void CreateH5pPlayerVm()
    {
        _h5pPlayerVm = new H5pPlayerViewModel(StateHasChanged);
    }

    private async Task StartH5pPlayer()
    {
        
        _h5pPlayerController = new H5pPlayerController(_h5pPlayerVm, JsRuntime);
        //"https://localhost:8001/H5pStandalone/h5p-folder/AbfrageDefinitionen"
        await _h5pPlayerController.StartH5pPlayer(H5pDisplayMode.Validate, H5pZipSourcePath!, UnzippedH5psPath!);
    }

   
}