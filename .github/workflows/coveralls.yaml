name: Coveralls Code Coverage
on:
  push:
    branches:
      - main
      - '**-support'
    paths-ignore:
      - LICENCE
      - README.md
      - .gitignore
      - AuthoringTool/electron.manifest.json
  pull_request:

jobs:
  test-platforms:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
    env:
      dotNetVersion: net9.0
      dotNetConfiguration: Release
    steps:
      # checkout the repo
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      
      # install dependencies, build, and test
      - name: Setup Dotnet for use with actions
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.200'

      - name: Cache Nuget Packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Run automated unit and integration tests
        run: dotnet test
        
  build:
    runs-on: windows-latest
    env:
      dotNetVersion: net9.0
      dotNetConfiguration: Release
      runtimeTarget: win-x86
    strategy:
      matrix:
        test_project:
          - AuthoringToolTest
          - BackendAccessTest
          - BusinessLogicTest
          - DataAccessTest
          - GeneratorTest
          - IntegrationTest
          - PresentationTest
          - SharedTest
          - H5pPlayer/H5pPlayerTest
          
    steps:
      # checkout the repo
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      
      # install runtime
      - name: Setup Dotnet for use with actions
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.200'
      
      # build only the specific test project we are testing   
      - name: Build test project
        run: dotnet build ${{ matrix.test_project }}
        
      # run test with coverage collection
      - name: Run ${{ matrix.test_project }} tests
        run: dotnet test ${{ matrix.test_project }} --collect:"XPlat Code Coverage" --settings coverlet.runsettings
        
      - name: Install Coveralls.net global
        run: dotnet tool install --global coveralls.net
  
      - name: .NET Tools-Pfad setzen (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: Add-Content -Path $env:GITHUB_PATH -Value "$env:USERPROFILE\.dotnet\tools`n"
  
      - name: Coverage an Coveralls.io senden
        shell: pwsh
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          $coverageFile = Get-ChildItem "${{ matrix.test_project }}\TestResults\*\coverage.opencover.xml" -Recurse | Select -ExpandProperty FullName
          echo "Found: $coverageFile"
          csmacnz.Coveralls --opencover -i "$coverageFile" --useRelativePaths


  finish:
    needs: build
    if: ${{ always() }}
    runs-on: windows-latest
    steps:
      # tell coveralls we are done with this run
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2.3.0
        with:
          parallel-finished: true
          carryforward: "run-AuthoringToolTest,run-BackendAccessTest,run-BusinessLogicTest,run-DataAccessTest,run-GeneratorTest,run-IntegrationTest,run-PresentationTest,run-SharedTest, run-H5pPlayerTest"
          
  send-summary:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - build
      - test-platforms
      - finish
    steps:
      - uses: CalmDownVal/webhook-summary@v1
        with:
          token: ${{ github.token }}
          url: ${{ secrets.DISCORD_WEBHOOK }}
