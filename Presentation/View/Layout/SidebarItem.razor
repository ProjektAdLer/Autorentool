<button onclick="@SetAsCurrentItem" class="@BackgroundColour() min-h-[50px] cursor-pointer flex justify-center items-center @Rounded()">
    @SidebarContent
</button>

@code {

    [CascadingParameter]
    public ISidebar Sidebar { get; set; }

    [Parameter]
    public RenderFragment SidebarContent { get; set; }

    [Parameter]
    public RenderFragment MainContent { get; set; }

    [Parameter]
    public bool IsActive
    {
        get => _isActive;
        set
        {
            if (_isActive == value) return;
            _isActive = value;
            NotifySidebar();
        }
    }

    [Parameter]
    public EventCallback<bool> RequestIsActiveToggle { get; set; }

    /// <summary>
    /// Sets this as current item in sidebar when IsActive is true,
    /// and clears current item on false if current item is this.
    /// </summary>
    private void NotifySidebar()
    {
        if (Sidebar == null) return;
        if (IsActive) Sidebar.SetSidebarItem(this);
        else if (Sidebar.CurrentItem == this) Sidebar.ClearSidebarItem();
    }


    private void SetAsCurrentItem()
    {
        RequestIsActiveToggle.InvokeAsync(!IsActive);
    }

    private bool IsCurrentItem() => Sidebar?.CurrentItem == this;
    private string BackgroundColour() => IsCurrentItem() ? "bg-adlergrey-300" : "bg-adlergrey-100";
    private string Rounded() => IsCurrentItem() ? RoundedInFocus() : "rounded-lg";

    private string RoundedInFocus() => Sidebar?.Side switch
    {
        Side.Left => "rounded-l-lg",
        Side.Right => "rounded-r-lg",
        _ => throw new ArgumentOutOfRangeException()
        };

    private bool _isActive;
}