@using System.Diagnostics.CodeAnalysis
@implements ISidebar

<div class="h-[98%] max-w-[40vw] min-w-[2vw] flex overflow-hidden">
    <div class="py-3 @SidebarOrder()">
        <aside class="min-w-[50px] flex flex-col rounded">
            <CascadingValue Value="this">
                @ChildContent
            </CascadingValue>
        </aside>
    </div>
    @if (CurrentItem is not null)
    {
        <div class="flex flex-row h-full w-[350px] 2xl:w-[400px] 3xl:w-[400px] 1080p:w-[450px] 2500p:w-[600px] 3000p:w-[600px] 3700p:w-[600px] bg-blacktrans-100 @ContentOrder() rounded gap-1 p-1.5 2xl:p-2 main-content">
            @CurrentItem.MainContent
        </div>
    }
</div>

@code {
    private SidebarItem? _currentItem;

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public RenderFragment ChildContent { get; set; }

    [Parameter, EditorRequired]
    public Side Side { get; set; }


    public SidebarItem? CurrentItem
    {
        get => _currentItem;
        private set
        {
            if (_currentItem == value) return;
            _currentItem = value;
            InvokeAsync(StateHasChanged);
        }
    }

    public void SetSidebarItem(SidebarItem item)
    {
        ClearSidebarItem();
        CurrentItem = item;
    }

    public void ClearSidebarItem()
    {
        CurrentItem = null;
    }

    private string SidebarOrder() => Side switch
    {
        Side.Left => "order-1",
        Side.Right => "order-2",
        _ => throw new ArgumentOutOfRangeException()
        };

    private string ContentOrder() => Side switch
    {
        Side.Left => "order-2",
        Side.Right => "order-1",
        _ => throw new ArgumentOutOfRangeException()
        };

}