@using Microsoft.Extensions.Localization
@using Shared
@using System.Diagnostics.CodeAnalysis
<MudItem>
    <MudCard Outlined="true" Elevation="1" Class="w-60 h-40">
        <MudCardHeader Class="flex justify-center items-center break-word w-full">
            <CardHeaderContent>
                <MudText Class="break-all">
                    @LearningWorldPath!.Name
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudFab @onclick="OnCloseButtonPressed" Size="Size.Small" StartIcon="@Icons.Material.Filled.Close"
                        Class="close-button"
                        Title=@Localizer["LearningWorldCard.Button.Close.Text"] DisableElevation="true"/>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Class="flex justify-center">
            <MudButton Size="Size.Large" @onclick="OnOpenButtonPressed" Class="open-button">
                @Localizer["LearningWorldCard.Button.Open.Text"]
            </MudButton>
        </MudCardContent>
    </MudCard>
</MudItem>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<LearningWorldCard> Localizer { get; set; }

    [Parameter]
    public SavedLearningWorldPath? LearningWorldPath { get; set; }

    [Parameter]
    public EventCallback<SavedLearningWorldPath> OnOpenLearningWorld { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public EventCallback<SavedLearningWorldPath> OnCloseWorld { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (!OnOpenLearningWorld.HasDelegate) throw new ApplicationException(Localizer["ApplicationException.OnOpenLearningWorld.Message"]);
        if (LearningWorldPath == null) throw new ApplicationException(Localizer["ApplicationException.LearningWorldPath.Message"]);
        if (!OnCloseWorld.HasDelegate) throw new ApplicationException(Localizer["ApplicationException.OnCloseWorld.Message"]);
    }

    private void OnOpenButtonPressed()
    {
        OnOpenLearningWorld.InvokeAsync(LearningWorldPath);
    }

    private void OnCloseButtonPressed()
    {
        OnCloseWorld.InvokeAsync(LearningWorldPath);
    }

}