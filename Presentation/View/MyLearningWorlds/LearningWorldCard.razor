@using Shared
<MudItem>
    <MudCard Outlined="true" Elevation="1" Class="w-60">
        <MudCardHeader>
            <CardHeaderAvatar>
                @switch (_cardType)
                {
                    case CardType.IsLoaded:
                    {
                        <MudAvatar Color="@Color.Secondary">L</MudAvatar>
                        break;
                    }

                    case CardType.IsSaved:
                    {
                        <MudAvatar Color="@Color.Primary">S</MudAvatar>
                        break;
                    }
                }
            </CardHeaderAvatar>
            <CardHeaderContent>
                @switch (_cardType)
                {
                    case CardType.IsLoaded:
                    {
                        <MudText Style="max-width: 130px; overflow-wrap: break-word;">
                            @LearningWorldPath!.Name
                        </MudText>
                        break;
                    }
                
                    case CardType.IsSaved:
                    {
                        <MudText Style="max-width: 100px; overflow-wrap: break-word;">
                            @LearningWorldPath!.Name
                        </MudText>
                        break;
                    }
                
                    case CardType.Load:
                        <MudText>Load Learning World</MudText>
                        break;
                    case CardType.Create:
                        <MudText>Create Learning World</MudText>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </CardHeaderContent>
            <CardHeaderActions>
                @if (_cardType is CardType.IsSaved)
                {
                    <MudButton @onclick="() => OnDeleteFromSaved.InvokeAsync(LearningWorldPath)">
                        <MudIcon Icon="@Icons.Material.Filled.Close"></MudIcon>
                    </MudButton>
                }
            </CardHeaderActions>
            @* @switch (_cardType) *@
            @* { *@
            @*     case CardType.IsLoaded: *@
            @*     { *@
            @*         <MudAvatar Color="@Color.Secondary">L</MudAvatar> *@
            @*         <MudText> *@
            @*             @LearningWorldPath!.Name *@
            @*         </MudText> *@
            @*         break; *@
            @*     } *@
            @* *@
            @*     case CardType.IsSaved: *@
            @*     { *@
            @*         <MudAvatar Color="@Color.Primary">S</MudAvatar> *@
            @*         <MudText> *@
            @*             @LearningWorldPath!.Name *@
            @*         </MudText> *@
            @*         <MudButton @onclick="() => OnDeleteFromSaved.InvokeAsync(LearningWorldPath)"> *@
            @*             <MudIcon Icon="@Icons.Material.Filled.Close"></MudIcon> *@
            @*         </MudButton> *@
            @*         break; *@
            @*     } *@
            @* *@
            @*     case CardType.Load: *@
            @*         <MudText>Load Learning World</MudText> *@
            @*         break; *@
            @*     case CardType.Create: *@
            @*         <MudText>Create Learning World</MudText> *@
            @*         break; *@
            @*     default: *@
            @*         throw new ArgumentOutOfRangeException(); *@
            @* } *@
        </MudCardHeader>
        <MudCardContent>
            @switch (_cardType)
            {
                case CardType.IsLoaded or CardType.IsSaved:
                    <MudButton @onclick="@(() => OnOpenLearningWorld.InvokeAsync(LearningWorldPath))">
                        Open
                    </MudButton>
                    break;
                case CardType.Load:
                    <MudButton @onclick="@(() => OnLoadLearningWorldPath.InvokeAsync())">
                        <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>
                    </MudButton>
                    break;
                case CardType.Create:
                    <MudButton @onclick="@(() => OnCreateLearningWorld.InvokeAsync())">
                        <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>
                    </MudButton>
                    break;
            }

        </MudCardContent>
    </MudCard>
</MudItem>

@code {

    [Parameter]
    public SavedLearningWorldPath? LearningWorldPath { get; set; }

    [Parameter]
    public EventCallback<SavedLearningWorldPath> OnOpenLearningWorld { get; set; }

    [Parameter]
    public bool IsLoaded { get; set; }

    [Parameter]
    public EventCallback OnCreateLearningWorld { get; set; }

    [Parameter]
    public EventCallback OnLoadLearningWorldPath { get; set; }

    [Parameter]
    public EventCallback<SavedLearningWorldPath> OnDeleteFromSaved { get; set; }

    private CardType _cardType;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (OnCreateLearningWorld.HasDelegate)
        {
            _cardType = CardType.Create;
        }
        else if (OnLoadLearningWorldPath.HasDelegate)
        {
            _cardType = CardType.Load;
        }
        else if (IsLoaded)
        {
            if (!OnOpenLearningWorld.HasDelegate) throw new ApplicationException("OnOpenLearningWorld must be set.");
            if (LearningWorldPath == null) throw new ApplicationException("LearningWorldPath must be set.");


            _cardType = CardType.IsLoaded;
        }
        else
        {
            if (!OnOpenLearningWorld.HasDelegate) throw new ApplicationException("OnOpenLearningWorld must be set.");
            if (LearningWorldPath == null) throw new ApplicationException("LearningWorldPath must be set.");
            if (!OnDeleteFromSaved.HasDelegate) throw new ApplicationException("OnDeleteFromSaved must be set.");
            _cardType = CardType.IsSaved;
        }
    }

    private enum CardType
    {
        Create,
        Load,
        IsLoaded,
        IsSaved
    }

}