@using Microsoft.Extensions.Localization
@using Shared
@using System.Diagnostics.CodeAnalysis
<MudItem>
    <MudCard Outlined="true" Elevation="1" Class="w-60 h-40 mt-1 relative group/card hover:bg-[rgba(229,213,184,0.5)]">
        <img src="CustomIcons/world-icon-nobg.png" class="z-0 pointer-events-none opacity-10 absolute inset-x-[60%] inset-y-[40%] w-24 h-24">
        <MudCardHeader Class="z-10 flex justify-center items-center break-word w-full">
            <CardHeaderContent>
                <MudText Class="text-xl tracking-wider mt-8 font-bold break-all">
                    @LearningWorldPath!.Name
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudFab @onclick="OnCloseButtonPressed" Size="Size.Small" StartIcon="@Icons.Material.Filled.Close"
                        Class="close-button absolute -right-1 -top-1 w-9 btn-standard rounded-full"
                        Title=@Localizer["LearningWorldCard.Button.Close.Text"] DisableElevation="true"/>
            </CardHeaderActions>
        </MudCardHeader>
        <button @onclick="OnOpenButtonPressed" title="@Localizer["LearningWorldCard.Button.Open.Title"]" class="open-button group-hover/card:visible group-hover/card:opacity-100 invisible text-xl absolute top-[25%] left-[16%] btn-standard uppercase p-8 rounded-lg drop-shadow">
            @Localizer["LearningWorldCard.Button.Open.Text"]
        </button>
        <MudCardContent Class="">
        </MudCardContent>
    </MudCard>
</MudItem>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<LearningWorldCard> Localizer { get; set; }

    [Parameter]
    public SavedLearningWorldPath? LearningWorldPath { get; set; }

    [Parameter]
    public EventCallback<SavedLearningWorldPath> OnOpenLearningWorld { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public EventCallback<SavedLearningWorldPath> OnCloseWorld { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (!OnOpenLearningWorld.HasDelegate) throw new ApplicationException(Localizer["ApplicationException.OnOpenLearningWorld.Message"]);
        if (LearningWorldPath == null) throw new ApplicationException(Localizer["ApplicationException.LearningWorldPath.Message"]);
        if (!OnCloseWorld.HasDelegate) throw new ApplicationException(Localizer["ApplicationException.OnCloseWorld.Message"]);
    }

    private void OnOpenButtonPressed()
    {
        OnOpenLearningWorld.InvokeAsync(LearningWorldPath);
    }

    private void OnCloseButtonPressed()
    {
        OnCloseWorld.InvokeAsync(LearningWorldPath);
    }

}