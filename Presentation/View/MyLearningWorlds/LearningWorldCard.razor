@using Microsoft.Extensions.Localization
@using Shared
@using System.Diagnostics.CodeAnalysis
@using System.IO.Abstractions
@using Presentation.PresentationLogic.LearningWorld
<MudItem>
    <MudCard Outlined="true" Elevation="1" Class="w-60 h-40 mt-1 relative group/card hover:bg-[rgba(229,213,184,0.5)]">
        <img src="CustomIcons/world-icon-nobg.png" class="z-0 pointer-events-none opacity-10 absolute inset-x-[60%] inset-y-[40%] w-24 h-24">
        <MudCardHeader Class="z-10 flex justify-center items-center break-word w-full">
            <CardHeaderContent>
                <MudText Class="text-xl tracking-wider mt-8 font-bold break-all">
                    @LearningWorld.Name
                </MudText>
                <MudText Class="text-sm tracking-widers break-all">
                    @if (ShowFileName)
                    {
                        @GetPathDisplayMessage()<br/>
                    }
                    @if (FileInfo != null)
                    {
                        @Localizer["LearningWorldCard.LastWriteTime", FileInfo.LastWriteTime]
                    }
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                @if (!string.IsNullOrWhiteSpace(LearningWorld.SavePath))
                {
                    <MudFab @onclick="OnCloseButtonPressed" Size="Size.Small" StartIcon="@Icons.Material.Filled.Close"
                            Class="close-button absolute -right-1 -top-1 w-9 btn-standard rounded-full"
                            Title=@Localizer["LearningWorldCard.Button.Close.Text"] DisableElevation="true"/>
                }
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Class="">
            <button @onclick="OnOpenButtonPressedAsync" title="@Localizer["LearningWorldCard.Button.Open.Title"]"
                    class="open-button group-hover/card:visible group-hover/card:opacity-100 invisible text-xl absolute
                     top-[25%] left-[16%] btn-standard uppercase p-8 rounded-lg drop-shadow">
                @Localizer["LearningWorldCard.Button.Open.Text"]
            </button>
        </MudCardContent>
    </MudCard>
</MudItem>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<LearningWorldCard> Localizer { get; set; }

    [Parameter, EditorRequired, AllowNull]
    public ILearningWorldViewModel LearningWorld { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningWorldViewModel> OnOpenLearningWorld { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningWorldViewModel> OnCloseLearningWorld { get; set; }

    [Parameter, EditorRequired]
    public IFileInfo? FileInfo { get; set; }
    [Parameter, EditorRequired]
    public bool ShowFileName { get; set; }

    private string GetPathDisplayMessage()
    {
        var fileName = Path.GetFileName(LearningWorld.SavePath);
        return string.IsNullOrWhiteSpace(fileName) ? Localizer["LearningWorldCard.PathDisplayMessage.NotYetSaved"] : fileName;
    }

    private async Task OnOpenButtonPressedAsync()
    {
        await OnOpenLearningWorld.InvokeAsync(LearningWorld);
    }

    private void OnCloseButtonPressed()
    {
        OnCloseLearningWorld.InvokeAsync(LearningWorld);
    }

}