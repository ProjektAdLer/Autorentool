@page "/MyLearningWorldsOverview"
@using Presentation.PresentationLogic.MyLearningWorlds
@using Shared
@using Presentation.PresentationLogic.API
@using Presentation.Components
@using Presentation.Components.Forms.World
@using Microsoft.Extensions.Localization
<main class="overflow-hidden relative min-h-screen max-h-screen h-screen w-screen bg-gradient-to-br m-0 from-adlerbggradientfrom to-adlerbggradientto">
    <HeaderBar/>
    <article class="p-2 flex flex-col items-center gap-6 overflow-hidden h-[41rem] 2xl:h-[44rem] 1080p:h-[58rem] 2500p:h-[80rem] 3000p:h-[90rem] 3700p:h-[123rem] w-5/6">
        <h3 class="font-bold text-2xl text-center text-adlerdarkblue">@Localizer["Page.LearningWorld.Heading"]</h3>
        <section class="flex flex-row gap-2 justify-center bg-blacktrans-200 p-1 rounded-lg">
            <div class="btn-standard w-28 flex justify-center items-center" title=@Localizer["Page.LearningWorld.Button.New.Hover"]>
                <button class="gap-2" @onclick="CreateLearningWorld">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Title=@Localizer["Page.LearningWorld.Button.New.Hover"] Class="z-20 add-learning-world"></MudIcon>
                    <p class="z-10 uppercase">@Localizer["Page.LearningWorld.Button.New.Text"]</p>
                </button>
                <img src="CustomIcons/world-icon-nobg.png" class="z-0 pointer-events-none opacity-20 absolute w-8 h-8">
            </div>
            <div class="btn-standard w-28 flex justify-center items-center" @onclick="LoadLearningWorldAsync" title=@Localizer["Page.LearningWorld.Button.Import.Hover"]>
                <button class="gap-2">
                    <MudIcon Icon="@Icons.Material.Filled.Download" Title=@Localizer["Page.LearningWorld.Button.Import.Hover"] Class="z-10 load-learning-world"></MudIcon>
                    <p class="z-10 uppercase">@Localizer["Page.LearningWorld.Button.Import.Text"]</p>
                </button>
                <img src="CustomIcons/world-icon-nobg.png" class="z-0 pointer-events-none opacity-20 absolute w-8 h-8">
            </div>
        </section>
        <section class="flex flex-col w-5/6 m-auto bg-blacktrans-200 h-[475px] 2xl:h-[500px] 1080p:h-[750px] 2500p:h-[1100px] 3000p:h-[1250px] 3700p:h-[1775px] p-2 rounded-lg">
            <MudGrid Class="flex justify-center overflow-auto h-96 shrink" Spacing="2">
                @foreach (var myLearningWorld in MyLearningWorldsProvider.GetLoadedLearningWorlds())
                {
                    <LearningWorldCard LearningWorldPath="@myLearningWorld" OnOpenLearningWorld="OpenLearningWorld" IsLoaded="true"/>
                }
                @foreach (var myLearningWorld in MyLearningWorldsProvider.GetSavedLearningWorlds())
                {
                    <LearningWorldCard LearningWorldPath="@myLearningWorld" OnOpenLearningWorld="OpenLearningWorld" OnDeleteFromSaved="MyLearningWorldsProvider.DeletePathFromSavedLearningWorlds" IsLoaded="false"/>
                }
            </MudGrid>
        </section>
        <MudButton Class="btn-standard normal-case" @onclick="OnClickMyLearningWorldsOverview">@Localizer["Page.LearningWorld.Button.GOTO.LearnWorld.Text"]</MudButton>
        <MudDrawer Width="26%" Height="100%" @bind-Open="_createLearningWorldDialogOpen" Variant="@DrawerVariant.Temporary" Position="DrawerPosition.Left">
            <MudDrawerContent>
                <CreateWorldForm OnSubmitted="() => _createLearningWorldDialogOpen = false"/>
            </MudDrawerContent>
        </MudDrawer>
    </article>
    <img class="pointer-events-none w-3/5 opacity-10 absolute -bottom-1/4 -right-64" src="/CustomIcons/world-icon-nobg.png"/>
</main>

@code {
    [Inject]
    private IStringLocalizer<MyLearningWorldsOverview> Localizer { get; set; }

#pragma warning disable CS8618
    [Inject]
    internal IMyLearningWorldsProvider MyLearningWorldsProvider { get; private init; }

    [Inject]
    internal NavigationManager NavManager { get; private init; }

    [Inject]
    internal IPresentationLogic PresentationLogic { get; private init; }
#pragma warning restore CS8618

    private bool _createLearningWorldDialogOpen = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PresentationLogic.OnCommandUndoRedoOrExecute += async (_, args) =>
        {
            if (args.CommandName is "CreateLearningWorld" or "DeleteLearningWorld" 
                or "EditLearningWorld" or "LoadLearningWorld")
            {
                await InvokeAsync(StateHasChanged);
            }
        };
    }

    private void OnClickMyLearningWorldsOverview()
    {
        NavManager.NavigateTo("/app");
    }

    private async void LoadLearningWorldAsync()
    {
        var retVal = await MyLearningWorldsProvider.LoadSavedLearningWorld();
        if (retVal)
        {
            OnClickMyLearningWorldsOverview();
        }
    }

    private void CreateLearningWorld()
    {
        _createLearningWorldDialogOpen = true;
    }

    private void OpenLearningWorld(SavedLearningWorldPath savedLearningWorldPath)
    {
        MyLearningWorldsProvider.OpenLearningWorld(savedLearningWorldPath);
        OnClickMyLearningWorldsOverview();
    }

}