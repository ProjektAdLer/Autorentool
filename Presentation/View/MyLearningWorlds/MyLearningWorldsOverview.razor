@page "/MyLearningWorldsOverview"
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.MyLearningWorlds
@using Presentation.PresentationLogic.SelectedViewModels
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.API
@using MudBlazor.Utilities
@using Presentation.Components.Dialogues
@using Presentation.Components.Forms.World
@using System.Diagnostics.CodeAnalysis
@using System.IO.Abstractions
@using System.Text.Json
@using global::H5pPlayer.BusinessLogic
@using global::H5pPlayer.BusinessLogic.UseCases.DisplayH5p
@using global::H5pPlayer.JavaScriptApi
@using Presentation.H5pPlayer.PresentationLogic
@using Presentation.H5pPlayer.View



@inject IJSRuntime JsRuntime

<main class="overflow-hidden flex flex-col items-center relative min-h-screen max-h-screen h-screen w-screen bg-gradient-to-br m-0 from-adlerbggradientfrom to-adlerbggradientto">
    <HeaderBar/>
    <H5pPlayerView/>
    <article class="p-2 flex flex-col items-center gap-4 overflow-hidden h-[41rem] 2xl:h-[44rem] 3xl:h-[56rem] 1080p:h-[58rem] 2500p:h-[80rem] 3000p:h-[90rem] 3700p:h-[123rem] w-5/6">
        <h3 class="font-bold text-2xl text-center text-adlerdarkblue">@Localizer["Page.LearningWorld.Heading"]</h3>
       
        <div class="flex flex-col bg-blacktrans-100 rounded-xl">
            <section class="flex flex-row justify-center">
                <div class="btn-standard w-36 flex justify-center items-center create-world-button"
                     @onclick="CreateH5PValidator">
                    <button class="gap-2">
                        <MudIcon Icon="@Icons.Material.Filled.Add" Title="h5p validation test" Class="z-20 add-learning-world"></MudIcon>
                        <p class="z-10 uppercase">@_h5pTestButtonText</p>
                    </button>
                </div>
            </section>
            <section class="flex flex-row justify-center">
                <div class="btn-standard w-36 flex justify-center items-center create-world-button"
                     @onclick="CreateLearningWorld"
                     title=@Localizer["Page.LearningWorld.Button.New.Hover"]>

                    <MudIcon Icon="@Icons.Material.Filled.Add" Title=@Localizer["Page.LearningWorld.Button.New.Hover"] Class="z-20 add-learning-world"></MudIcon>
                    <p class="z-10 uppercase">@Localizer["Page.LearningWorld.Button.New.Text"]</p>
                   
                    <img src="CustomIcons/World/world-icon.png" class="z-0 pointer-events-none opacity-10 absolute w-8 h-8">
                </div>
                <div class="btn-standard w-36 flex justify-center items-center import-world-button"
                     @onclick="ImportLearningWorldAsync"
                     title=@Localizer["Page.LearningWorld.Button.Import.Hover"]>
                    <button class="gap-2">
                        <MudIcon Icon="@Icons.Material.Filled.SaveAlt" Title=@Localizer["Page.LearningWorld.Button.Import.Hover"] Class="z-10 load-learning-world"></MudIcon>
                        <p class="z-10 uppercase">@Localizer["Page.LearningWorld.Button.Import.Text"]</p>
                    </button>
                    <img src="CustomIcons/World/world-icon.png" class="z-0 pointer-events-none opacity-10 absolute w-8 h-8">
                </div>
            </section>
        </div>
        <div id="h5p-container"></div>
                  <div class="btn-standard w-36 flex justify-center items-center import-world-button"
                             @onclick="ImportLearningWorldAsync"
                             title=@Localizer["Page.LearningWorld.Button.Import.Hover"]>
                            <button class="gap-2">
                                <MudIcon Icon="@Icons.Material.Filled.SaveAlt" Title=@Localizer["Page.LearningWorld.Button.Import.Hover"] Class="z-10 load-learning-world"></MudIcon>
                                <p class="z-10 uppercase">@Localizer["Page.LearningWorld.Button.Import.Text"]</p>
                            </button>
                            <img src="CustomIcons/World/world-icon.png" class="z-0 pointer-events-none opacity-10 absolute w-8 h-8">
                        </div>
               <section class="flex flex-col w-5/6 m-auto bg-blacktrans-100 h-[475px] 2xl:h-[500px] 3xl:h-[700px] 1080p:h-[750px] 2500p:h-[1100px] 3000p:h-[1250px] 3700p:h-[1775px] p-2 rounded">
                    <div class="flex flex-row gap-2 justify-between">
                        <div class="flex justify-start">
                            <MudIconButton OnClick="() => _sortByDate = true" Icon="@Icons.Material.Filled.DateRange" Class="@(SortByDateButtonClass.Build())" Title="@Localizer["Page.LearningWorld.SortByDate"]"/>
                            <MudIconButton OnClick="() => _sortByDate = false" Icon="@Icons.Material.Filled.SortByAlpha" Class="@(SortByNameButtonClass.Build())" Title="@Localizer["Page.LearningWorld.SortByName"]"/>
                            <MudDivider Vertical="true" FlexItem="true"/>
                            <MudCheckBox @bind-Checked="_showFileName" title="@Localizer["Page.LearningWorld.ShowFile.Checkbox"]">
                                <p class="text-sm">@Localizer["Checkbox.ShowFileName.Label"]</p>
                            </MudCheckBox>
                        </div>
                    
                        <div class="flex justify-end">
                            <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="@Localizer["Page.LearningWorld.Subheading"]">
                                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-blacktrans-300 hover:text-adlerdarkblue"></MudIcon>
                            </MudTooltip>
                        </div>
                    </div>
                    <MudGrid Class="flex justify-center overflow-auto my-4 shrink" Spacing="2">
                       
                    </MudGrid>
                </section>
        <section class="flex flex-col w-5/6 m-auto bg-blacktrans-100 h-[475px] 2xl:h-[500px] 3xl:h-[700px] 1080p:h-[750px] 2500p:h-[1100px] 3000p:h-[1250px] 3700p:h-[1775px] p-2 rounded">
            <div class="flex flex-row gap-2 justify-between">
                
            </div>
            
        </section>
        <MudDrawer Width="26%" Height="100%" @bind-Open="_createLearningWorldDialogOpen" Variant="@DrawerVariant.Temporary" Position="DrawerPosition.Left">
            @if (_createLearningWorldDialogOpen)
            {
                <CreateWorldForm OnSubmitted="OnNewLearningWorldCreated"/>
            }
        </MudDrawer>
        <MudDrawer Width="50%" Height="100%" @bind-Open="_h5pValidatorDialog" Variant="@DrawerVariant.Temporary" Position="DrawerPosition.Right">
                    @if (_h5pValidatorDialog)
                    {
                        <CreateWorldForm OnSubmitted="OnNewLearningWorldCreated"/>
                    }
                </MudDrawer>
    </article>
    <img class="pointer-events-none w-20 opacity-20 absolute bottom-1 right-1" src="/CustomIcons/HeaderBar/autorentool-logo-icon.png"/>
</main>

@code {


    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<MyLearningWorldsOverview> Localizer { get; private init; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMyLearningWorldsProvider MyLearningWorldsProvider { get; private init; }

    [Inject, AllowNull] internal IAuthoringToolWorkspaceViewModel WorkspaceViewModel { get; private init; }

    [Inject, AllowNull] internal ISelectedViewModelsProvider SelectedViewModelsProvider { get; private init; }

    [Inject, AllowNull] internal IDialogService DialogService { get; private init; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal NavigationManager NavManager { get; private init; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; private init; }


    private bool _createLearningWorldDialogOpen;
    private bool _h5pValidatorDialog;
    private bool _showFileName;
    private bool _sortByDate = true;
    private string _h5pTestButtonText = "h5p validation test text";
 //   private IJSObjectReference? _h5pStandalone;
 //  private IJSObjectReference? _tobiTestJs;

    private CssBuilder SortByDateButtonClass => new CssBuilder()
        .AddClass("opacity-20", !_sortByDate)
        .AddClass("opacity-90", _sortByDate);

    private CssBuilder SortByNameButtonClass => new CssBuilder()
        .AddClass("opacity-20", _sortByDate)
        .AddClass("opacity-90", !_sortByDate);

    private IEnumerable<(ILearningWorldViewModel, IFileInfo?)> WorldsWithFileinfos => WorkspaceViewModel.LearningWorlds
        .Select(world => (world, MyLearningWorldsProvider.GetFileInfoFromPath(world.SavePath)));

    private IEnumerable<(ILearningWorldViewModel, IFileInfo?)> OrderedWorldsWithFileinfos => _sortByDate ? WorldsWithFileinfos.OrderByDescending(tuple => tuple.Item2?.LastWriteTime) : WorldsWithFileinfos.OrderBy(tuple => tuple.Item1.Name);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PresentationLogic.OnCommandUndoRedoOrExecute += async (_, args) =>
        {
            if (args.CommandName is "CreateLearningWorld" or "DeleteLearningWorld"
                or "EditLearningWorld" or "LoadLearningWorld")
            {
                await InvokeAsync(StateHasChanged);
            }
        };
        _showFileName = false;
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        MyLearningWorldsProvider.ReloadLearningWorldsInWorkspace();
        if (firstRender)
        {
         //   _h5pStandalone = await JsRuntime.InvokeAsync<IJSObjectReference>("import",
         //       "./H5pStandalone/main.bundle.js");
        //    _tobiTestJs = await JsRuntime.InvokeAsync<IJSObjectReference>("import",
        //        "./H5pStandalone/tobi-test.js");
        }
        
        
    }


    private void NavigateToApp()
    {
        NavManager.NavigateTo("/app");
    }

    private async void ImportLearningWorldAsync()
    {
        if (await PresentationLogic.ImportLearningWorldFromArchiveAsync() != null)
            NavigateToApp();
    }

    
    private  void  CreateH5PValidator()
    {
    /*
        if (_h5pStandalone != null)
        {
            _h5pTestButtonText  = new (await _h5pStandalone.InvokeAsync<string>("javaScriptHalloWorldFunction"));
            
        }
        */
        //ValidatorDialog = true;
        // _h5pTestButtonText  = new (await JsRuntime.InvokeAsync<string>("javaScriptHalloWorldFunction"));
        // _h5pTestButtonText  = new (await JsRuntime.InvokeAsync<string>("testH5P", "h5p-container"));
        // await JsRuntime.InvokeVoidAsync("testH5P", "h5p-container");
       // await InvokeAsync(StateHasChanged);
       var h5pPlayerController = new H5pPlayerController();
       h5pPlayerController.StartH5pPlayer(JsRuntime);

    }
    private void CreateLearningWorld()
    {
        _createLearningWorldDialogOpen = true;
    }
    
    [JSInvokable]
    public static void ReceiveJsonData(string jsonData)
    {
        // JSON-Daten deserialisieren
        var jsonObject = JsonSerializer.Deserialize<Dictionary<string, object>>(jsonData);

        Console.WriteLine($"Received JSON data from JavaScript: {jsonObject}");
        Console.WriteLine($"Received JSON data from JavaScript: {jsonData}");

        // Hier kannst du die JSON-Daten weiterverarbeiten
    }

    private void OnNewLearningWorldCreated()
    {
        _createLearningWorldDialogOpen = false;
        NavigateToApp();
    }

    private void OpenLearningWorld(ILearningWorldViewModel learningWorldViewModel)
    {
        SelectedViewModelsProvider.SetLearningWorld(learningWorldViewModel, null);
        NavigateToApp();
    }

    private async Task DeleteLearningWorld(ILearningWorldViewModel learningWorldViewModel)
    {
        var dialogParameters = new DialogParameters()
        {
            { nameof(GenericCancellationConfirmationDialog.DialogText), Localizer["ConfirmDeleteWorld.DialogText"].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonText), Localizer["ConfirmDeleteWorld.SubmitButtonText"].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonColor), Color.Error }
        };
        var dialogReference = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["ConfirmDeleteWorld.Title"], dialogParameters);
        var result = await dialogReference.Result;
        if (result.Canceled) return;
        PresentationLogic.DeleteLearningWorldByPath(learningWorldViewModel.SavePath);
        PresentationLogic.DeleteLearningWorld(WorkspaceViewModel, learningWorldViewModel);
    }
    
   /*
    @implements IAsyncDisposable
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_h5pStandalone is not null)
        {
            await _h5pStandalone.DisposeAsync();
        }
    }
*/
}