@page "/MyLearningWorldsOverview"
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.MyLearningWorlds
@using Presentation.PresentationLogic.API
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Dialogues
@using Presentation.Components.Forms.World
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
<main class="overflow-hidden flex flex-col items-center relative min-h-screen max-h-screen h-screen w-screen bg-gradient-to-br m-0 from-adlerbggradientfrom to-adlerbggradientto">
    <HeaderBar/>
    <article class="p-2 flex flex-col items-center gap-4 overflow-hidden h-[41rem] 2xl:h-[44rem] 3xl:h-[56rem] 1080p:h-[58rem] 2500p:h-[80rem] 3000p:h-[90rem] 3700p:h-[123rem] w-5/6">
        <h3 class="font-bold text-2xl text-center text-adlerdarkblue">@Localizer["Page.LearningWorld.Heading"]</h3>
        <p class="text-md -mt-4">@Localizer["Page.LearningWorld.Subheading"]</p>
        <section class="flex flex-row gap-2 justify-center bg-blacktrans-200 p-1 rounded-lg">
            <div class="btn-standard w-28 flex justify-center items-center create-world-button"
                 @onclick="CreateLearningWorld"
                 title=@Localizer["Page.LearningWorld.Button.New.Hover"]>
                <button class="gap-2">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Title=@Localizer["Page.LearningWorld.Button.New.Hover"] Class="z-20 add-learning-world"></MudIcon>
                    <p class="z-10 uppercase">@Localizer["Page.LearningWorld.Button.New.Text"]</p>
                </button>
                <img src="CustomIcons/world-icon-nobg.png" class="z-0 pointer-events-none opacity-20 absolute w-8 h-8">
            </div>
            <div class="btn-standard w-42 flex justify-center items-center import-world-button"
                 @onclick="ImportLearningWorldAsync"
                 title=@Localizer["Page.LearningWorld.Button.Import.Hover"]>
                <button class="gap-2">
                    <MudIcon Icon="@Icons.Material.Filled.Unarchive" Title=@Localizer["Page.LearningWorld.Button.Import.Hover"] Class="z-10 load-learning-world"></MudIcon>
                    <p class="z-10 uppercase">@Localizer["Page.LearningWorld.Button.Import.Text"]</p>
                </button>
                <img src="CustomIcons/world-icon-nobg.png" class="z-0 pointer-events-none opacity-20 absolute w-8 h-8">
            </div>
        </section>
        <section class="flex flex-col w-5/6 m-auto bg-blacktrans-200 h-[475px] 2xl:h-[500px] 3xl:h-[700px] 1080p:h-[750px] 2500p:h-[1100px] 3000p:h-[1250px] 3700p:h-[1775px] p-2 rounded-lg">
            <MudGrid Class="flex justify-center overflow-auto mt-4 h-[95%] shrink" Spacing="2">
                @foreach (var world in WorkspaceViewModel.LearningWorlds)
                {
                    <LearningWorldCard @key="world" OnOpenLearningWorld="OpenLearningWorld" LearningWorld="world"
                                       OnCloseLearningWorld="DeleteLearningWorld"
                                       FileInfo="@MyLearningWorldsProvider.GetFileInfoFromPath(world.SavePath)"/>
                }
            </MudGrid>
        </section>
        <MudDrawer Width="26%" Height="100%" @bind-Open="_createLearningWorldDialogOpen" Variant="@DrawerVariant.Temporary" Position="DrawerPosition.Left">
            <CreateWorldForm OnSubmitted="OnNewLearningWorldCreated"/>
        </MudDrawer>
    </article>
    <img class="pointer-events-none w-20 opacity-50 absolute bottom-1 right-1" src="/CustomIcons/autorentool-logo.png"/>
</main>

@code {


    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<MyLearningWorldsOverview> Localizer { get; private init; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMyLearningWorldsProvider MyLearningWorldsProvider { get; private init; }

    [Inject, AllowNull]
    internal IAuthoringToolWorkspaceViewModel WorkspaceViewModel { get; private init; }

    [Inject, AllowNull]
    internal ISelectedViewModelsProvider SelectedViewModelsProvider { get; private init; }

    [Inject, AllowNull]
    internal IDialogService DialogService { get; private init; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal NavigationManager NavManager { get; private init; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; private init; }


    private bool _createLearningWorldDialogOpen;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PresentationLogic.OnCommandUndoRedoOrExecute += async (_, args) =>
        {
            if (args.CommandName is "CreateLearningWorld" or "DeleteLearningWorld" 
                or "EditLearningWorld" or "LoadLearningWorld")
            {
                await InvokeAsync(StateHasChanged);
            }
        };
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        MyLearningWorldsProvider.ReloadLearningWorldsInWorkspace();
    }


    private void NavigateToApp()
    {
        NavManager.NavigateTo("/app");
    }

    private async void ImportLearningWorldAsync()
    {
        if (await PresentationLogic.ImportLearningWorldFromArchiveAsync() != null)
            NavigateToApp();
    }

    private void CreateLearningWorld()
    {
        _createLearningWorldDialogOpen = true;
    }

    private void OnNewLearningWorldCreated()
    {
        _createLearningWorldDialogOpen = false;
        NavigateToApp();
    }

    private void OpenLearningWorld(ILearningWorldViewModel learningWorldViewModel)
    {
        SelectedViewModelsProvider.SetLearningWorld(learningWorldViewModel, null);
        NavigateToApp();
    }

    private async Task DeleteLearningWorld(ILearningWorldViewModel learningWorldViewModel)
    {
        var dialogParameters = new DialogParameters()
        {
            { nameof(GenericCancellationConfirmationDialog.DialogText), Localizer["ConfirmDeleteWorld.DialogText"].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonText), Localizer["ConfirmDeleteWorld.SubmitButtonText"].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonColor), Color.Error }
        };
        var dialogReference = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["ConfirmDeleteWorld.Title"], dialogParameters);
        var result = await dialogReference.Result;
        if (result.Canceled) return;
        PresentationLogic.DeleteLearningWorldByPath(learningWorldViewModel.SavePath);
        PresentationLogic.DeleteLearningWorld(WorkspaceViewModel, learningWorldViewModel);
    }

}