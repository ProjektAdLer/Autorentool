@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningSpace
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor.AdvancedLearningSpaceEditor
@using Shared
@using ElectronNET.API.Entities
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor.AdvancedComponent
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor.AdvancedLearningSpace
@using Presentation.PresentationLogic.LearningElement
@using Presentation.View.LearningElement
@using Presentation.Components
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor
@using System.Numerics
@ChildContent

<section class="w-[680px] p-2 gap-1 flex flex-col justify-start">
<div class="gap-8 flex justify-between items-start">
    <label id="learning-element-info" class="font-medium text-lg flex flex-col justify-stretch">
        <h3 class="text-base text-adlerblue-600 space-theme">
            <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Theme.Text"] </span>@LearningSpaceP.LearningSpaceVm?.Theme
        </h3>
        @*<h3 class="text-base text-adlerblue-600"><span class="text-adlergrey-600">Selected learning element: </span> @SelectedViewModelsProvider.LearningElement.Name</h3>*@
        <h3 class="text-base text-adlerblue-600 flex-initial break-all space-goals">
            <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Goals.Text"] </span>@LearningSpaceP.LearningSpaceVm?.Goals
        </h3>
    </label>
    <div class="min-w-max">
        <h3 class="text-base text-adlerblue-600 space-workload">
            <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Workload.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Workload<span class="text-adlergrey-600"> min.</span>
        </h3>
        <h3 class="text-base text-adlerblue-600 space-points">
            <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Points.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Points
        </h3>
    </div>
</div>
@if (AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel != null)
{
    <div class="bg-adlerbgbright border-2 border-b-adlerdeactivated flex-col items-start">
        <div class="h-[375px] w-[650px]"
             @onmousemove=@(e => MouseService.FireMove(this, e))
             @onmouseup=@(e => MouseService.FireUp(this, e))
             @onmouseleave=@(e => MouseService.FireOut(this, e))>
            <div class="relative h-[0px]">
                @* draw elementslots (in eigenem div, wegen mud blazor) *@

                @foreach (var advancedComponentSlot in AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.ContainedAdvancedLearningElementSlots)
                {
                    <DraggableAdvancedLearningElementSlot
                        AdvancedComponent="advancedComponentSlot">
                    </DraggableAdvancedLearningElementSlot>
                    // OnDraggedDraggable="@AdvancedLearningSpaceEditorPresenter.DragSelectedAdvancedComponent"
                    // OnRightClickedDraggable="@AdvancedLearningSpaceEditorPresenter.RightClickOnAdvancedComponent"
                    // ShowingRightClickMenu="learningSpace == LearningWorldP.RightClickedLearningObject"
                    // OnCloseRightClickMenu="@AdvancedLearningSpaceEditorPresenter.HideRightClickMenu"
                }

            </div>

            <svg width="650" height="375" overflow="scroll">
                @* draw outline *@
                <polygon points="20,20 20,350 630,350 630,20" style="fill:green;stroke:black;stroke-width:3;fill-opacity:0.1;stroke-opacity:0.9"/>
                @* draw grid *@
                @for (int i = 30; i < 630; i += 10)
                {
                    <line x1="@i" y1="20" x2="@i" y2="350" style="stroke:#d6d5d5;stroke-width:1"/>
                }
                @for (int i = 30; i < 350; i += 10)
                {
                    <line x1="20" y1="@i" x2="630" y2="@i" style="stroke:#d6d5d5;stroke-width:1"/>
                }
                @* draw space *@
                
                <polyline points="@GetSpaceCornerPointsString()" style="stroke:yellow;stroke-width:10;stroke-opacity:0.5;fill-opacity:0" onmousedown="@AddCornerPoint">
                    <title>
                        @Localizer["AdvancedLearningSpaceEditor.SpaceDescriptions.SpaceOutline"]
                    </title>
                </polyline>
                
                <polyline points="@GetSpaceCornerPointsString()" style="fill:blue;fill-opacity:0.1">
                    <title>
                        @Localizer["AdvancedLearningSpaceEditor.SpaceDescriptions.SpaceFillout"]
                    </title>
                </polyline>
                @* draw corner points *@

                @foreach (var (cornerPointKey, cornerPoint) in AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.AdvancedLearningSpaceLayout.AdvancedCornerPoints)
                {
                <AdvancedDraggable
                    LearningObject="cornerPoint"
                    @bind-X="cornerPoint.X"
                    @bind-Y="cornerPoint.Y"
                    OnDoubleClicked="@DeleteCornerPoint"
                    T="DoublePoint">
                    <circle r="5" fill="red" stroke="black">
                        <title>
                            @Localizer["AdvancedLearningSpaceEditor.SpaceDescriptions.CornerPoint"]
                        </title>
                    </circle>
                </AdvancedDraggable>
                }


                @* draw decorations *@

                @foreach (var advancedComponentDecoration in AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.ContainedAdvancedDecorations)
                {
                    
                <AdvancedDraggable
                    LearningObject="advancedComponentDecoration"
                    @bind-X="advancedComponentDecoration.PositionX"
                    @bind-Y="advancedComponentDecoration.PositionY"
                    OnRightClicked="@RotateAdvancedComponent"
                    T="IAdvancedComponentViewModel">
                    <rect width="40" height="40" x="-20" y="-20" transform="rotate(@advancedComponentDecoration.Rotation)" fill="lime" stroke="black" opacity="60%">
                        <title>
                            @Localizer["AdvancedLearningSpaceEditor.SpaceDescriptions.Decoration"]
                        </title>
                    </rect>
                    <polyline points="-5,-5 5,-5 5,10 10,10 0,18 -10,10 -5,10 -5,-5" transform="rotate(@advancedComponentDecoration.Rotation)" fill="gray" opacity="50%"/>
                    @((MarkupString)DrawFlowerSvg())
                    
                </AdvancedDraggable>
                    // OnDoubleClicked="@AdvancedLearningSpaceEditorPresenter.DeleteAdvancedDecoration"
                }

                @* draw learning element slot outlines *@
                @foreach (var advancedComponentSlot in AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.ContainedAdvancedLearningElementSlots)
                {
                    
                <AdvancedDraggable
                    LearningObject="advancedComponentSlot"
                    @bind-X="advancedComponentSlot.PositionX"
                    @bind-Y="advancedComponentSlot.PositionY"
                    OnRightClicked="@RotateAdvancedComponent"
                    T="IAdvancedComponentViewModel">
                    <rect width="40" height="40" x="-20" y="-20" fill="gray" stroke="black" opacity="30%">
                        <title>
                            @Localizer["AdvancedLearningSpaceEditor.SpaceDescriptions.ElementSlotOutline"]
                        </title>
                    </rect>
                    <polyline points="-5,-5 5,-5 5,10 10,10 0,18 -10,10 -5,10 -5,-5" transform="rotate(@advancedComponentSlot.Rotation)" fill="gray" opacity="50%"/>
                </AdvancedDraggable>
                }

                @* draw doors *@
                @{
                    var entryDoorPosition = AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.AdvancedLearningSpaceLayout.EntryDoorPosition;
    {
        <AdvancedDraggableOnWall
            LearningObject="entryDoorPosition"
            CornerPoints="GetSpaceCornerPoints()"
            @bind-X="entryDoorPosition.X"
            @bind-Y="entryDoorPosition.Y">
            <rect width="10" height="30" x="-5" y="-15" fill="green" opacity="80%">
                <title>
                    @Localizer["AdvancedLearningSpaceEditor.SpaceDescriptions.Entrydoor"]
                </title>
            </rect>

        </AdvancedDraggableOnWall>
    }
                }
                @{
                    var exitDoorPosition = AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.AdvancedLearningSpaceLayout.ExitDoorPosition;
    {
        <AdvancedDraggableOnWall
            LearningObject="exitDoorPosition"
            CornerPoints="AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.AdvancedLearningSpaceLayout.AdvancedCornerPoints"
            @bind-X="exitDoorPosition.X"
            @bind-Y="exitDoorPosition.Y">
            <rect width="10" height="30" x="-5" y="-15" fill="red" opacity="80%">
                <title>
                    @Localizer["AdvancedLearningSpaceEditor.SpaceDescriptions.Exitdoor"]
                </title>
            </rect>
        </AdvancedDraggableOnWall>
    }
                }
            </svg>
        </div>
    </div>
    <div class="w-full bg-adlerbgbright border-2 border-b-adlerdeactivated">
        <button
            class="h-[90px] w-[90px] hover:bg-gray-700 hover:text-white rounded-md px-2 py-1 text-sm font-medium flex-col m-0.5 ml-5"
            @onclick=CreateAdvancedLearningElementSlot>
            <div class="h-[45px]">
                <img src="CustomIcons/AdvancedLearningRoomGeneratorIcons/learning-element-slot-icon-nobg.png" class="pointer-events-none w-8 h-8">
            </div>
            <div class="h-[45px]">
                @Localizer["AdvancedLearningSpaceEditor.LearningElementSlots.Title"]
            </div>
        </button>
        <button
            class="h-[90px] w-[90px] hover:bg-gray-700 hover:text-white rounded-md px-2 py-1 text-sm font-medium flex-col m-0.5 ml-5"
            @onclick=CreateAdvancedDecoration>
            <div class="h-[45px]">
                <img src="CustomIcons/AdvancedLearningRoomGeneratorIcons/decoration-nobg.png" class="pointer-events-none w-8 h-8">
            </div>
            <div class="h-[45px]">
                @Localizer["AdvancedLearningSpaceEditor.Decorations.Title"]
            </div>
        </button>
        <button
            class="h-[90px] w-[90px] hover:bg-gray-700 hover:text-white rounded-md px-2 py-1 text-sm font-medium flex-col m-0.5 ml-5"
            @onclick=CreateAdvancedLearningElementSlot>
            <div class="h-[45px]">
                <img src="CustomIcons/AdvancedLearningRoomGeneratorIcons/door-icon-nobg.png" class="pointer-events-none w-8 h-8">
            </div>
            <div class="h-[45px]">
                @Localizer["AdvancedLearningSpaceEditor.Doors.Title"]
            </div>
        </button>
    </div>
}
</section>


@code
{
#pragma warning disable CS8618 // injected by framework 
    [Inject]
    public IMouseService MouseService { get; set; }

    [Inject]
    public ILearningSpacePresenter LearningSpaceP { get; set; }

    [Inject]
    public IAdvancedLearningSpaceEditorPresenter AdvancedLearningSpaceEditorPresenter { get; set; }

    [Inject]
    private IStringLocalizer<AdvancedLearningSpaceEditorView> Localizer { get; set; }
#pragma warning restore CS8618

    private ExceptionWrapper? ErrorState { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private void CreateAdvancedLearningElementSlot()
    {
        AdvancedLearningSpaceEditorPresenter.CreateAdvancedLearningElementSlot();
    }

    private void CreateAdvancedDecoration()
    {
        AdvancedLearningSpaceEditorPresenter.CreateAdvancedDecoration();
    }

    private string GetSpaceCornerPointsString()
    {
        var cornerPointString = "";
        if (AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel != null)
        {
            foreach (var (cornerPointKey, cornerPoint) in AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.AdvancedLearningSpaceLayout.AdvancedCornerPoints)
            {
                cornerPointString += $"{Math.Round(cornerPoint.X / 10) * 10},{Math.Round(cornerPoint.Y / 10) * 10} ";
            }
            cornerPointString += $"{Math.Round(AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.AdvancedLearningSpaceLayout.AdvancedCornerPoints[0].X / 10) * 10},{Math.Round(AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.AdvancedLearningSpaceLayout.AdvancedCornerPoints[0].Y / 10) * 10} ";
            return cornerPointString;
        }
        return "";
    }

    private IDictionary<int, DoublePoint> GetSpaceCornerPoints()
    {
        return AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel != null
            ? AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.AdvancedLearningSpaceLayout.AdvancedCornerPoints
            : new Dictionary<int, DoublePoint>();
    }

    private string DrawFlowerSvg()
    {
        return @"<svg x=""-16"" y=""-20"" width=""2000"" height=""2000"">
                        <defs>
                            <style>                          
                                .cls-2 {
                                  stroke-width: 60px;
                                  stroke-opacity: 0.5;
                                }
                          
                                .cls-2, .cls-3 {
                                  stroke: #172d4d;
                                  fill-opacity: 0;
                                  stroke-linecap: round;
                                  stroke-linejoin: round;
                                  stroke-opacity: 0.5;
                                }
                          
                                .cls-3 {
                                  fill-opacity: 0;
                                  stroke-width: 50px;
                                  stroke-opacity: 0.5;
                                }
                              </style>
                        </defs>
                        <g transform=""scale(0.015)"">
                            <path class=""cls-2"" d=""m1091.05,1515l-36.36-525.39s29.09,140.51,269.1,97.75,7.27-274.91-269.1-103.86-538.19,189.38-472.74,122.18,276.37-360.44,472.74-116.07""/>
                            <line class=""cls-2"" x1=""1055.2"" y1=""993"" x2=""1046.2"" y2=""678""/>
                            <g>
                                <ellipse class=""cls-3"" cx=""1030.25"" cy=""638.26"" rx=""142.64"" ry=""51.87"" transform=""translate(67.8 1374.79) rotate(-69.2)""/>
                                <ellipse class=""cls-3"" cx=""952.78"" cy=""584.52"" rx=""142.64"" ry=""51.87"" transform=""translate(-154.99 733.82) rotate(-39.2)""/>
                                <ellipse class=""cls-3"" cx=""1134.44"" cy=""647.65"" rx=""51.87"" ry=""142.64"" transform=""translate(-88.99 189.8) rotate(-9.2)""/>
                                <ellipse class=""cls-3"" cx=""1277.77"" cy=""529.95"" rx=""51.87"" ry=""142.64"" transform=""translate(328.69 1536.33) rotate(-69.2)""/>
                                <ellipse class=""cls-3"" cx=""1224.03"" cy=""607.42"" rx=""51.87"" ry=""142.64"" transform=""translate(-108.41 910.43) rotate(-39.2)""/>
                                <ellipse class=""cls-3"" cx=""1287.16"" cy=""425.77"" rx=""142.64"" ry=""51.87"" transform=""translate(-51.53 211.37) rotate(-9.2)""/>
                                <ellipse class=""cls-3"" cx=""1169.47"" cy=""282.43"" rx=""142.64"" ry=""51.87"" transform=""translate(490.23 1275.44) rotate(-69.2)""/>
                                <ellipse class=""cls-3"" cx=""1246.94"" cy=""336.17"" rx=""142.64"" ry=""51.87"" transform=""translate(68.2 863.85) rotate(-39.2)""/>
                                <ellipse class=""cls-3"" cx=""1065.28"" cy=""273.05"" rx=""51.87"" ry=""142.64"" transform=""translate(-29.96 173.91) rotate(-9.2)""/>
                                <ellipse class=""cls-3"" cx=""908.24"" cy=""490.6"" rx=""142.64"" ry=""51.87"" transform=""translate(-66.78 151.59) rotate(-9.2)""/>
                                <ellipse class=""cls-3"" cx=""921.95"" cy=""390.74"" rx=""51.87"" ry=""142.64"" transform=""translate(229.34 1113.9) rotate(-69.2)""/>
                                <ellipse class=""cls-3"" cx=""975.68"" cy=""313.27"" rx=""51.87"" ry=""142.64"" transform=""translate(21.62 687.24) rotate(-39.2)""/>
                                <circle class=""cls-3"" cx=""1097.7"" cy=""462.51"" r=""62.67""/>
                            </g>
                            <polygon class=""cls-2"" points=""1077.87 1403.7 870.59 1378.83 944.42 1868 1077.87 1868 1211.32 1868 1285.14 1378.83 1077.87 1403.7""/>
                        </g>
                    </svg>";
    }

    private void DeleteCornerPoint(DoublePoint cornerPoint)
    {
        //fragen ob das eig in presenter soll
        var cornerPointDictionary = AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel!.AdvancedLearningSpaceLayout.AdvancedCornerPoints;
        var cornerPointKey = cornerPointDictionary.FirstOrDefault(x => x.Value == cornerPoint).Key;
        for (int i = cornerPointKey+1; i < cornerPointDictionary.Count; i++)
        {
            cornerPointDictionary[i-1] = cornerPointDictionary[i];
        }
        cornerPointDictionary.Remove(cornerPointDictionary.Count-1);
    }
    
    private void AddCornerPoint(MouseEventArgs e)
    {
    // Check if it was a rightclick
        if (e.Button == 2)
        {
            var mouseLocation = new Vector2((float)e.OffsetX, (float)e.OffsetY);
            var cornerPoints = this.GetSpaceCornerPoints();
            //Everything below can potentially move to editorpresenter or maybe even somewhere else entirely?
            
            //Compute the wall that is closest to mouse location, then add a corner point to that wall
            var closestWallPoint = new Vector2();
            var closestPoint = new Vector2();
            var shortestDistance = float.MaxValue;
            for (int i = 0; i < cornerPoints!.Count; i++)
            {
                var wallPoint1 = new Vector2((float)cornerPoints[i].X, (float)cornerPoints[i].Y);
                var wallPoint2 = new Vector2((float)cornerPoints[i + 1 < cornerPoints.Count ? i + 1 : 0].X, (float)cornerPoints[i + 1 < cornerPoints.Count ? i + 1 : 0].Y);
                var distance = this.ComputeDistance(mouseLocation, wallPoint1, wallPoint2, out Vector2 closestLocalPoint);
                if (distance < shortestDistance)
                {
                    shortestDistance = distance;
                    closestPoint = closestLocalPoint;
                    closestWallPoint = wallPoint1;
                }
            }
            var closestWallPointIndex = cornerPoints.FirstOrDefault(x => x.Value.X == closestWallPoint.X && x.Value.Y == closestWallPoint.Y).Key;
            var closestDoublePoint = new DoublePoint{X = closestPoint.X, Y = closestPoint.Y};
            cornerPoints.Add(cornerPoints.Count, cornerPoints[cornerPoints.Count-1]);
            for (int i = cornerPoints.Count-1; i > closestWallPointIndex+1; i--)
            {
                cornerPoints[i] = cornerPoints[i-1];
            }
            
            cornerPoints[closestWallPointIndex + 1] = closestDoublePoint;
        }
    }
    private float ComputeDistance(Vector2 mousePoint, Vector2 wallPoint1, Vector2 wallPoint2, out Vector2 closestPoint)
    {
        Vector2 wallVector = wallPoint2 - wallPoint1;
        Vector2 mouseVector = mousePoint - wallPoint1;

        float wallProjection = Vector2.Dot(mouseVector, wallVector);
        float wallLength = wallVector.LengthSquared();
        float distance = wallProjection / wallLength;

        if (distance <= 0)
        {
            closestPoint = wallPoint1;
        }
        else if (distance >= 1)
        {
            closestPoint = wallPoint2;
        }
        else
        {
            closestPoint = wallPoint1 + distance * wallVector;
        }

        return Vector2.Distance(mousePoint, closestPoint);
    }
    private void RotateAdvancedComponent(IAdvancedComponentViewModel advancedComponent)
    {
     advancedComponent.Rotation += 90;
        
    }
}