@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningSpace
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor.AdvancedLearningSpaceEditor
@using Shared
@using ElectronNET.API.Entities
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor.AdvancedComponent
@ChildContent

<section class="p-2 gap-1 flex flex-col justify-start">
    <div class="gap-8 flex justify-between items-start">
        <label id="learning-element-info" class="font-medium text-lg flex flex-col justify-stretch">
            <h3 class="text-base text-adlerblue-600 space-theme">
                <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Theme.Text"] </span>@LearningSpaceP.LearningSpaceVm?.Theme
            </h3>
            @*<h3 class="text-base text-adlerblue-600"><span class="text-adlergrey-600">Selected learning element: </span> @SelectedViewModelsProvider.LearningElement.Name</h3>*@
            <h3 class="text-base text-adlerblue-600 flex-initial break-all space-goals">
                <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Goals.Text"] </span>@LearningSpaceP.LearningSpaceVm?.Goals
            </h3>
        </label>
        <div class="min-w-max">
            <h3 class="text-base text-adlerblue-600 space-workload">
                <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Workload.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Workload<span class="text-adlergrey-600"> min.</span>
            </h3>
            <h3 class="text-base text-adlerblue-600 space-points">
                <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Points.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Points
            </h3>
        </div>
    </div>

    <div class="w-full bg-adlerbgbright border-2 border-b-adlerdeactivated flex-col items-start">
        <div class="h-[375px]">
            <svg width="750" height="375">
                @* draw outline *@
                <polygon points="20,20 20,350 730,350 730,20" style="fill:green;stroke:black;stroke-width:3;fill-opacity:0.1;stroke-opacity:0.9"/>
                @* draw grid *@
                @for (int i = 30; i < 730; i += 10)
                {
                    <line x1="@i" y1="20" x2="@i" y2="350" style="stroke:#d6d5d5;stroke-width:1"/>
                }
                @for (int i = 30; i < 350; i += 10)
                {
                    <line x1="20" y1="@i" x2="730" y2="@i" style="stroke:#d6d5d5;stroke-width:1"/>
                }
                @* draw space *@
                @* TODO: Doubleclick functionality *@
                <polyline points="@getSpaceCornerPointsString()" style="stroke:yellow;stroke-width:3;stroke-opacity:0.9;fill-opacity:0">
                    <title>
                        Spaceoutline.
                        Doubleclick to insert new corner point.
                    </title>
                </polyline>
                <polyline points="@getSpaceCornerPointsString()" style="fill:blue;fill-opacity:0.1">
                    <title>
                        Space.
                        Use Buttons below to add element slots or decorations.
                    </title>
                </polyline>
                @foreach (var cornerPoint in getSpaceCornerPoints())
                {
                    // TODO: Drag and Drop functionality
                    // TODO: Doubleclick functionality
                    <circle cx="@cornerPoint.X" cy="@cornerPoint.Y" r="5" fill="red">
                        <title>
                            Drag and Drop to move corner point. Doubleclick to delete corner point.
                        </title>
                    </circle>
                }
                @* draw elementslots *@
                @* WISO BRAUCHE ICH HIER NE NEUE LISTE WENNS NULL IST??? (glaube uch die abfrage ist noch etwas wrong...)*@
                @foreach (var advancedComponentSlot in AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel?.ContainedAdvancedLearningElementSlots ?? new List<AdvancedLearningElementSlotViewModel>())
                {
                    <rect x="@advancedComponentSlot.PositionX" y="@advancedComponentSlot.PositionY" style="fill:purple;fill-opacity:0.1">
                        @{
                            Console.WriteLine("ADVANCEDCOMPSLOT: " + advancedComponentSlot);
                        }
                        <title>
                            Learning Element Slot.
                            Drag and Drop to move.
                        </title>
                    </rect>
                }
                @* draw decorations *@
                @* draw doors *@
                @* draw spawnpoint *@

            </svg>
        </div>

        @* <div style="clip-path: polygon(0% 0%,  0% 60%, 60% 60%, 60% 0%);"> *@
        @*     Raum content *@
        @*     <div class="rounded-lg w-full grow overflow-scroll"> *@
        @*         <svg xmlns="http://www.w3.org/2000/svg" class="h-[350px] 2xl:h-[525px] 1080p:h-[750px] 2500p:h-[1100px] 3000p:h-[1250px] 3700p:h-[1775px] w-[500px] 2xl:w-[500px] 1080p:w-[500px] 2500p:w-[500px] 3000p:w-[600px] 3700p:w-[750px]" *@
        @*              @onmousemove=@(e => MouseService.FireMove(this, e)) *@
        @*                          @onmouseup=@(e => MouseService.FireUp(this, e)) *@
        @*                          @onmouseleave=@(e => MouseService.FireOut(this, e))> *@
        @*             @if (AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel != null) *@
        @*             { *@
        @*                 @foreach (var advancedComponentSlot in AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.ContainedAdvancedLearningElementSlots) *@
        @*                 { *@
        @*                     <DraggableAdvancedLearningElementSlot ObjectName="learningElementSlot" *@
        @*                                                           AdvancedComponent="advancedComponentSlot" *@
        @*                                                           AdvancedPositioningService="AdvancedLearningSpaceEditorPresenter" *@
        @*                                                           OnClickedDraggable="@AdvancedLearningSpaceEditorPresenter.SetSelectedAdvancedComponentViewModel" *@
        @*                                                           OnDraggedDraggable="@AdvancedLearningSpaceEditorPresenter.DragSelectedAdvancedComponent" *@
        @*                                                           OnClickedDeleteObject="@AdvancedLearningSpaceEditorPresenter.DeleteSelectedAdvancedComponent" *@
        @*                                                           OnRightClickedDraggable="@AdvancedLearningSpaceEditorPresenter.RightClickOnAdvancedComponent" *@
        @*                                                           $1$ ShowingRightClickMenu="learningSpace == LearningWorldP.RightClickedLearningObject" #1# *@
        @*                                                           $1$ OnCloseRightClickMenu="@AdvancedLearningSpaceEditorPresenter.HideRightClickMenu" #1# *@
        @*                                                           AdvancedEditorPresenter="@AdvancedLearningSpaceEditorPresenter"> *@
        @*                     </DraggableAdvancedLearningElementSlot> *@
        @*                 } *@
        @*             } *@
        @*             <!-- The RightClickMenu might lies behind other spaces.  *@
        @*             This line brings the RightClickMenu back to top, but the clickable buttons do not work anymore. --> *@
        @*             <!--<use xlink:href="#rightClickMenu" />--> *@
        @*         </svg> *@
        @*     </div> *@
        @* </div> *@
    </div>
    <div class="w-full bg-adlerbgbright border-2 border-b-adlerdeactivated">
        <button
            class="h-[90px] w-[90px] hover:bg-gray-700 hover:text-white rounded-md px-2 py-1 text-sm font-medium flex-col m-0.5 ml-5"
            @onclick=CreateAdvancedLearningElementSlot>
            <div class="h-[45px]">
                <img src="CustomIcons/AdvancedLearningRoomGeneratorIcons/learning-element-slot-icon-nobg.png" class="pointer-events-none w-8 h-8">
            </div>
            <div class="h-[45px]">
                @Localizer["AdvancedLearningSpaceEditor.LearningElementSlots.Title"]
            </div>
        </button>
        <button
            class="h-[90px] w-[90px] hover:bg-gray-700 hover:text-white rounded-md px-2 py-1 text-sm font-medium flex-col m-0.5 ml-5"
            @onclick=CreateAdvancedLearningElementSlot>
            <div class="h-[45px]">
                <img src="CustomIcons/AdvancedLearningRoomGeneratorIcons/decoration-nobg.png" class="pointer-events-none w-8 h-8">
            </div>
            <div class="h-[45px]">
                @Localizer["AdvancedLearningSpaceEditor.Decorations.Title"]
            </div>
        </button>
        <button
            class="h-[90px] w-[90px] hover:bg-gray-700 hover:text-white rounded-md px-2 py-1 text-sm font-medium flex-col m-0.5 ml-5"
            @onclick=CreateAdvancedLearningElementSlot>
            <div class="h-[45px]">
                <img src="CustomIcons/AdvancedLearningRoomGeneratorIcons/door-icon-nobg.png" class="pointer-events-none w-8 h-8">
            </div>
            <div class="h-[45px]">
                @Localizer["AdvancedLearningSpaceEditor.Doors.Title"]
            </div>
        </button>
    </div>
</section>


@code
{
#pragma warning disable CS8618 // injected by framework 
    [Inject]
    public IMouseService MouseService { get; set; }

    [Inject]
    public ILearningSpacePresenter LearningSpaceP { get; set; }

    [Inject]
    public IAdvancedLearningSpaceEditorPresenter AdvancedLearningSpaceEditorPresenter { get; set; }

    [Inject]
    private IStringLocalizer<AdvancedLearningSpaceEditorView> Localizer { get; set; }
#pragma warning restore CS8618

    private ExceptionWrapper? ErrorState { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private void CreateAdvancedLearningElementSlot()
    {
        AdvancedLearningSpaceEditorPresenter.CreateAdvancedLearningElementSlot();
    }

    private string getSpaceCornerPointsString()
    {
    // raw space coords need to be offset to be centered somewhat ok.
    // AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel?.SpaceCornerPoints ?? "";
        return "50,50 50,200 500,200 500,50 50,50";
    }

    private List<Point> getSpaceCornerPoints()
    {
    //ideally there is one base method to grab the corners and these two methods here just put them in the right format.
        return (new List<Point>(new Point[]
        {
            new Point { X = 50, Y = 50 },
            new Point { X = 50, Y = 200 },
            new Point { X = 500, Y = 200 },
            new Point { X = 500, Y = 50 }
        }));
    }

}