@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningSpace
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor.AdvancedLearningSpaceEditor
@using Shared
@using ElectronNET.API.Entities
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor.AdvancedComponent
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor.AdvancedLearningSpace
@using Presentation.PresentationLogic.LearningElement
@using Presentation.View.LearningElement
@using Presentation.Components
@using Presentation.PresentationLogic.AdvancedLearningSpaceEditor
@ChildContent

<section class="w-[680px] p-2 gap-1 flex flex-col justify-start">
    <div class="gap-8 flex justify-between items-start">
        <label id="learning-element-info" class="font-medium text-lg flex flex-col justify-stretch">
            <h3 class="text-base text-adlerblue-600 space-theme">
                <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Theme.Text"] </span>@LearningSpaceP.LearningSpaceVm?.Theme
            </h3>
            @*<h3 class="text-base text-adlerblue-600"><span class="text-adlergrey-600">Selected learning element: </span> @SelectedViewModelsProvider.LearningElement.Name</h3>*@
            <h3 class="text-base text-adlerblue-600 flex-initial break-all space-goals">
                <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Goals.Text"] </span>@LearningSpaceP.LearningSpaceVm?.Goals
            </h3>
        </label>
        <div class="min-w-max">
            <h3 class="text-base text-adlerblue-600 space-workload">
                <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Workload.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Workload<span class="text-adlergrey-600"> min.</span>
            </h3>
            <h3 class="text-base text-adlerblue-600 space-points">
                <span class="text-adlergrey-600">@Localizer["AdvancedLearningSpaceEditor.Points.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Points
            </h3>
        </div>
    </div>

    <div class="bg-adlerbgbright border-2 border-b-adlerdeactivated flex-col items-start">
        <div class="h-[375px] w-[650px]">
            <div class="h-[0px]">
                draw element slots (in eigenem div, wegen mud blazor)
                @if (AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel != null)
                {
                    @foreach (var advancedComponentSlot in AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.ContainedAdvancedLearningElementSlots)
                    {
                        <DraggableAdvancedLearningElementSlot
                            AdvancedComponent="advancedComponentSlot">
                        </DraggableAdvancedLearningElementSlot>

                        // OnDraggedDraggable="@AdvancedLearningSpaceEditorPresenter.DragSelectedAdvancedComponent"
                        // OnRightClickedDraggable="@AdvancedLearningSpaceEditorPresenter.RightClickOnAdvancedComponent"
                        // ShowingRightClickMenu="learningSpace == LearningWorldP.RightClickedLearningObject"
                        // OnCloseRightClickMenu="@AdvancedLearningSpaceEditorPresenter.HideRightClickMenu"
                    }
                }
            </div>

            <svg width="650" height="375" overflow="scroll">
                @* draw outline *@
                <polygon points="20,20 20,350 630,350 630,20" style="fill:green;stroke:black;stroke-width:3;fill-opacity:0.1;stroke-opacity:0.9"/>
                @* draw grid *@
                @for (int i = 30; i < 630; i += 10)
                {
                    <line x1="@i" y1="20" x2="@i" y2="350" style="stroke:#d6d5d5;stroke-width:1"/>
                }
                @for (int i = 30; i < 350; i += 10)
                {
                    <line x1="20" y1="@i" x2="630" y2="@i" style="stroke:#d6d5d5;stroke-width:1"/>
                }
                @* draw space *@
                @* TODO: Doubleclick functionality *@
                <polyline points="@GetSpaceCornerPointsString()" style="stroke:yellow;stroke-width:3;stroke-opacity:0.9;fill-opacity:0">
                    <title>
                        Spaceoutline.
                        Doubleclick to insert new corner point.
                    </title>
                </polyline>
                <polyline points="@GetSpaceCornerPointsString()" style="fill:blue;fill-opacity:0.1">
                    <title>
                        Space.
                        Use Buttons below to add element slots or decorations.
                    </title>
                </polyline>

                @foreach (var (cornerPointKey, cornerPoint) in GetSpaceCornerPoints())
                {
                    <Draggable
                        LearningObject="cornerPoint"
                        @bind-X="cornerPoint.X"
                        @bind-Y="cornerPoint.Y">
                        <circle r="5" fill="red" stroke="black">
                            <title>
                                Drag and Drop to move corner point. Doubleclick to delete corner point.
                            </title>
                        </circle>
                    </Draggable>
                }

                @* draw decorations *@
                @if (AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel != null)
                {
                    @foreach (var advancedComponentDecoration in AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.ContainedAdvancedDecorations)
                    {
                        <polyline points="60,60 60,80 80,80 80,60 60,60">

                        </polyline>
                        @* <DraggableAdvancedDecoration  *@
                        @*                              AdvancedComponent="advancedComponentDecoration" *@
                        @*                              OnClickedDraggable="@AdvancedLearningSpaceEditorPresenter.SetSelectedAdvancedComponentViewModel" *@
                        @*                              OnDraggedDraggable="@AdvancedLearningSpaceEditorPresenter.DragSelectedAdvancedComponent" *@
                        @*                              OnClickedDeleteObject="@AdvancedLearningSpaceEditorPresenter.DeleteSelectedAdvancedComponent" *@
                        @*                              OnRightClickedDraggable="@AdvancedLearningSpaceEditorPresenter.RightClickOnAdvancedComponent" *@
                        @*                              ShowingRightClickMenu="learningSpace == LearningWorldP.RightClickedLearningObject" *@
                        @*                              OnCloseRightClickMenu="@AdvancedLearningSpaceEditorPresenter.HideRightClickMenu" *@
                        @*                              AdvancedEditorPresenter="@AdvancedLearningSpaceEditorPresenter"> *@
                        @* </DraggableAdvancedDecoration> *@
                    }
                }

                @* draw doors *@
                @* draw spawnpoint *@
            </svg>
        </div>
    </div>
    <div class="w-full bg-adlerbgbright border-2 border-b-adlerdeactivated">
        <button
            class="h-[90px] w-[90px] hover:bg-gray-700 hover:text-white rounded-md px-2 py-1 text-sm font-medium flex-col m-0.5 ml-5"
            @onclick=CreateAdvancedLearningElementSlot>
            <div class="h-[45px]">
                <img src="CustomIcons/AdvancedLearningRoomGeneratorIcons/learning-element-slot-icon-nobg.png" class="pointer-events-none w-8 h-8">
            </div>
            <div class="h-[45px]">
                @Localizer["AdvancedLearningSpaceEditor.LearningElementSlots.Title"]
            </div>
        </button>
        <button
            class="h-[90px] w-[90px] hover:bg-gray-700 hover:text-white rounded-md px-2 py-1 text-sm font-medium flex-col m-0.5 ml-5"
            @onclick=CreateAdvancedDecoration>
            <div class="h-[45px]">
                <img src="CustomIcons/AdvancedLearningRoomGeneratorIcons/decoration-nobg.png" class="pointer-events-none w-8 h-8">
            </div>
            <div class="h-[45px]">
                @Localizer["AdvancedLearningSpaceEditor.Decorations.Title"]
            </div>
        </button>
        <button
            class="h-[90px] w-[90px] hover:bg-gray-700 hover:text-white rounded-md px-2 py-1 text-sm font-medium flex-col m-0.5 ml-5"
            @onclick=CreateAdvancedLearningElementSlot>
            <div class="h-[45px]">
                <img src="CustomIcons/AdvancedLearningRoomGeneratorIcons/door-icon-nobg.png" class="pointer-events-none w-8 h-8">
            </div>
            <div class="h-[45px]">
                @Localizer["AdvancedLearningSpaceEditor.Doors.Title"]
            </div>
        </button>
    </div>
</section>


@code
{
#pragma warning disable CS8618 // injected by framework 
    [Inject]
    public IMouseService MouseService { get; set; }

    [Inject]
    public ILearningSpacePresenter LearningSpaceP { get; set; }

    [Inject]
    public IAdvancedLearningSpaceEditorPresenter AdvancedLearningSpaceEditorPresenter { get; set; }

    [Inject]
    private IStringLocalizer<AdvancedLearningSpaceEditorView> Localizer { get; set; }
#pragma warning restore CS8618

    private ExceptionWrapper? ErrorState { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    private void CreateAdvancedLearningElementSlot()
    {
        AdvancedLearningSpaceEditorPresenter.CreateAdvancedLearningElementSlot();
    }

    private void CreateAdvancedDecoration()
    {
        AdvancedLearningSpaceEditorPresenter.CreateAdvancedDecoration();
    }

    private string GetSpaceCornerPointsString()
    {
    // raw space coords need to be offset to be centered somewhat ok.
    // AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel?.SpaceCornerPoints ?? "";
        return "50,50 50,200 500,200 500,50 50,50";
    }

    private IDictionary<int, DoublePoint> GetSpaceCornerPoints()
    {
        return AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel != null 
            ? AdvancedLearningSpaceEditorPresenter.AdvancedLearningSpaceViewModel.AdvancedLearningSpaceLayout.AdvancedCornerPoints 
            : new Dictionary<int, DoublePoint>();
    }

}