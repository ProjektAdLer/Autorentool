@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningSpace.SpaceLayout.FloorPlans
@using Presentation.View.LearningElement
@using Shared
@using Presentation.PresentationLogic.LearningElement
@using System.Text
@using Presentation.PresentationLogic.SelectedViewModels
<div class="mx-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-2xl text-center font-bold text-adlergrey-500 mx-2">Learning Space Editor</h2>
    </div>
</div>

@if (LearningSpaceP.LearningSpaceVm != null)
{
    <div class="p-2 flex justify-start space-x-2">
      <img class="w-8" src="CustomIcons/space-icon_nobg.png" alt="learningspace">
      <MudText Class="text-lg text-adlerblue-600">@LearningSpaceP.LearningSpaceVm.Name</MudText>
    </div>
    @if (SelectedViewModelsProvider?.LearningElement != null)
    {
        <section class="p-2 gap-1 flex flex-col justify-start">
            <div class="flex justify-between items-start">
            <label id="learning-element-info" class="font-medium text-lg flex flex-col">
                <h3 class="text-base text-adlerblue-600 element-name"><span class="text-adlergrey-600">Selected learning element: </span> @SelectedViewModelsProvider.LearningElement.Name</h3>
                <h3 class="text-base text-adlerblue-600 element-description"><span class="text-adlergrey-600">Description: </span> @SelectedViewModelsProvider.LearningElement.Description</h3>
            </label>
                <div>
                    <h3 class="text-base text-adlerblue-600 space-workload"><span class="text-adlergrey-600">Workload: </span> @LearningSpaceP.LearningSpaceVm?.Workload<span class="text-adlergrey-600"> min.</span></h3>
                    <h3 class="text-base text-adlerblue-600 space-points"><span class="text-adlergrey-600">Points: </span> @LearningSpaceP.LearningSpaceVm?.Points</h3>
                    @ChildContent
                </div>
            </div>
            <div class="flex justify-start">
                <button class="relative btn-standard delete-learning-element w-14" @onclick="DeleteSelectedLearningElement">
                    <img src="CustomIcons/learningelements-icon-nobg.png" alt="Delete learning element" class="absolute opacity-50 w-8 h-8">
                    <MudIcon Icon="@Icons.Material.Filled.Delete" Title="Delete learning element" Class="absolute"></MudIcon>
                </button>
                <button class="relative btn-standard save-learning-element w-14" @onclick="SaveSelectedLearningElementAsync">
                    <img src="CustomIcons/learningelements-icon-nobg.png" alt="Save learning element" class="absolute opacity-50 w-8 h-8">
                    <MudIcon Icon="@Icons.Material.Filled.Save" Title="Save learning element" Class="absolute"></MudIcon>
                </button>
                <button class="relative btn-standard show-learning-element-content w-14" @onclick="ShowSelectedElementContentAsync">
                    <img src="CustomIcons/learningelements-icon-nobg.png" alt="Show learning element" class="absolute opacity-50 w-8 h-8">
                    <MudIcon Icon="@Icons.Material.Filled.RemoveRedEye" Title="Show learning element" Class="absolute"></MudIcon>
                </button>
            </div>
        </section>
    }
    @if (LearningSpaceP.LearningSpaceVm != null)
    {
        <div class="w-full min-h-[400px] border-2 border-b-adlerdeactivated">
            @*style="width: 90%; height: 400px; border: 2px solid;"*@
            <div class="layout-shadow w-full h-full">
                <div class="layout bg-buttonbgblue w-[98%] h-[500px]" style="@GetCornerPointsString(LearningSpaceP.LearningSpaceVm.LearningSpaceLayout.FloorPlanViewModel)">

                    @for (var i = 0; i < LearningSpaceP.LearningSpaceVm.LearningSpaceLayout.Capacity; i++)
                    {
                        var x = i;
                        var identifier = LearningSpaceP.LearningSpaceVm.Id.ToString() + x;

                        <MudDropZone T="ILearningElementViewModel" Identifier="@identifier"
                                     Class="@GetSlotStyleString(x)"
                                     style="@GetSlotPositionString(LearningSpaceP.LearningSpaceVm.LearningSpaceLayout.FloorPlanViewModel, x)"
                                     @onclick="() => AddNewLearningElement(x)">
                            <ItemRenderer>
                                <DragDropLearningElement
                                    LearningElement="@context"
                                    OnShowLearningElementContent="@LearningSpaceP.ShowElementContent"
                                    OnEditLearningElement="@LearningSpaceP.ClickedLearningElement"
                                    OnDeleteLearningElement="@LearningSpaceP.DeleteLearningElement"
                                    OnClicked="@LearningSpaceP.ClickedLearningElement"/>
                            </ItemRenderer>
                        </MudDropZone>
                    }

                </div>
            </div>
        </div>
    }
}
@if (LearningSpaceP.ReplaceLearningElementDialogOpen && _showingReplaceLearningElementDialog == false)
{
    @ShowReplaceLearningElementDialog()
}

@code {
#pragma warning disable CS8618 // injected by framework - n.stich
    [Inject]
    public ILearningSpacePresenter LearningSpaceP { get; set; }

    [Inject]
    IDialogService DialogService { get; set; }
#pragma warning restore CS8618

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    private Action TriggerMasterLayoutStateHasChanged { get; set; }
    
    [Inject]
    public ISelectedViewModelsProvider? SelectedViewModelsProvider { get; set; }

    //TODO: Instead of setting a value here we need some sort of central service that we can notify about the error to
    //then display it in the UI - n.stich
    internal ExceptionWrapper? ErrorState { get; private set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LearningSpaceP.OnCommandUndoRedoOrExecute += async (_, args) =>
        {
            await InvokeAsync(StateHasChanged);
            if (args.CommandName is "CreateLearningElement" or "LoadLearningElement" or 
                "PlaceLearningElementInLayoutFromUnplaced" or "ChangeLearningSpaceLayout" or 
                "PlaceLearningElementInLayoutFromLayout" or "CreateLearningSpace" or "RemoveLearningElementFromLayout")
            {
                await InvokeAsync(TriggerMasterLayoutStateHasChanged);
            }
        };
        LearningSpaceP.PropertyChanged += (sender, earg) =>
        {
            if (earg.PropertyName == nameof(LearningSpaceP.LearningSpaceVm)) InvokeAsync(TriggerMasterLayoutStateHasChanged);
        };
    }

    private bool _showingReplaceLearningElementDialog = false;


    private void DeleteSelectedLearningElement()
    {
        LearningSpaceP.DeleteSelectedLearningElement();
    }

    private async Task LoadLearningElementAsync()
    {
    //TODO: Remove parameterless method and use the one with the parameter - AW
        try
        {
            await LoadLearningElementAsync(0);
        }
        catch (Exception e)
        {
            ErrorState = new ExceptionWrapper("", e);
        }
    }

    private async Task LoadLearningElementAsync(int slotIndex)
    {
        try
        {
            await LearningSpaceP.LoadLearningElementAsync(slotIndex);
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning element", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning element
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SaveSelectedLearningElementAsync()
    {
        try
        {
            await LearningSpaceP.SaveSelectedLearningElementAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Save learning element", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning element
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ShowSelectedElementContentAsync()
    {
        try
        {
            await LearningSpaceP.ShowSelectedElementContentAsync();
        }
        catch (OperationCanceledException)
        {
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Show learning element content", exception);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void EditLearningElement(int slotIndex)
    {
        LearningSpaceP.EditLearningElement(slotIndex);
    }

    private void OnReplaceElementDialogClose(DialogResult closeResult)
    {
        LearningSpaceP.OnReplaceLearningElementDialogClose(closeResult);
        InvokeAsync(StateHasChanged);
    }

    private void SetLearningSpaceLayout(string floorPlanName)
    {
        Enum.TryParse(floorPlanName, out FloorPlanEnum floorPlan);
        LearningSpaceP.SetLearningSpaceLayout(floorPlan);
        InvokeAsync(StateHasChanged);
    }

    private Task RightClickedDropItem(MouseEventArgs mouseEventArgs, ILearningElementViewModel item)
    {
        LearningSpaceP.RightClickedLearningElement(item);
        return Task.CompletedTask;
    }

    private Task DeleteRightClickedLearningElement(ILearningElementViewModel item)
    {
        LearningSpaceP.DeleteLearningElement(item);
        return Task.CompletedTask;
    }

    private Task EditRightClickedLearningElement(ILearningElementViewModel item)
    {
        LearningSpaceP.ClickedLearningElement(item);
        return Task.CompletedTask;
    }

    private string GetCornerPointsString(IFloorPlanViewModel floorPlan)
    {
        var cornerPointsString = new StringBuilder();
        cornerPointsString.Append("clip-path: polygon(");
        foreach (var cornerPoint in floorPlan.CornerPoints)
        {
            cornerPointsString.Append($"{cornerPoint.X}% {cornerPoint.Y}%, ");
        }
        if (floorPlan.CornerPoints.Any())
        {
            cornerPointsString.Length -= 2;
        }
        else
        {
            cornerPointsString.Append("0% 0%");
        }
        cornerPointsString.Append(");");
        return cornerPointsString.ToString();
    }

    private string GetSlotPositionString(IFloorPlanViewModel floorPlanViewModel, int position)
    {
        var slotPosition = floorPlanViewModel.ElementSlotPositions[position];
        var slotPositionString = new StringBuilder();
        slotPositionString.Append("position: absolute; ");
        slotPositionString.Append($"top: {slotPosition.Y}%; ");
        slotPositionString.Append($"left: {slotPosition.X}%; ");
        slotPositionString.Append("transform: translate(-80%, -110%);");
        return slotPositionString.ToString();
    }
    
    private string GetSlotStyleString(int position)
    {
        if(LearningSpaceP.LearningSpaceVm == null) return "";
        
        var matchingElement = LearningSpaceP.LearningSpaceVm.LearningSpaceLayout.LearningElements
            .FirstOrDefault(id => id.Key == position);

        if(LearningSpaceP.ActiveSlot == position || 
           (!matchingElement.Equals(default(KeyValuePair<int, ILearningElementViewModel>)) && 
            matchingElement.Value.Equals(SelectedViewModelsProvider?.LearningElement)))

        {
            return "rounded-lg border-2 border-solid border-adlergreen bg-adlerdeactivatedtext mud-border-lines-default p-6 m-8 w-28 h-3 flex justify-center items-center";
        }
        return "rounded-lg border-2 border-solid border-adlerblue bg-adlerdeactivatedtext mud-border-lines-default p-6 m-8 w-28 h-3 flex justify-center items-center";
    }

    private void AddNewLearningElement(int i)
    {
        LearningSpaceP.AddNewLearningElement(i);
    }

    private async Task ShowReplaceLearningElementDialog()
    {
        _showingReplaceLearningElementDialog = true;
        var dialog = await DialogService.ShowAsync<ReplaceLearningElementDialog>("Replace Learning Element");
        var result = await dialog.Result;
        LearningSpaceP.OnReplaceLearningElementDialogClose(result);
        _showingReplaceLearningElementDialog = false;
    }

}