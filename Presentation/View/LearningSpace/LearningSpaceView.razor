@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.Components.Dialogues
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Shared.Command
@implements IDisposable

@if (LearningSpaceP.LearningSpaceVm != null)
{
    <div class="h-full flex flex-col rounded">
        <div class="bg-adlerbgbright m-1.5 2xl:m-2 rounded-b">
            <div>
                <header class="py-2 2xl:py-3 border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
                    <h2 class="cursor-default text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">@Localizer["LearningSpace.Title.Text"]</h2>
                </header>
            </div>

            @if (SelectedViewModelsProvider.LearningObjectInPathWay != null)
            {
                <div class="cursor-default flex flex-col items-start px-2 mb-1">
                    <div class="py-2 flex justify-start items-center space-x-2">
                        @* ReSharper disable Html.PathError *@
                        <img class="w-4 2xl:w-6 opacity-50" src="CustomIcons/Space/space-icon_bright.png" alt="learningspace">
                        @* ReSharper restore Html.PathError *@
                        <p class="text-sm 2xl:text-base text-adlertitledarkblue font-bold break-normal" title="@LearningSpaceP.LearningSpaceVm.Name">@LearningSpaceP.LearningSpaceVm.Name</p>
                    </div>

                    <section class="flex flex-row justify-between items-center w-full">
                        <div class="flex flex-col justify-start">
                            <p class="text-xs 2xl:text-base text-adlerblue-600 space-theme">
                                <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceTheme.Text"] </span> @(LearningSpaceP.LearningSpaceVm?.Theme is { } theme ? ThemeHelper.Localize(theme) : "")
                            </p>
                            <p class="text-xs 2xl:text-base text-adlerblue-600 space-workload">
                                <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceWorkload.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Workload<span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceWorkload.Text.Additional"]</span>
                            </p>
                        </div>
                        <div class="flex flex-col justify-start">
                            <div class="flex flex-row items-center gap-1">
                                <p class="text-xs 2xl:text-base text-adlergrey-600 space-goals">@Localizer["LearningSpace.SpaceGoals.Text"]</p>
                                <button title="@Localizer["LearningSpace.SpaceGoals.Overview"]" @onclick="@ToggleOpen">
                                    <img class="w-4 2xl:w-6 opacity-70" src="CustomIcons/learningoutcome-icon_circle.png" alt="learning-outcome-icon">
                                </button>

                                <MudPopover AnchorOrigin="Origin.BottomLeft" Fixed="true" Open="@_isOpen" Class="bg-white rounded drop-shadow-xl h-fit w-[550px] text-adlergrey-800 text-justify p-4">
                                    <div class="flex flex-col">
                                        <div class="flex flex-row justify-between items-center">
                                            <p class="pl-1 cursor-default text-lg text-adlertextgrey font-bold">@Localizer["LearningSpace.LearningOutcomesOverview.Title"]</p>
                                            <MudIconButton Class="w-8 h-8" OnClick="@ToggleOpen" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                                        </div>
                                        <p class="pl-1 pb-2 cursor-default">
                                            @Localizer["LearningSpace.LearningOutcomesOverview.Text.Part1"] <span class="font-bold text-adlertextgrey cursor-default">@LearningSpaceP.LearningSpaceVm?.Name</span>
                                        </p>

                                        <div class="h-[150px] overflow-y-scroll bg-adlerbgbright rounded border border-adlergrey-200 p-2">

                                            @if (LearningSpaceP.LearningSpaceVm?.LearningOutcomeCollection.LearningOutcomes.Count == 0)
                                            {
                                                <div class="flex justify-center items-center p-4">
                                                    <p class="cursor-default pl-1 text-base font-bold text-adlertextgrey opacity-80">@Localizer["LearningSpaceView.NoOutcome"]</p>
                                                </div>
                                            }

                                            @if (LearningSpaceP.LearningSpaceVm != null)
                                            {
                                                foreach (var outcome in LearningSpaceP.LearningSpaceVm.LearningOutcomeCollection.LearningOutcomes)
                                                {
                                                    <MudText>
                                                        <ul class="list-disc list-outside pl-2 mx-2 py-1">
                                                            <li class="marker:text-adlergrey break-words cursor-default text-xs 2xl:text-sm">
                                                                @outcome.GetOutcome()
                                                            </li>
                                                        </ul>
                                                    </MudText>
                                                }
                                            }
                                        </div>
                                    </div>
                                </MudPopover>
                            </div>
                            @ChildContent
                            
                            <p class="text-xs 2xl:text-base text-adlerblue-600 space-points">
                                <span class="text-adlergrey-600">@Localizer["LearningSpace.SpacePoints.Text"]</span> @LearningSpaceP.LearningSpaceVm?.RequiredPoints
                                <span class="text-adlergrey-600"> / </span> @LearningSpaceP.LearningSpaceVm?.Points
                                <span class="text-adlergrey-600">@Localizer["LearningSpace.SpacePoints.Text.Points.Suffix"]</span>
                            </p>
                        </div>
                    </section>
                </div>
            }
        </div>
        @if (LearningSpaceP.LearningSpaceVm != null)
        {
            <div class="bg-white grow shrink basis-10/12 rounded-t mx-1.5 2xl:mx-2 border-b-2">
                <LearningSpaceLayoutView LearningSpace="LearningSpaceP.LearningSpaceVm"/>
            </div>

        }
    </div>
}

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningSpacePresenter LearningSpaceP { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LearningSpaceView> Localizer { get; set; }

    private bool _isOpen;

    private void ToggleOpen()
    {
        _isOpen = !_isOpen;
    }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    private Action? TriggerMasterLayoutStateHasChanged { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LearningSpaceP.OnCommandUndoRedoOrExecute += OnCommandUndoRedoOrExecute;
        LearningSpaceP.PropertyChanged += PropertyChanged;
    }

    /// <summary>
    /// Updates this component when a command is executed, undone or redone which affects this component.
    /// </summary>
    private async void OnCommandUndoRedoOrExecute(object? sender, CommandUndoRedoOrExecuteArgs e)
    {
        await InvokeAsync(StateHasChanged);
        var commandName = e.CommandName;
        // if (commandName is "CreateLearningElement" or "LoadLearningElement" or
        //     "PlaceLearningElementInLayoutFromUnplaced" or "ChangeLearningSpaceLayout" or
        //     "PlaceLearningElementInLayoutFromLayout" or "CreateLearningSpace" or "RemoveLearningElementFromLayout")
        if (commandName.StartsWith("CreateLearningElement") ||
            commandName.StartsWith("LoadLearningElement") ||
            commandName.StartsWith("PlaceLearningElement") ||
            commandName.StartsWith("PlaceStoryElement") ||
            commandName.StartsWith("DeleteLearningElement") ||
            commandName.StartsWith("DeleteStoryElement"))
        {
            await InvokeAsync(TriggerMasterLayoutStateHasChanged!);
        }
    }

    private async void PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case nameof(LearningSpaceP.LearningSpaceVm):
                await InvokeAsync(TriggerMasterLayoutStateHasChanged!);
                break;
            case nameof(LearningSpaceP.ReplaceLearningElementDialogOpen)
                when LearningSpaceP.ReplaceLearningElementDialogOpen:
                await ShowReplaceLearningElementDialog();
                break;
            case nameof(LearningSpaceP.ReplaceStoryElementDialogOpen)
                when LearningSpaceP.ReplaceStoryElementDialogOpen:
                await ShowReplaceStoryElementDialog();
                break;
        }
    }

    private async Task ShowReplaceLearningElementDialog()
    {
        var dialog = await DialogService.ShowAsync<ReplaceLearningElementDialog>(@Localizer["ShowReplaceLearningElementDialog.Dialog.ReplaceLearningElement"]);
        var result = await dialog.Result;
        if(result == null) return;
        LearningSpaceP.OnReplaceLearningElementDialogClose(result);
    }

    private async Task ShowReplaceStoryElementDialog()
    {
        var dialog = await DialogService.ShowAsync<ReplaceLearningElementDialog>(@Localizer["ShowReplaceLearningElementDialog.Dialog.ReplaceLearningElement"]);
        var result = await dialog.Result;
        if(result == null) return;
        LearningSpaceP.OnReplaceStoryElementDialogClose(result);
    }

    public void Dispose()
    {
        LearningSpaceP.OnCommandUndoRedoOrExecute -= OnCommandUndoRedoOrExecute;
        LearningSpaceP.PropertyChanged -= PropertyChanged;
    }

    private string LearningOutcomeIcon => SelectedViewModelsProvider.LearningWorld == null ? LearningOutcomeIconDeactivated : LearningOutcomeIconActivated;

    const string LearningOutcomeIconActivated =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
            <svg id=""uuid-347490b4-1d53-493d-bc86-b0ca80e39b63"" data-name=""R-LearningOutcome"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
                <circle cx=""1004.73"" cy=""1004.77"" r=""892.6"" style=""fill: none; stroke: #2e3a4d; stroke-miterlimit: 10; stroke-width: 200px;""/>
                    <circle cx=""1007.35"" cy=""1003.55"" r=""526.15"" style=""fill: none; stroke: #2e3a4d; stroke-miterlimit: 10; stroke-width: 200px;""/>
                        <line x1=""991.71"" y1=""-15.05"" x2=""991.71"" y2=""801.04"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                            <line x1=""1225.61"" y1=""1013.66"" x2=""2043.43"" y2=""1013.66"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                <circle cx=""1000.71"" cy=""984.34"" r=""243.06"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                    <line x1=""1016.48"" y1=""986.81"" x2=""1714.73"" y2=""288.56"" style=""fill: none; stroke: #e9f2fa; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 172px;""/>
                                        <line x1=""1015.48"" y1=""986.81"" x2=""1713.73"" y2=""288.56"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 120px;""/>
                                            <g>
                                                <rect x=""1562.75"" y=""219.03"" width=""214.35"" height=""214.35"" transform=""translate(1257.75 1977.01) rotate(-87.03)"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                                    <polyline points=""1771.4 438.78 1782.49 224.72 1996.55 235.81"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                                        <polyline points=""1793.58 10.66 1782.49 224.72 1568.43 213.63"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                                            </g>
                                                                <line x1=""0"" y1=""1005.85"" x2=""817.09"" y2=""1005.85"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                    <line x1=""987.71"" y1=""1221.81"" x2=""987.71"" y2=""2029.06"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                        </svg>";

    const string LearningOutcomeIconDeactivated =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
            <svg id=""uuid-347490b4-1d53-493d-bc86-b0ca80e39b63"" data-name=""R-LearningOutcome"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
                <circle cx=""1004.73"" cy=""1004.77"" r=""892.6"" style=""fill: none; stroke: rgb(179,179,179); stroke-miterlimit: 10; stroke-width: 200px;""/>
                    <circle cx=""1007.35"" cy=""1003.55"" r=""526.15"" style=""fill: none; stroke: rgb(179,179,179); stroke-miterlimit: 10; stroke-width: 200px;""/>
                        <line x1=""991.71"" y1=""-15.05"" x2=""991.71"" y2=""801.04"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                            <line x1=""1225.61"" y1=""1013.66"" x2=""2043.43"" y2=""1013.66"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                <circle cx=""1000.71"" cy=""984.34"" r=""243.06"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                    <line x1=""1016.48"" y1=""986.81"" x2=""1714.73"" y2=""288.56"" style=""fill: none; stroke: #e9f2fa; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 172px;""/>
                                        <line x1=""1015.48"" y1=""986.81"" x2=""1713.73"" y2=""288.56"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 120px;""/>
                                            <g>
                                                <rect x=""1562.75"" y=""219.03"" width=""214.35"" height=""214.35"" transform=""translate(1257.75 1977.01) rotate(-87.03)"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                                    <polyline points=""1771.4 438.78 1782.49 224.72 1996.55 235.81"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                                        <polyline points=""1793.58 10.66 1782.49 224.72 1568.43 213.63"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                                            </g>
                                                                <line x1=""0"" y1=""1005.85"" x2=""817.09"" y2=""1005.85"" style=""fill: none; stroke:rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                    <line x1=""987.71"" y1=""1221.81"" x2=""987.71"" y2=""2029.06"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                        </svg>";

}