@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Shared.Command
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Dialogues
@implements IDisposable

@if (LearningSpaceP.LearningSpaceVm != null)
{
    <div class="mx-2 rounded-lg">
        <div class="flex justify-center p-2">
            <h2 class="text-xl text-center font-bold text-adlergrey-500 mx-2">@Localizer["LearningSpace.Title.Text"]</h2>
        </div>
    </div>
    <div class="p-2 flex justify-start space-x-2">
        <img class="w-8" src="CustomIcons/space-icon_nobg.png" alt="learningspace">
        <p class="text-lg text-adlerblue-600 truncate hover:text-clip">@LearningSpaceP.LearningSpaceVm.Name</p>
    </div>
    @if (SelectedViewModelsProvider.LearningObjectInPathWay != null)
    {
        <section class="p-2 gap-1 flex flex-col justify-start">
            <div class="gap-8 flex justify-between items-start">
                <label id="learning-element-info" class="font-medium text-lg flex flex-col justify-stretch">
                    <h3 class="text-base text-adlerblue-600 space-theme">
                        <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceTheme.Text"] </span>@(LearningSpaceP.LearningSpaceVm?.Theme is { } theme ? ThemeHelper.Localize(theme) : "")
                    </h3>
                    <h3 class="text-base text-adlerblue-600 flex-initial break-all space-goals">
                        <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceGoals.Text"] </span>@LearningSpaceP.LearningSpaceVm?.Goals
                    </h3>
                </label>
                <div class="min-w-max">
                    <h3 class="text-base text-adlerblue-600 space-workload">
                        <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceWorkload.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Workload<span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceWorkload.Text.Additional"]</span>
                    </h3>
                    <h3 class="text-base text-adlerblue-600 space-points">
                        <span class="text-adlergrey-600">@Localizer["LearningSpace.SpacePoints.Text"]</span> @LearningSpaceP.LearningSpaceVm?.RequiredPoints
                        <span class="text-adlergrey-600"> / </span> @LearningSpaceP.LearningSpaceVm?.Points
                        <span class="text-adlergrey-600">@Localizer["LearningSpace.SpacePoints.Text.Points.Suffix"]</span>
                    </h3>
                    @ChildContent
                </div>
            </div>
        </section>
    }
    @if (LearningSpaceP.LearningSpaceVm != null)
    {
        <LearningSpaceLayoutView LearningSpace="LearningSpaceP.LearningSpaceVm"/>
    }
}

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningSpacePresenter LearningSpaceP { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LearningSpaceView> Localizer { get; set; }


    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    private Action? TriggerMasterLayoutStateHasChanged { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LearningSpaceP.OnCommandUndoRedoOrExecute += OnCommandUndoRedoOrExecute;
        LearningSpaceP.PropertyChanged += PropertyChanged;
    }

    /// <summary>
    /// Updates this component when a command is executed, undone or redone which affects this component.
    /// </summary>
    private async void OnCommandUndoRedoOrExecute(object? sender, CommandUndoRedoOrExecuteArgs e)
    {
        await InvokeAsync(StateHasChanged);
        if (e.CommandName is "CreateLearningElement" or "LoadLearningElement" or 
            "PlaceLearningElementInLayoutFromUnplaced" or "ChangeLearningSpaceLayout" or 
            "PlaceLearningElementInLayoutFromLayout" or "CreateLearningSpace" or "RemoveLearningElementFromLayout")
        {
            await InvokeAsync(TriggerMasterLayoutStateHasChanged!);
        }
    }

    private async void PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case nameof(LearningSpaceP.LearningSpaceVm):
                await InvokeAsync(TriggerMasterLayoutStateHasChanged!);
                break;
            case nameof(LearningSpaceP.ReplaceLearningElementDialogOpen)
                when LearningSpaceP.ReplaceLearningElementDialogOpen:
                await ShowReplaceLearningElementDialog();
                break;
        }
    }

    private async Task ShowReplaceLearningElementDialog()
    {
        var dialog = await DialogService.ShowAsync<ReplaceLearningElementDialog>(@Localizer["ShowReplaceLearningElementDialog.Dialog.ReplaceLearningElement"]);
        var result = await dialog.Result;
        LearningSpaceP.OnReplaceLearningElementDialogClose(result);
    }

    public void Dispose()
    {
        LearningSpaceP.OnCommandUndoRedoOrExecute -= OnCommandUndoRedoOrExecute;
        LearningSpaceP.PropertyChanged -= PropertyChanged;
    }

}