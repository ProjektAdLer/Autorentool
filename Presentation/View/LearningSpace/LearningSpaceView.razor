@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningSpace.SpaceLayout.FloorPlans
@using Presentation.PresentationLogic.SelectedViewModels
@using Presentation.View.LearningElement
@using Shared
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@using System.Text
@using Presentation.PresentationLogic.LearningElement

@if (LearningSpaceP.LearningSpaceVm != null)
{
    <div class="mx-2 rounded-lg">
        <div class="flex justify-center p-2">
            <h2 class="text-xl text-center font-bold text-adlergrey-500 mx-2">@(!LearningSpaceP.LearningSpaceVm.AdvancedMode) ? @Localizer["LearningSpace.Title.Text"] : @Localizer["LearningSpace.AdvancedSpaceTitle.Text"]</h2>
        </div>
    </div> 


    <div class="p-2 flex justify-start space-x-2">
        <img class="w-8" src="CustomIcons/space-icon_nobg.png" alt="learningspace">
        <p class="text-lg text-adlerblue-600 truncate hover:text-clip">@LearningSpaceP.LearningSpaceVm.Name</p>
    </div>
    @if (!LearningSpaceP.LearningSpaceVm.AdvancedMode)
    {
        @if (SelectedViewModelsProvider.LearningObjectInPathWay != null)
        {
            <section class="p-2 gap-1 flex flex-col justify-start">
                <div class="gap-8 flex justify-between items-start">
                    <label id="learning-element-info" class="font-medium text-lg flex flex-col justify-stretch">
                        <h3 class="text-base text-adlerblue-600 space-theme">
                            <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceTheme.Text"] </span>@LearningSpaceP.LearningSpaceVm?.Theme
                        </h3>
                        @*<h3 class="text-base text-adlerblue-600"><span class="text-adlergrey-600">Selected learning element: </span> @SelectedViewModelsProvider.LearningElement.Name</h3>*@
                        <h3 class="text-base text-adlerblue-600 flex-initial break-all space-goals">
                            <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceGoals.Text"] </span>@LearningSpaceP.LearningSpaceVm?.Goals
                        </h3>
                    </label>
                    <div class="min-w-max">
                        <h3 class="text-base text-adlerblue-600 space-workload">
                            <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceWorkload.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Workload<span class="text-adlergrey-600"> min.</span>
                        </h3>
                        <h3 class="text-base text-adlerblue-600 space-points">
                            <span class="text-adlergrey-600">@Localizer["LearningSpace.SpacePoints.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Points
                        </h3>
                        @ChildContent
                    </div>
                </div>
                </section>
        }
        <div class="w-full min-h-[400px] bg-adlerbgbright border-2 border-b-adlerdeactivated">
            @*style="width: 90%; height: 400px; border: 2px solid;"*@
            <div class="layout-shadow w-full h-full">
                <div class="mt-15 mx-auto layout w-[98%] h-[375px] 2xl:h-[420px] 1080p:h-[645px] 2500p:h-[1000px] 3000p:h-[1150px] 3700p:h-[1675px]" style="@GetCornerPointsString(LearningSpaceP.LearningSpaceVm!.LearningSpaceLayout.FloorPlanViewModel)">

                    @for (var i = 0; i < LearningSpaceP.LearningSpaceVm.LearningSpaceLayout.Capacity; i++)
                    {
                        var x = i;
                        var identifier = LearningSpaceP.LearningSpaceVm.Id.ToString() + x;

                        <MudDropZone T="ILearningElementViewModel" Identifier="@identifier"
                                     Class="@GetSlotStyleString(x)"
                                     style="@GetSlotPositionString(LearningSpaceP.LearningSpaceVm.LearningSpaceLayout.FloorPlanViewModel, x)"
                                     @onclick="() => ClickOnSlot(x)">
                            <ItemRenderer>
                                <DragDropLearningElement
                                    LearningElement="@context"
                                    OnShowLearningElementContent="@LearningSpaceP.ShowElementContent"
                                    OnEditLearningElement="@LearningSpaceP.ClickedLearningElement"
                                    OnDeleteLearningElement="@LearningSpaceP.DeleteLearningElement"
                                    OnClicked="@LearningSpaceP.ClickedLearningElement"/>
                            </ItemRenderer>
                            <ChildContent>
                                @if (!LearningSpaceP.LearningSpaceVm.LearningSpaceLayout.LearningElements.ContainsKey(x))
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Add" Style="font-size: 2rem;" Class="text-white"></MudIcon>
                                }
                            </ChildContent>
                        </MudDropZone>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <AdvancedLearningSpaceEditorView/>
    }
}
@if (LearningSpaceP.ReplaceLearningElementDialogOpen && _showingReplaceLearningElementDialog == false)
{
    @ShowReplaceLearningElementDialog()
}

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningSpacePresenter LearningSpaceP { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LearningSpaceView> Localizer { get; set; }



    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    private Action? TriggerMasterLayoutStateHasChanged { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    //TODO: Instead of setting a value here we need some sort of central service that we can notify about the error to
    //then display it in the UI - n.stich
    internal ExceptionWrapper? ErrorState { get; private set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LearningSpaceP.OnCommandUndoRedoOrExecute += async (_, args) =>
        {
            await InvokeAsync(StateHasChanged);
            if (args.CommandName is "CreateLearningElement" or "LoadLearningElement" or 
                "PlaceLearningElementInLayoutFromUnplaced" or "ChangeLearningSpaceLayout" or 
                "PlaceLearningElementInLayoutFromLayout" or "CreateLearningSpace" or "RemoveLearningElementFromLayout")
            {
                await InvokeAsync(TriggerMasterLayoutStateHasChanged!);
            }
        };
        LearningSpaceP.PropertyChanged += (_, earg) =>
        {
            if (earg.PropertyName == nameof(LearningSpaceP.LearningSpaceVm)) InvokeAsync(TriggerMasterLayoutStateHasChanged!);
        };
    }

    private bool _showingReplaceLearningElementDialog = false;

    private async Task LoadLearningElementAsync(int slotIndex)
    {
        try
        {
            await LearningSpaceP.LoadLearningElementAsync(slotIndex);
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper(Localizer["Error.ExceptionWrapper.LoadLearningElement.Message"], exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning element
            await InvokeAsync(StateHasChanged);
        }
    }

    private void EditLearningElement(int slotIndex)
    {
        LearningSpaceP.EditLearningElement(slotIndex);
    }

    private void OnReplaceElementDialogClose(DialogResult closeResult)
    {
        LearningSpaceP.OnReplaceLearningElementDialogClose(closeResult);
        InvokeAsync(StateHasChanged);
    }

    private void SetLearningSpaceLayout(string floorPlanName)
    {
        Enum.TryParse(floorPlanName, out FloorPlanEnum floorPlan);
        LearningSpaceP.SetLearningSpaceLayout(floorPlan);
        InvokeAsync(StateHasChanged);
    }

    private string GetCornerPointsString(IFloorPlanViewModel floorPlan)
    {
        var cornerPointsString = new StringBuilder();
        cornerPointsString.Append("clip-path: polygon(");
        foreach (var cornerPoint in floorPlan.CornerPoints)
        {
            cornerPointsString.Append($"{cornerPoint.X}% {cornerPoint.Y}%, ");
        }
        if (floorPlan.CornerPoints.Any())
        {
            cornerPointsString.Length -= 2;
        }
        else
        {
            cornerPointsString.Append("0% 0%");
        }
        cornerPointsString.Append(");");
        return cornerPointsString.ToString();
    }

    private string GetSlotPositionString(IFloorPlanViewModel floorPlanViewModel, int position)
    {
        var slotPosition = floorPlanViewModel.ElementSlotPositions[position];
        var slotPositionString = new StringBuilder();
        slotPositionString.Append("position: absolute; ");
        slotPositionString.Append($"top: {slotPosition.Y}%; ");
        slotPositionString.Append($"left: {slotPosition.X}%; ");
        slotPositionString.Append("transform: translate(-80%, -110%);");
        return slotPositionString.ToString();
    }

    private string GetSlotStyleString(int position)
    {
        if (LearningSpaceP.LearningSpaceVm == null) return "";

        if (SelectedViewModelsProvider.ActiveSlotInSpace == position)
        {
            return "rounded-lg border-2 bg-adlergreen border-adlergreen bg-opacity-30 mud-border-lines-default text-white p-6 m-8 w-28 h-3 flex justify-center items-center";
        }
        return "rounded-lg border-2 border-adlerblue bg-adlerdeactivatedtext mud-border-lines-default p-6 m-8 w-28 h-3 flex justify-center items-center hover:bg-adlerblue-300";
    }

    private string GetSlotIconString(int position)
    {
        if (LearningSpaceP.LearningSpaceVm == null) return "";

        if (LearningSpaceP.LearningSpaceVm.LearningSpaceLayout.LearningElements.ContainsKey(position))
        {
            return "";
        }
        return "@Icons.Material.Filled.Add";
    }

    private void ClickOnSlot(int i)
    {
        LearningSpaceP.ClickOnSlot(i);
    }

    private async Task ShowReplaceLearningElementDialog()
    {
        _showingReplaceLearningElementDialog = true;
        var dialog = await DialogService.ShowAsync<ReplaceLearningElementDialog>(@Localizer["ShowReplaceLearningElementDialog.Dialog.ReplaceLearningElement"]);
        var result = await dialog.Result;
        LearningSpaceP.OnReplaceLearningElementDialogClose(result);
        _showingReplaceLearningElementDialog = false;
    }

}