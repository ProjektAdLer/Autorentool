@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Shared.Command
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Dialogues
@implements IDisposable

@if (LearningSpaceP.LearningSpaceVm != null)
{
    <div class="cursor-default mx-2 rounded-lg">
        <div class="flex justify-center p-2">
            <p class="text-base 2xl:text-xl text-center font-bold text-adlerdarkblue-800 mx-2">@Localizer["LearningSpace.Title.Text"]</p>
        </div>
    </div>

    @if (SelectedViewModelsProvider.LearningObjectInPathWay != null)
    {
        <div class="cursor-default flex flex-col 2xl:flex-row 2xl:justify-between 2xl:items-start">
            <div class="px-1 flex justify-start items-center space-x-2 2xl:max-w-[70%]">
                <img class="w-6 2xl:w-8 opacity-50" src="CustomIcons/Space/space-icon_bright.png" alt="learningspace">
                <p class="text-sm 2xl:text-lg opacity-80 text-adlerdarkblue-800 font-bold truncate 2xl:whitespace-normal 2xl:break-words" title="@LearningSpaceP.LearningSpaceVm.Name">@LearningSpaceP.LearningSpaceVm.Name</p>
            </div>
 
            <section class="p-1 flex justify-end items-center">
                <div class="flex flex-col justify-start">
                    <p class="text-sm 2xl:text-base text-adlerblue-600 space-theme">
                        <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceTheme.Text"] </span> @(LearningSpaceP.LearningSpaceVm?.Theme is { } theme ? ThemeHelper.Localize(theme) : "")
                    </p>
                    <p class="text-sm 2xl:text-base text-adlerblue-600 space-workload">
                        <span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceWorkload.Text"] </span> @LearningSpaceP.LearningSpaceVm?.Workload<span class="text-adlergrey-600">@Localizer["LearningSpace.SpaceWorkload.Text.Additional"]</span>
                    </p>
                    <p class="text-sm 2xl:text-base text-adlerblue-600 space-points">
                        <span class="text-adlergrey-600">@Localizer["LearningSpace.SpacePoints.Text"]</span> @LearningSpaceP.LearningSpaceVm?.RequiredPoints
                        <span class="text-adlergrey-600"> / </span> @LearningSpaceP.LearningSpaceVm?.Points
                        <span class="text-adlergrey-600">@Localizer["LearningSpace.SpacePoints.Text.Points.Suffix"]</span>
                    </p>
                    @ChildContent
                </div>
            </section>
        </div>
    }
    
    @if (LearningSpaceP.LearningSpaceVm != null)
    {
        <LearningSpaceLayoutView LearningSpace="LearningSpaceP.LearningSpaceVm"/>
    }
}

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningSpacePresenter LearningSpaceP { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LearningSpaceView> Localizer { get; set; }


    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    private Action? TriggerMasterLayoutStateHasChanged { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LearningSpaceP.OnCommandUndoRedoOrExecute += OnCommandUndoRedoOrExecute;
        LearningSpaceP.PropertyChanged += PropertyChanged;
    }

    /// <summary>
    /// Updates this component when a command is executed, undone or redone which affects this component.
    /// </summary>
    private async void OnCommandUndoRedoOrExecute(object? sender, CommandUndoRedoOrExecuteArgs e)
    {
        await InvokeAsync(StateHasChanged);
        var commandName = e.CommandName;
        // if (commandName is "CreateLearningElement" or "LoadLearningElement" or 
        //     "PlaceLearningElementInLayoutFromUnplaced" or "ChangeLearningSpaceLayout" or 
        //     "PlaceLearningElementInLayoutFromLayout" or "CreateLearningSpace" or "RemoveLearningElementFromLayout")
        if(commandName.StartsWith("CreateLearningElement") ||
           commandName.StartsWith("LoadLearningElement") ||
           commandName.StartsWith("PlaceLearningElement") ||
           commandName.StartsWith("PlaceStoryElement"))
        {
            await InvokeAsync(TriggerMasterLayoutStateHasChanged!);
        }
    }

    private async void PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName)
        {
            case nameof(LearningSpaceP.LearningSpaceVm):
                await InvokeAsync(TriggerMasterLayoutStateHasChanged!);
                break;
            case nameof(LearningSpaceP.ReplaceLearningElementDialogOpen)
                when LearningSpaceP.ReplaceLearningElementDialogOpen:
                await ShowReplaceLearningElementDialog();
                break;
            case nameof(LearningSpaceP.ReplaceStoryElementDialogOpen)
            when LearningSpaceP.ReplaceStoryElementDialogOpen:
                await ShowReplaceStoryElementDialog();
                break;
        }
    }

    private async Task ShowReplaceLearningElementDialog()
    {
        var dialog = await DialogService.ShowAsync<ReplaceLearningElementDialog>(@Localizer["ShowReplaceLearningElementDialog.Dialog.ReplaceLearningElement"]);
        var result = await dialog.Result;
        LearningSpaceP.OnReplaceLearningElementDialogClose(result);
    }

    private async Task ShowReplaceStoryElementDialog()
    {
        var dialog = await DialogService.ShowAsync<ReplaceLearningElementDialog>(@Localizer["ShowReplaceLearningElementDialog.Dialog.ReplaceLearningElement"]);
        var result = await dialog.Result;
        LearningSpaceP.OnReplaceStoryElementDialogClose(result);
    }

    public void Dispose()
    {
        LearningSpaceP.OnCommandUndoRedoOrExecute -= OnCommandUndoRedoOrExecute;
        LearningSpaceP.PropertyChanged -= PropertyChanged;
    }

}