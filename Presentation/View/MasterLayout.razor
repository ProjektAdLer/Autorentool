@page "/app"
@using Presentation.PresentationLogic.DropZone
@using Presentation.PresentationLogic.LearningElement
@using Presentation.View.Layout
@using Presentation.View.LearningSpace
@using Presentation.View.LearningWorld
@using Presentation.Components.Forms.World
@using Presentation.Components.Forms.Space
@using Presentation.Components.Forms.Element
@using Presentation.Components.ContentFiles
@using Presentation.Components.Dialogues
@using System.ComponentModel
@using BusinessLogic.Commands
@using Presentation.PresentationLogic.Mediator
@implements IDisposable

<div class="flex flex-col h-screen max-h-screen overflow-hidden w-screen bg-buttonbgblue font-sans">
    <HeaderBar/>
    <MudDropContainer T="ILearningElementViewModel"
                      Items="ElementDropZoneHelper.GetWorldAndSpaceElements()"
                      ItemsSelector="ElementDropZoneHelper.IsItemInDropZone"
                      ItemDropped="ElementDropZoneHelper.ItemUpdated"
                      class="flex-1 flex flex-row justify-between items-start">
        <ChildContent>
            <CascadingValue Value="@TriggerStateHasChanged" Name="TriggerMasterLayoutStateHasChanged">
                <SideContainer Side="Side.Left">
                    <Sidebar SidebarSide="Side.Left">
                        <SidebarItem
                            IsActive="Mediator.WorldDialogOpen"
                            RequestIsActiveToggle="Mediator.RequestToggleWorldDialog">
                            <SidebarContent>
                                <div class="w-12 p-1" title="Learning world metadata">
                                    <img class="w-full" src="CustomIcons/worldmenu-icon_metadata-nobg.png" alt="learningworld-metadata">
                                </div>
                            </SidebarContent>
                            <MainContent>
                                <WorldFormContainer/>
                            </MainContent>
                        </SidebarItem>
                        <SidebarItem
                            IsActive="Mediator.SpaceDialogOpen"
                            RequestIsActiveToggle="Mediator.RequestToggleSpaceDialog">
                            <SidebarContent>
                                <div class="w-12 p-1" title="Learning space metadata">
                                    <img class="w-full" src="CustomIcons/spacemenu-icon_metadata-nobg.png" alt="learningspace-metadata">
                                </div>
                            </SidebarContent>
                            <MainContent>
                                <SpaceFormContainer/>
                            </MainContent>
                        </SidebarItem>
                        <SidebarItem
                            IsActive="Mediator.ElementDialogOpen"
                            RequestIsActiveToggle="Mediator.RequestToggleElementDialog">
                            <SidebarContent>
                                <div class="w-12 p-1" title="Learning element metadata">
                                    <img class="w-full" src="CustomIcons/learningelements-icon_metadata.png" alt="learningelement-metadata">
                                </div>
                            </SidebarContent>
                            <MainContent>
                                <ElementFormContainer/>
                            </MainContent>
                        </SidebarItem>
                        <SidebarItem
                            IsActive="Mediator.ContentDialogOpen"
                            RequestIsActiveToggle="Mediator.RequestToggleContentDialog">
                            <SidebarContent>
                                <div class="w-12 p-1" title="Import files">
                                    <img class="w-full" src="CustomIcons/all-data-icon-nobg.png" alt="import-files">
                                </div>
                            </SidebarContent>
                            <MainContent>
                                <ContentFilesContainer/>
                            </MainContent>
                        </SidebarItem>
                    </Sidebar>
                </SideContainer>
                <CenterContainer>
                    <LearningSpaceView/>
                </CenterContainer>
                <SideContainer Side="Side.Right">
                    <Sidebar SidebarSide="Side.Right">
                        <SidebarItem
                            IsActive="Mediator.WorldViewOpen"
                            RequestIsActiveToggle="Mediator.RequestToggleWorldView">
                            <SidebarContent>
                                <div class="w-12 p-1" title="Learning pathways">
                                    <img class="w-full" src="CustomIcons/path-icon-nobg.png" alt="learning pathways">
                                </div>
                            </SidebarContent>
                            <MainContent>
                                <LearningWorldView/>
                            </MainContent>
                        </SidebarItem>
                        <SidebarItem
                            IsActive="Mediator.WorldOverviewOpen"
                            RequestIsActiveToggle="Mediator.RequestToggleWorldOverview">
                            <SidebarContent>
                                <div class="w-12 p-1" title="Overview">
                                    <img class="w-full" src="CustomIcons/overview-world-icon-nobg.png" alt="learning world overview">
                                </div>
                            </SidebarContent>
                            <MainContent>
                                <LearningWorldOverView/>
                            </MainContent>
                        </SidebarItem>
                    </Sidebar>
                </SideContainer>
            </CascadingValue>
        </ChildContent>
        <ItemRenderer>
            <MudListItem Text="@context.Name"/>
        </ItemRenderer>
    </MudDropContainer>
    <ErrorDialog/>
</div>

@code {

    [Inject]
    public IMediator Mediator { get; set; }

    [Inject]
    public ILearningElementDropZoneHelper ElementDropZoneHelper { get; set; }

    [Inject]
    public IOnUndoRedo OnUndoRedoEventSource { get; set; }


    protected override void OnInitialized()
    {
        Mediator.PropertyChanged += MediatorOnPropertyChanged;
        OnUndoRedoEventSource.OnRedo += OnUndoRedo;
        OnUndoRedoEventSource.OnUndo += OnUndoRedo;
    }

    private void MediatorOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        TriggerStateHasChanged();
    }

    private void OnUndoRedo(ICommand command)
    {
        TriggerStateHasChanged();
    }

    private void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Mediator.PropertyChanged -= MediatorOnPropertyChanged;
        OnUndoRedoEventSource.OnRedo -= OnUndoRedo;
        OnUndoRedoEventSource.OnUndo -= OnUndoRedo;
    }

}