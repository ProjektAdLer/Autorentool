@using System.Diagnostics.CodeAnalysis
@using MudBlazor.Utilities
@using Presentation.Components
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningContent.Story
@using Presentation.PresentationLogic.LearningElement
<div @onclick="@(_ => OnSelect.InvokeAsync(LearningElement))"
     class="@GetElementDivCss()">
    <div class="flex flex-row gap-2 items-center p-2 ml-14">
        <MudIcon Class="w-5 h-5 2xl:w-6 2xl:h-6 opacity-60" Icon="@GetElementIcon()"></MudIcon>
        <p class="break-all">@GetDisplayName(LearningElement)</p>
    </div>
</div>

@code {
    [Parameter, EditorRequired, AllowNull] public ILearningElementViewModel LearningElement { get; set; }
    [Parameter, EditorRequired] public EventCallback<ILearningElementViewModel> OnSelect { get; set; }
    [Parameter, EditorRequired] public bool IsSelected { get; set; }

    private int GetLearningElementPosition(ILearningElementViewModel le)
    {
        var kvP = le.Parent!.LearningSpaceLayout.LearningElements.FirstOrDefault(kv => kv.Value == le);
        return kvP.Key;
    }

    private string GetElementDivCss()
    {
        var isLearningElementSelected = IsSelected;
        return new CssBuilder("text-sm 2xl:text-base select-none")
            .AddClass("text-adlerblue-600", isLearningElementSelected)
            .AddClass("text-adlergrey-600", !isLearningElementSelected)
            .ToString();
    }

    private string GetDisplayName(ILearningElementViewModel le)
    {
        return le.LearningContent is IStoryContentViewModel
            ? le.Name
            : $"{GetLearningElementPosition(le) + 1} - {le.Name}";
    }
    
    private string GetElementIcon()
    {
        return LearningElement.LearningContent switch
        {
            ILinkContentViewModel => CustomIcons.VideoElementIcon,
            IFileContentViewModel { Type: "png" or "jpg" or "bmp" or "webp" or "jpeg" } => CustomIcons.ImageElementIcon,
            IFileContentViewModel
            {
                Type: "txt" or "c" or "h" or "cpp" or "cc" or "c++" or "py" or
                "js" or "php" or "html" or "css"
            } => CustomIcons.TextElementIcon,
            IFileContentViewModel { Type: "h5p" } => CustomIcons.H5PElementIcon,
            IFileContentViewModel { Type: "pdf" } => CustomIcons.TextElementIcon,
            IAdaptivityContentViewModel => CustomIcons.AdaptivityElementIcon,
            IStoryContentViewModel => CustomIcons.StoryElementIcon,
            _ => ""
        };
    }

}