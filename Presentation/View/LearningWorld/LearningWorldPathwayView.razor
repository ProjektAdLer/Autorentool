@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
@using Presentation.View.LearningPathWay
@using Direction = Shared.Direction
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@ChildContent

    <article class="flex flex-col justify-content w-[250px] 2xl:w-[250px] 3xl:w-[350px] 1080p:w-[350px] 2500p:w-[400px] 3000p:w-[600px] 3700p:w-[750px] h-full grow">
        <section class="bg-white rounded p-2 w-full grow">
            <div class="flex justify-start items-center space-x-2 py-1">
                <img src="CustomIcons/world-icon-nobg.png" class="opacity-50 w-7 h-7">
                <p class="text-base 2xl:text-xl font-bold text-adlerblue-600 truncate hover:text-clip"> @LearningWorldP.LearningWorldVm?.Name</p>
            </div>
            <p class="text-sm 2xl:text-base text-adlerblue-600">
                <span class="text-adlergrey-600">@Localizer["LearningWorldView.Workload.Text"] </span> @LearningWorldP.LearningWorldVm?.Workload<span class="text-adlergrey-600"> @Localizer["LearningWorldView.Workload.TimeScale"]</span>
            </p>
            <p class="text-sm 2xl:text-base text-adlerblue-600">
                <span class="text-adlergrey-600">@Localizer["LearningWorldView.Points.Text"] </span> @LearningWorldP.LearningWorldVm?.Points
            </p>
        </section>
        <section class="flex flex-row gap-2 justify-center">
            <div class="flex grow justify-around">
                <MudButton Class="relative btn-standard w-14 add-learning-space" @onclick="AddNewLearningSpace" title=@Localizer["LearningWorldView.NewLearningSpace.Title"] Disabled="LearningWorldP.LearningWorldVm == null">
                    <img src="CustomIcons/space-icon_nobg.png" class="absolute opacity-50 w-8 h-8">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="absolute"></MudIcon>
                </MudButton>
                <MudButton Class="relative btn-standard w-14 load-learning-space" title=@Localizer["LearningWorldView.ImportLearningSpace.Title"] @onclick="LoadLearningSpaceAsync" Disabled="LearningWorldP.LearningWorldVm == null">
                    <img src="CustomIcons/space-icon_nobg.png" class="absolute opacity-50 w-8 h-8">
                    <MudIcon Icon="@Icons.Material.Filled.SaveAlt" Class="absolute"></MudIcon>
                </MudButton>
                <MudButton Class="relative btn-standard w-14 add-condition" title=@Localizer["LearningWorldView.NewCondition.Title"] @onclick="AddNewPathWayCondition" Disabled="LearningWorldP.LearningWorldVm == null">
                    <img src="CustomIcons/new-condition-icon-nobg.png" class="absolute opacity-50 w-8 h-8">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="absolute"></MudIcon>
                </MudButton>
            </div>
        </section>
        <div class="bg-white rounded w-full h-full grow overflow-scroll">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-[1000px] 2xl:h-[1000px] 3xl:h-[1000px] 1080p:h-[1000px] 2500p:h-[1400px] 3000p:h-[1700px] 3700p:h-[2000px] w-[900px] 2xl:w-[900px] 1080p:w-[900px] 2500p:w-[900px] 3000p:w-[900px] 3700p:w-[900px]"
                 @onmousemove=@(e => MouseService.FireMove(this, e))
onmouseup=@(e => MouseService.FireUp(this, e))
onmouseleave=@(e => MouseService.FireOut(this, e))>

                @if (LearningWorldP.LearningWorldVm != null)
                {
                    @foreach (var pathWayCondition in LearningWorldP.LearningWorldVm.PathWayConditions)
                    {
                        <DraggablePathWayCondition ObjectInPathWay="pathWayCondition"
                                                   OnClickedDraggable="@LearningWorldP.ClickOnObjectInWorld"
                                                   OnDraggedDraggable="@LearningWorldP.DragObjectInPathWay"
                                                   OnClickedDeletePath="@LearningWorldP.DeleteLearningPathWay"
                                                   OnClickedDeleteObject="@LearningWorldP.DeleteLearningObject"
                                                   OnRightClickedDraggable="@LearningWorldP.RightClickOnObjectInPathWay"
                                                   OnDeletePathWayCondition="@LearningWorldP.DeletePathWayCondition"
                                                   OnCloseRightClickMenu="@LearningWorldP.HideRightClickMenu"
                                                   PositioningService="@LearningWorldP"
                                                   ShowingRightClickMenu="pathWayCondition == LearningWorldP.RightClickedLearningObject">
                            <ConditionToggleSwitch ObjectInPathWay="pathWayCondition"
                                                   OnSwitchPathWayCondition="@LearningWorldP.SwitchPathWayCondition"/>
                        </DraggablePathWayCondition>
                    }

                    @foreach (var learningSpace in LearningWorldP.LearningWorldVm.LearningSpaces)
                    {
                        <DraggableLearningSpace ObjectInPathWay="@learningSpace"
                                                OnClickedDraggable="@LearningWorldP.SetSelectedLearningSpace"
                                                OnDraggedDraggable="@LearningWorldP.DragObjectInPathWay"
                                                OnClickedDeletePath="@LearningWorldP.DeleteLearningPathWay"
                                                OnClickedDeleteObject="@LearningWorldP.DeleteLearningObject"
                                                OnDoubleClickedDraggable="@LearningWorldP.DoubleClickOnObjectInPathway"
                                                OnRightClickedDraggable="@LearningWorldP.RightClickOnObjectInPathWay"
                                                OnOpenLearningSpace="@LearningWorldP.SetSelectedLearningSpace"
                                                OnEditLearningSpace="@LearningWorldP.SetSelectedLearningSpace"
                                                OnDeleteLearningSpace="@LearningWorldP.DeleteLearningSpace"
                                                OnCloseRightClickMenu="@LearningWorldP.HideRightClickMenu"
                                                PositioningService="@LearningWorldP"
                                                ShowingRightClickMenu="learningSpace == LearningWorldP.RightClickedLearningObject"/>
                    }

                    @foreach (var learningPathWay in LearningWorldP.LearningWorldVm.LearningPathWays)
                    {
                        <PathWay X1=@(learningPathWay.SourceObject.OutputConnectionX) Y1=@(learningPathWay.SourceObject.OutputConnectionY + 6)
                                 Direction1=Direction.Right X2=@(learningPathWay.TargetObject.InputConnectionX)
                                 Y2=@(learningPathWay.TargetObject.InputConnectionY) Direction2=Direction.Left
                                 LearningPathWay="learningPathWay" OnClickedClickable="@LearningWorldP.ClickOnObjectInWorld"
                                 PositioningService="LearningWorldP"/>
                    }
                }
                <!-- The RightClickMenu might lies behind other spaces. 
                This line brings the RightClickMenu back to top, but the clickable buttons do not work anymore. -->
                <!--<use xlink:href="#rightClickMenu" />-->
            </svg>
        </div>
    </article>


@code {
    //Pathway view of the learning world
    //formerly known as "LearningWorldView"

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMouseService MouseService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter LearningWorldP { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<LearningWorldPathwayView> Localizer { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LearningWorldP.PropertyChanging += OnLearningWorldPresenterPropertyChanging;
        LearningWorldP.PropertyChanged += OnLearningWorldPresenterPropertyChanged;
        LearningWorldP.OnCommandUndoRedoOrExecute += async (_, _) => await InvokeAsync(StateHasChanged);
        SelectedViewModelsProvider.PropertyChanged += OnSelectedViewModelsProviderPropertyChanged;
    }

    private void AddNewLearningSpace()
    {
        LearningWorldP.AddNewLearningSpace();
    }

    private void AddNewPathWayCondition()
    {
        LearningWorldP.CreatePathWayCondition();
    }

    private async Task LoadLearningSpaceAsync()
    {
        await LearningWorldP.LoadLearningSpaceAsync();
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning space
        await InvokeAsync(StateHasChanged);
    }

    private void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnLearningWorldViewModelPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged += OnLearningWorldViewModelPropertyChanged;
        }
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanging(object? sender, PropertyChangingEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged -= OnLearningWorldViewModelPropertyChanged;
        }
        TriggerStateHasChanged();
    }

    private void OnSelectedViewModelsProviderPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        TriggerStateHasChanged();
    }

}