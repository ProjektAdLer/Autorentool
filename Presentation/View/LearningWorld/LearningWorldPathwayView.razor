@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
@using Presentation.View.LearningPathWay
@using Direction = Shared.Direction
@ChildContent

<article class="flex flex-col justify-content w-[250px] 2xl:w-[250px] 3xl:w-[350px] 1080p:w-[350px] 2500p:w-[400px] 3000p:w-[500px] 3700p:w-[550px] grow">
    <section class="bg-adlerbgbright rounded-b w-full cursor-default">
        <header class="py-2 2xl:py-3 border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
            <h2 class="text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">@Localizer["LearningWorldView.Title"]</h2>
        </header>
        <div class="px-2 mb-1">
            <div class="flex justify-start items-center space-x-2 py-2">
                @* ReSharper disable Html.PathError *@
                <img src="CustomIcons/World/world-icon.png" class="opacity-50 w-4 2xl:w-6" alt="Lernwelt-Icon">
                @* ReSharper restore Html.PathError *@
                <p class="text-sm 2xl:text-base font-bold text-adlertitledarkblue truncate" title="@LearningWorldP.LearningWorldVm?.Name"> @LearningWorldP.LearningWorldVm?.Name</p>
            </div>
            <p class="text-xs 2xl:text-base text-adlerblue-600">
                <span class="text-adlergrey-600">@Localizer["LearningWorldView.Workload.Text"] </span> @LearningWorldP.LearningWorldVm?.Workload<span class="text-adlergrey-600"> @Localizer["LearningWorldView.Workload.TimeScale"]</span>
            </p>
            <p class="text-xs 2xl:text-base text-adlerblue-600">
                <span class="text-adlergrey-600">@Localizer["LearningWorldView.Condition.Text"] </span> @LearningWorldP.LearningWorldVm?.NumberOfRequiredElements
                <span class="text-adlergrey-600"> / </span>@LearningWorldP.LearningWorldVm?.NumberOfElements
                <span class="text-adlergrey-600"> @Localizer["LearningWorldView.Condition.Elements"] </span>
            </p>
        </div>
    </section>
    <section class="flex flex-row justify-around py-2">
        <div class="btn-standard w-40 2xl:w-44 flex justify-center items-center create-space-button"
             @onclick="AddNewLearningSpace"
             title=@Localizer["LearningWorldView.NewLearningSpace.Title"]>
            <button class="2xl:gap-0.5">
                <MudIcon Icon="@Icons.Material.Filled.Add" Title=@Localizer["LearningWorldView.NewLearningSpace.Title"] Size="Size.Small" Class="z-20 add-learning-space"></MudIcon>
                <p class="text-xs z-10 uppercase">@Localizer["LearningWorldView.NewLearningSpace.Title"]</p>
            </button>
            @* ReSharper disable Html.PathError *@
            <img src="CustomIcons/Space/space-icon_bright.png" class="z-0 pointer-events-none opacity-20 absolute w-8 h-8">
            @* ReSharper restore Html.PathError *@
        </div>

        <div class="btn-standard w-40 2xl:w-44 flex justify-center items-center create-condition-button"
             @onclick="AddNewPathWayCondition"
             title=@Localizer["LearningWorldView.NewCondition.Title"]>
            <button class="gap-0 2xl:gap-0.5">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="z-10 add-condition" Size="Size.Small"></MudIcon>
                <p class="text-xs z-10 uppercase">@Localizer["LearningWorldView.NewCondition.Title"]</p>
            </button>
            @* ReSharper disable Html.PathError *@
            <img src="CustomIcons/condition-icon.png" class="z-0 pointer-events-none opacity-20 absolute w-8 h-8">
            @* ReSharper restore Html.PathError *@
        </div>
    </section>

    <div class="bg-white rounded w-full h-full grow overflow-scroll">
        <svg xmlns="http://www.w3.org/2000/svg" class="w-[900px] h-[2000px]"
             @onmousemove=@(e => MouseService.FireMove(this, eonmouseup=@(e => MouseService.FireUp(this, eonmouseleave=@(e => MouseService.FireOut(this, e))>

            @if (LearningWorldP.LearningWorldVm != null)
            {
                @foreach (var pathWayCondition in LearningWorldP.LearningWorldVm.PathWayConditions)
                {
                    <DraggablePathWayCondition ObjectInPathWay="pathWayCondition"
                                               OnClickedDraggable="@LearningWorldP.ClickOnObjectInWorld"
                                               OnDraggedDraggable="@LearningWorldP.DragObjectInPathWay"
                                               OnClickedDeletePath="@LearningWorldP.DeleteLearningPathWay"
                                               OnDeleteObject="@LearningWorldP.DeleteLearningObject"
                                               OnDeletePathWayCondition="@LearningWorldP.DeletePathWayCondition"
                                               PositioningService="@LearningWorldP">
                        <ConditionToggleSwitch ObjectInPathWay="pathWayCondition"
                                               OnSwitchPathWayCondition="@LearningWorldP.SwitchPathWayCondition"/>
                    </DraggablePathWayCondition>
                }

                @foreach (var learningSpace in LearningWorldP.LearningWorldVm.LearningSpaces)
                {
                    <DraggableLearningSpace ObjectInPathWay="@learningSpace"
                                            OnClickedDraggable="@LearningWorldP.SetSelectedLearningSpace"
                                            OnDraggedDraggable="@LearningWorldP.DragObjectInPathWay"
                                            OnClickedDeletePath="@LearningWorldP.DeleteLearningPathWay"
                                            OnDeleteObject="@LearningWorldP.DeleteLearningObject"
                                            OnDoubleClickedDraggable="@LearningWorldP.DoubleClickOnObjectInPathway"
                                            OnDeleteLearningSpace="@LearningWorldP.DeleteLearningSpace"
                                            PositioningService="@LearningWorldP"/>
                }

                @foreach (var learningPathWay in LearningWorldP.LearningWorldVm.LearningPathWays)
                {
                    <PathWay X1=@(learningPathWay.SourceObject.OutputConnectionX) Y1=@(learningPathWay.SourceObject.OutputConnectionY + 6)
                             Direction1=Direction.Right X2=@(learningPathWay.TargetObject.InputConnectionX)
                             Y2=@(learningPathWay.TargetObject.InputConnectionY) Direction2=Direction.Left
                             LearningPathWay="learningPathWay" OnClickedClickable="@LearningWorldP.ClickOnObjectInWorld"
                             PositioningService="LearningWorldP"/>
                }
            }
        </svg>
    </div>
</article>


@code {
    //Pathway view of the learning world
    //formerly known as "LearningWorldView"

    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMouseService MouseService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter LearningWorldP { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<LearningWorldPathwayView> Localizer { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LearningWorldP.PropertyChanging += OnLearningWorldPresenterPropertyChanging;
        LearningWorldP.PropertyChanged += OnLearningWorldPresenterPropertyChanged;
        LearningWorldP.OnCommandUndoRedoOrExecute += async (_, _) => await InvokeAsync(StateHasChanged);
        SelectedViewModelsProvider.PropertyChanged += OnSelectedViewModelsProviderPropertyChanged;
    }

    private void AddNewLearningSpace()
    {
        LearningWorldP.AddNewLearningSpace();
    }

    private void AddNewPathWayCondition()
    {
        LearningWorldP.CreatePathWayCondition();
    }

    private void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnLearningWorldViewModelPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged += OnLearningWorldViewModelPropertyChanged;
        }

        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanging(object? sender, PropertyChangingEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged -= OnLearningWorldViewModelPropertyChanged;
        }

        TriggerStateHasChanged();
    }

    private void OnSelectedViewModelsProviderPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        TriggerStateHasChanged();
    }

}