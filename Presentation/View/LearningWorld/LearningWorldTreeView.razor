@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using MudBlazor.Utilities
@using Presentation.Components
@using Presentation.Components.Forms
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared.Command
@using Shared.Extensions
@implements IDisposable
@if (LearningWorldP.LearningWorldVm != null)
{
    <div class="flex flex-col max-h-[128rem] grow">
        <div class="flex flex-col bg-adlerbgbright rounded-b mb-1.5 2xl:mb-2">
            <header class="py-2 2xl:py-3 border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
                <h2 class="text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">Lernwelt-Ãœbersicht</h2>
            </header>
            <article class="flex flex-col justify-content cursor-default mb-1 py-2">
                <div class="bg-adlerbgbright rounded-b px-2 w-full overflow-hidden truncate">
                    <div class="flex justify-start items-center space-x-2 py-2">
                        @* ReSharper disable Html.PathError *@
                        <img src="CustomIcons/World/world-icon.png" alt="world" class="opacity-50 w-4 2xl:w-6">
                        @* ReSharper restore Html.PathError *@
                        <p class="text-sm 2xl:text-base font-bold text-adlertitleblue truncate" title="@LearningWorldP.LearningWorldVm?.Name"> @LearningWorldP.LearningWorldVm?.Name</p>
                    </div>
                    <p class="text-xs 2xl:text-base text-adlerblue-600">
                        <span class="text-adlergrey-600">@Localizer["OverView.Workload"] </span> @LearningWorldP.LearningWorldVm?.Workload<span class="text-adlergrey-600"> @Localizer["OverView.Workload.TimeScale"]</span>
                    </p>
                    <p class="text-xs 2xl:text-base text-adlerblue-600">
                        <span class="text-adlergrey-600">@Localizer["OverView.Points"] </span> @LearningWorldP.LearningWorldVm?.Points<span class="text-adlergrey-600"> @Localizer["LearningWorldTreeView.Points.Summary"]</span>
                    </p>
                </div>
            </article>
        </div>
        
        <section class="bg-white rounded w-full overflow-scroll grow">
            <div class="cursor-pointer flex flex-col justify-start">
                @if (LearningWorldP.LearningWorldVm?.LearningSpaces != null)
                {
                    foreach (var learningSpace in GetLearningSpacesInOrder(LearningWorldP.LearningWorldVm.LearningSpaces))
                    {
                        <Collapsable VerticalMargin="my-1" @ref="Collapsables[learningSpace]"
                                     InitiallyCollapsed="!IsLearningSpaceSelected(learningSpace)">
                            <TitleContentAfterToggler>
                                <span @onclick="@(_ => SelectLearningSpace(learningSpace))" class="@GetSpaceDivCss(learningSpace)">
                                    <div class="flex flex-row gap-2 items-center">
                                        <MudIcon Class="w-6 h-6 2xl:w-8 2xl:h-8" Icon="@SpaceIcon"></MudIcon>
                                        <p class="break-all">@learningSpace.Name</p>
                                    </div>
                                </span>
                            </TitleContentAfterToggler>
                            <ChildContent>
                                <div>
                                    @if (learningSpace.LearningSpaceLayout.StoryElements.TryGetValue(0, out var entranceElement))
                                    {
                                        <LearningWorldTreeViewItem @key="entranceElement" LearningElement="@entranceElement"
                                                                   IsSelected="@IsLearningElementSelected(entranceElement)"
                                                                   OnSelect="@(ele => OnLearningElementClicked(ele))"/>
                                    }
                                    @foreach (var key in learningSpace.LearningSpaceLayout.LearningElements.Keys.OrderBy(key => key))
                                    {
                                        var learningElement = learningSpace.LearningSpaceLayout.LearningElements[key];
                                        <LearningWorldTreeViewItem @key="learningElement" LearningElement="@learningElement"
                                                                   IsSelected="@IsLearningElementSelected(learningElement)"
                                                                   OnSelect="@(ele => OnLearningElementClicked(ele))"/>
                                    }
                                    @if (learningSpace.LearningSpaceLayout.StoryElements.TryGetValue(1, out var exitElement))
                                    {
                                        <LearningWorldTreeViewItem @key="exitElement" LearningElement="@exitElement"
                                                                   IsSelected="@IsLearningElementSelected(exitElement)"
                                                                   OnSelect="@(ele => OnLearningElementClicked(ele))"/>
                                    }

                                </div>
                            </ChildContent>
                            <TogglerContent>
                                @if (context)
                                {
                                    <MudIcon Class="text-adlertitleblue" Icon="@Icons.Material.Filled.ArrowRight"/>
                                }
                                else
                                {
                                    <MudIcon Class="text-adlertitleblue" Icon="@Icons.Material.Filled.ArrowDropDown"/>
                                }
                            </TogglerContent>
                        </Collapsable>
                    }
                }
            </div>
        </section>
    </div>
}

@code{
}

@code {
    //Hierarchical view of the learning world
    //Formerly known as LearningWorldOverView

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningWorldPresenterOverviewInterface LearningWorldP { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LearningWorldTreeView> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] public IMediator Mediator { get; set; }

    private static string SpaceIcon { get; set; } = CustomIcons.SpaceIcon;
    private Color Color { get; set; } = Color.Info;
    private Dictionary<ILearningSpaceViewModel, Collapsable> Collapsables { get; set; } = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SelectedViewModelsProvider.PropertyChanged += OnSelectedViewModelsProviderPropertyChanged;
        LearningWorldP.OnCommandUndoRedoOrExecute += OnCommandUndoRedoOrExecute;
    }

    public void Dispose()
    {
        SelectedViewModelsProvider.PropertyChanged -= OnSelectedViewModelsProviderPropertyChanged;
        LearningWorldP.OnCommandUndoRedoOrExecute -= OnCommandUndoRedoOrExecute;
    }

    private async Task InvokeStateHasChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void OnCommandUndoRedoOrExecute(object? sender, CommandUndoRedoOrExecuteArgs e)
    {
        await InvokeStateHasChanged();
    }

    private string GetSpaceDivCss(ILearningSpaceViewModel space)
    {
        var isLearningSpaceSelected = IsLearningSpaceSelected(space);
        return new CssBuilder("text-sm 2xl:text-base select-none")
            .AddClass("text-adlerblue-600", isLearningSpaceSelected)
            .AddClass("text-adlergrey-600", !isLearningSpaceSelected)
            .ToString();
    }


    /// <summary>
    /// Determines the order of learning spaces based on the provided paths and returns them as a list.
    ///
    /// This algorithm uses a Breadth-First Search (BFS) approach to ensure that spaces residing on the same "level"
    /// are consecutive in the resulting list. Spaces without outgoing or incoming paths are appended at the end of the list.
    ///
    /// Spaces from the same path are ordered alphabetically.
    ///
    /// Note: This algorithm is also utilized in the "CreateATF" class. Changes made here should be reflected there as well.
    /// </summary>
    /// <param name="objectInPathWayViewModels">The collection of path object view models used to determine the order.</param>
    /// <returns>A sorted list of learning space view models based on the provided paths.</returns>
    private List<ILearningSpaceViewModel> GetLearningSpacesInOrder(IEnumerable<IObjectInPathWayViewModel> objectInPathWayViewModels)
    {
        var objectInPathWayList = objectInPathWayViewModels.ToList();
        var startObjects = objectInPathWayList
            .OfType<ILearningSpaceViewModel>()
            .Where(x =>
                x.InBoundObjects.Count == 0 &&
                x.OutBoundObjects.Count > 0)
            .OrderBy(space => space.Name)
            .ToList();

        var visited = new HashSet<IObjectInPathWayViewModel>();
        var pathOrder = new List<ILearningSpaceViewModel>();
        var queue = new Queue<IObjectInPathWayViewModel>(startObjects);

        while (queue.Count > 0)
        {
            var current = queue.Dequeue();

            if (!visited.Add(current))
                continue;

            if (current is ILearningSpaceViewModel learningSpace)
            {
                pathOrder.Add(learningSpace);
            }

            // We must visit all objects in pathway, even if they are not learning spaces, but we order learning spaces
            // by name into the queue
            queue.EnqueueRange(current.OutBoundObjects
                .OrderBy(o => o is LearningSpaceViewModel lsvm ? lsvm.Name : string.Empty)
                .Except(visited)
            );
        }

        var spacesWithOutPaths = objectInPathWayList
            .OfType<ILearningSpaceViewModel>()
            .Where(x => x.InBoundObjects.Count == 0 && x.OutBoundObjects.Count == 0)
            .ToList();

        pathOrder.AddRange(spacesWithOutPaths);
        return pathOrder;
    }


    private void OnLearningElementClicked(ILearningElementViewModel element)
    {
        LearningWorldP.SetSelectedLearningElement(element);
    }

    private void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnSelectedViewModelsProviderPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        TriggerStateHasChanged();
        if (args.PropertyName switch
            {
                nameof(SelectedViewModelsProvider.LearningElement) => SelectedViewModelsProvider.LearningElement?.Parent,
                nameof(SelectedViewModelsProvider.LearningObjectInPathWay) => SelectedViewModelsProvider.LearningObjectInPathWay,
                _ => null
            } is ILearningSpaceViewModel space)
        {
            UncollapseSpace(space);
        }
    }

    private bool IsLearningElementSelected(ILearningElementViewModel learningElement)
    {
        return SelectedViewModelsProvider.LearningElement == learningElement;
    }

    private bool IsLearningSpaceSelected(ILearningSpaceViewModel learningSpace)
    {
        return SelectedViewModelsProvider.LearningObjectInPathWay == learningSpace;
    }

    private Task SelectLearningSpace(ILearningSpaceViewModel learningSpace)
    {
        Mediator.RequestOpenSpaceDialog();
        if (SelectedViewModelsProvider.LearningElement != null)
            SelectedViewModelsProvider.SetLearningElement(null, null);
        SelectedViewModelsProvider.SetLearningObjectInPathWay(learningSpace, null);
        return Task.CompletedTask;
    }

    private void UncollapseSpace(ILearningSpaceViewModel learningSpace)
    {
        Collapsables[learningSpace].Uncollapse();
    }

}