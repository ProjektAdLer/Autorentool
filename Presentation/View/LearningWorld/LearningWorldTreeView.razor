@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Microsoft.Extensions.Localization
@using Presentation.Components
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningSpace
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@if (LearningWorldP.LearningWorldVm != null)
{
    <div class="flex flex-col h-full grow">
        <article class="flex flex-col justify-content mb-2">
            <section class="bg-white rounded p-2 w-full grow">
                <div class="flex justify-start items-center space-x-2 py-1">
                    <img src="CustomIcons/world-icon-nobg.png" alt="world" class="opacity-50 w-7 h-7">
                    <p class="text-base 2xl:text-xl font-bold text-adlerblue-600 truncate hover:text-clip"> @LearningWorldP.LearningWorldVm?.Name</p>
                </div>
                <p class="text-sm 2xl:text-base text-adlerblue-600">
                    <span class="text-adlergrey-600">@Localizer["OverView.Workload"] </span> @LearningWorldP.LearningWorldVm?.Workload<span class="text-adlergrey-600"> @Localizer["OverView.Workload.TimeScale"]</span>
                </p>
                <p class="text-sm 2xl:text-base text-adlerblue-600">
                    <span class="text-adlergrey-600">@Localizer["OverView.Points"] </span> @LearningWorldP.LearningWorldVm?.Points
                </p>
            </section>
        </article>
        <section class="bg-white rounded w-full overflow-scroll grow pt-2">
            <div class="cursor-pointer flex flex-col justify-start">
                @if (LearningWorldP.LearningWorldVm?.LearningSpaces != null)
                {
                    foreach (var learningSpace in LearningWorldP.LearningWorldVm.LearningSpaces)
                    {
                        <div>
                            <div class="flex flex-row items-center">
                                <span @onclick="() => ToggleLearningSpace(learningSpace)">
                                    @if (IsLearningSpaceExpanded(learningSpace))
                                    {
                                        <MudIconButton Class="p-2" Size="Size.Small" OnClick="() => ToggleLearningSpace(learningSpace)" Icon="@Icons.Material.Filled.KeyboardArrowDown"></MudIconButton>
                                    }
                                    else
                                    {
                                        <MudIconButton Class="p-2" Size="Size.Small" OnClick="() => ToggleLearningSpace(learningSpace)" Icon="@Icons.Material.Filled.KeyboardArrowRight"></MudIconButton>
                                    }
                                </span>
                                <span @onclick="@(e => SelectLearningSpace(learningSpace))" class="@(IsLearningSpaceSelected(learningSpace) ? "text-sm 2xl:text-base text-adlerblue-600 select-none" : "text-sm 2xl:text-base select-none text-adlergrey-600")">
                                    <div class="flex flex-row gap-2 items-center">
                                        <MudIcon Class="w-6 h-6 2xl:w-8 2xl:h-8" Icon="@SpaceIcon"></MudIcon>
                                        <p class="break-words">@learningSpace.Name</p>
                                    </div>
                                </span>
                            </div>
                            @if (IsLearningSpaceExpanded(learningSpace))
                            {
                                <div>
                                    @foreach (var learningElement in learningSpace.ContainedLearningElements)
                                    {
                                        <p @onclick="@(e => SelectLearningElement(learningElement))"
                                           class="@(IsLearningElementSelected(learningElement) ? "text-sm 2xl:text-base text-adlerblue-600 select-none" : "text-sm 2xl:text-base select-none text-adlergrey-600")">
                                            <div class="flex flex-row gap-2 items-center p-2 ml-14">
                                                <MudIcon Class="w-5 h-5 2xl:w-6 2xl:h-6 opacity-60" Icon="@GetElementIcon(learningElement)"></MudIcon>
                                                <p class="break-words">@learningElement.Name</p>
                                            </div>
                                        </p>
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </section>
    </div>
}

@code{
}

@code {
    //Hierarchical view of the learning world
    //Formerly known as LearningWorldOverView

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningWorldPresenterOverviewInterface LearningWorldP { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LearningWorldTreeView> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] public IMediator Mediator { get; set; }

    private static string SpaceIcon { get; set; } = CustomIcons.SpaceIcon;
    private Color Color { get; set; } = Color.Info;

    private IDictionary<ILearningSpaceViewModel, bool> ExpandedLearningSpaces { get; set; } = new Dictionary<ILearningSpaceViewModel, bool>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LearningWorldP.PropertyChanging += OnLearningWorldPresenterPropertyChanging;
        LearningWorldP.PropertyChanged += OnLearningWorldPresenterPropertyChanged;
        SelectedViewModelsProvider.PropertyChanged += OnSelectedViewModelsProviderPropertyChanged;
        LearningWorldP.OnCommandUndoRedoOrExecute += async (_, _) => await InvokeAsync(StateHasChanged);
        UpdateExpandedLearningSpaces();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) return;
        if (SelectedViewModelsProvider.LearningObjectInPathWay is LearningSpaceViewModel learningSpace)
        {
            ToggleLearningSpace(learningSpace);
        }
    }

    private string GetElementIcon(ILearningElementViewModel element)
    {
        return element.LearningContent switch
        {
            ILinkContentViewModel => CustomIcons.VideoElementIcon,
            IFileContentViewModel { Type: "png" or "jpg" or "bmp" or "webp" or "jpeg" } => CustomIcons.ImageElementIcon,
            IFileContentViewModel
            {
                Type: "txt" or "c" or "h" or "cpp" or "cc" or "c++" or "py" or
                "js" or "php" or "html" or "css"
            } => CustomIcons.TextElementIcon,
            IFileContentViewModel { Type: "h5p" } => CustomIcons.H5PElementIcon,
            IFileContentViewModel { Type: "pdf" } => CustomIcons.TextElementIcon,
            IAdaptivityContentViewModel => CustomIcons.AdaptivityElementIcon,
            _ => ""
        };
    }

    /// <summary>
    /// Determines the order of learning spaces based on the provided paths and returns them as a list.
    ///
    /// This algorithm uses a Breadth-First Search (BFS) approach to ensure that spaces residing on the same "level"
    /// are consecutive in the resulting list. Spaces without outgoing or incoming paths are appended at the end of the list.
    ///
    /// Spaces from the same path are ordered alphabetically.
    ///
    /// Note: This algorithm is also utilized in the "CreateATF" class. Changes made here should be reflected there as well.
    /// </summary>
    /// <param name="objectInPathWayViewModels">The collection of path object view models used to determine the order.</param>
    /// <returns>A sorted list of learning space view models based on the provided paths.</returns>
    private List<ILearningSpaceViewModel> GetLearningSpacesInOrder(IEnumerable<IObjectInPathWayViewModel> objectInPathWayViewModels)
    {
        var objectInPathWayList = objectInPathWayViewModels.ToList();
        var startObjects = objectInPathWayList.Where(x => x.InBoundObjects.Count == 0 && x is LearningSpaceViewModel && x.OutBoundObjects.Count > 0).ToList();

        var visited = new HashSet<IObjectInPathWayViewModel>();
        var pathOrder = new List<ILearningSpaceViewModel>();
        var queue = new Queue<IObjectInPathWayViewModel>();

        foreach (var startObject in startObjects)
        {
            queue.Enqueue(startObject);
        }

        while (queue.Count > 0)
        {
            var current = queue.Dequeue();

            if (visited.Contains(current))
                continue;

            visited.Add(current);

            if (current is ILearningSpaceViewModel learningSpace)
            {
                pathOrder.Add(learningSpace);
            }

            foreach (var nextObject in current.OutBoundObjects.OrderBy(o => o is LearningSpaceViewModel lsvm ? lsvm.Name : string.Empty))
            {
                queue.Enqueue(nextObject);
            }
        }

        var spacesWithOutPaths = objectInPathWayList.Where(x => x.InBoundObjects.Count == 0 && x is ILearningSpaceViewModel && x.OutBoundObjects.Count == 0).Cast<ILearningSpaceViewModel>().ToList();

        pathOrder.AddRange(spacesWithOutPaths);
        return pathOrder;
    }


    private void OnElementClicked(ILearningElementViewModel element)
    {
        LearningWorldP.SetSelectedLearningElement(element);
    }

    private void OnSpaceClicked(ILearningSpaceViewModel space)
    {
        LearningWorldP.SetSelectedLearningSpace(space);
    }

    private void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void UpdateExpandedLearningSpaces()
    {
        ExpandedLearningSpaces.Clear();
        foreach (var learningSpace in LearningWorldP.LearningWorldVm!.LearningSpaces)
        {
            ExpandedLearningSpaces.Add(learningSpace, false);
        }
    }

    private void OnLearningWorldViewModelPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged += OnLearningWorldViewModelPropertyChanged;
        }

        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanging(object? sender, PropertyChangingEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged -= OnLearningWorldViewModelPropertyChanged;
        }
    }

    private void OnSelectedViewModelsProviderPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        TriggerStateHasChanged();
        if (args.PropertyName != nameof(SelectedViewModelsProvider.LearningElement)) return;
        if (SelectedViewModelsProvider.LearningElement?.Parent != null && !IsLearningSpaceExpanded(SelectedViewModelsProvider.LearningElement.Parent))
            ToggleLearningSpace(SelectedViewModelsProvider.LearningElement.Parent);
    }

    private void ToggleLearningSpace(ILearningSpaceViewModel learningSpace)
    {
        ExpandedLearningSpaces[learningSpace] = !ExpandedLearningSpaces[learningSpace];
        TriggerStateHasChanged();
    }

    private bool IsLearningSpaceExpanded(ILearningSpaceViewModel learningSpace)
    {
        if (ExpandedLearningSpaces.ContainsKey(learningSpace) == false)
            UpdateExpandedLearningSpaces();

        return ExpandedLearningSpaces[learningSpace];
    }

    private Task SelectLearningElement(ILearningElementViewModel learningElement)
    {
        if (SelectedViewModelsProvider.LearningObjectInPathWay != learningElement.Parent)
            SelectedViewModelsProvider.SetLearningObjectInPathWay(learningElement.Parent, null);
        SelectedViewModelsProvider.SetLearningElement(learningElement, null);
        Mediator.RequestOpenElementDialog();
        return Task.CompletedTask;
    }

    private bool IsLearningElementSelected(ILearningElementViewModel learningElement)
    {
        return SelectedViewModelsProvider.LearningElement == learningElement;
    }

    private bool IsLearningSpaceSelected(ILearningSpaceViewModel learningSpace)
    {
        return SelectedViewModelsProvider.LearningObjectInPathWay == learningSpace;
    }

    private Task SelectLearningSpace(ILearningSpaceViewModel learningSpace)
    {
        ExpandedLearningSpaces[learningSpace] = true;
        Mediator.RequestOpenSpaceDialog();
        if (SelectedViewModelsProvider.LearningElement != null && SelectedViewModelsProvider.LearningElement.Parent != learningSpace)
            SelectedViewModelsProvider.SetLearningElement(null, null);
        SelectedViewModelsProvider.SetLearningObjectInPathWay(learningSpace, null);
        return Task.CompletedTask;
    }

}