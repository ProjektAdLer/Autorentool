@using Presentation.View.LearningSpace
@using Presentation.View.LearningElement
@using System.ComponentModel
@using Presentation.Components.ModalDialog
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.ModalDialog

<h2>World: @LearningWorldP.LearningWorldVm?.Name</h2>
@ChildContent
@if (LearningWorldP.ShowingLearningSpaceView)
{
    <LearningSpaceView>
        <button class="btn btn-primary" @onclick="CloseLearningSpaceView">Close Learning Space View</button>
    </LearningSpaceView>
}
else
{
    <h5>Workload: @LearningWorldP.LearningWorldVm?.Workload minutes</h5>
    <h5>Points: @LearningWorldP.LearningWorldVm?.Points </h5>
    <button class="btn btn-primary add-learning-space" @onclick="AddNewLearningSpace">Add Learning Space</button>
    <button class="btn btn-primary load-learning-space" @onclick="LoadLearningSpaceAsync">Load Learning Space</button>
    <br>

    @if (LearningWorldP.LearningWorldVm?.SelectedLearningSpace != null)
    {
        <label>
            Selected element:
            <text>
                @LearningWorldP.LearningWorldVm.SelectedLearningSpace.Name
                , Description:
                @LearningWorldP.LearningWorldVm.SelectedLearningSpace.Description
            </text>
        </label>
        <br>
        <button class="btn btn-primary edit-learning-space" @onclick="EditLearningSpace">Edit selected Learning Space</button>
        <button class="btn btn-primary delete-learning-space" @onclick="DeleteSelectedLearningSpace">Delete Learning Space</button>
        <button class="btn btn-primary save-learning-space" @onclick="SaveSelectedLearningSpaceAsync">Save selected Learning Space</button>
        <button class="btn btn-primary show-learning-space" @onclick="ShowSelectedLearningSpaceView"
                hidden="@(!LearningWorldP.SelectedLearningObjectIsSpace)">Open selected Learning Space</button>
    }
    <svg style="width: 100%; height: 600px; border: 1px solid green"
         xmlns="http://www.w3.org/2000/svg"
         @onmousemove=@(e => MouseService.FireMove(this, e))
             @onmouseup=@(e => MouseService.FireUp(this, e))
             @onmouseleave=@(e => MouseService.FireOut(this, e))>
        @if (LearningWorldP.LearningWorldVm != null)
        {
            @foreach (var learningSpace in LearningWorldP.LearningWorldVm.LearningObjects)
            {
                <DraggableLearningSpace LearningSpace="learningSpace"
                                        OnClicked="@LearningWorldP.SetSelectedLearningSpace"/>
            }
        }
    </svg>
    //create space modal
    @if (LearningWorldP.CreateLearningSpaceDialogOpen)
    {
        @ModalDialogFactory.GetCreateLearningSpaceFragment(OnCreateSpaceDialogClose)
    }
    
    //edit space modal
    @if (LearningWorldP.EditLearningSpaceDialogOpen && LearningWorldP.LearningWorldVm != null)
    {
        <!-- EditSpaceDialogInitialValues is set by presenter before setting EditLearningSpaceDialogOpen to true -->
        @ModalDialogFactory.GetEditLearningSpaceFragment(LearningWorldP.EditSpaceDialogInitialValues!, OnEditSpaceDialogClose, LearningWorldP.EditSpaceDialogAnnotations)
    }

    @if (ErrorState != null)
    {
        <ModalDialog Title="Exception encountered" Text=@ErrorState.ToString()
                     OnClose="@ErrorDialogOnClose" DialogType=@ModalDialogType.Ok/>
    }
}

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

#pragma warning disable CS8618 // injected by framework - n.stich
    [Inject]
    public IMouseService MouseService { get; set; }
    
    [Inject]
    public ILearningWorldPresenter LearningWorldP { get; set; }
    
    [Inject]
    public ILearningWorldViewModalDialogFactory ModalDialogFactory { get; set; }
#pragma warning restore CS8618
    
    private ExceptionWrapper? ErrorState { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LearningWorldP.PropertyChanging += OnLearningWorldPresenterPropertyChanging;
        LearningWorldP.PropertyChanged += OnLearningWorldPresenterPropertyChanged;
    }


    private void AddNewLearningSpace()
    {
        LearningWorldP.AddNewLearningSpace();
    }

    private void DeleteSelectedLearningSpace()
    {
        LearningWorldP.DeleteSelectedLearningSpace();
    }

    private async Task LoadLearningSpaceAsync()
    {
        try
        {
            await LearningWorldP.LoadLearningSpaceAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning space", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning space
            StateHasChanged();
        }
    }

    private async Task SaveSelectedLearningSpaceAsync()
    {
        try
        {
            await LearningWorldP.SaveSelectedLearningSpaceAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Save learning space", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning space
            StateHasChanged();
        }
    }

    private void OnCreateSpaceDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnCreateSpaceDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    private void EditLearningSpace()
    {
        LearningWorldP.OpenEditSelectedLearningSpaceDialog();
    }

    private void OnEditSpaceDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnEditSpaceDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    public void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void ErrorDialogOnClose(ModalDialogOnCloseResult _)
    {
        ErrorState = null;
        TriggerStateHasChanged();
    }

    private void ShowSelectedLearningSpaceView()
    {
        LearningWorldP.ShowSelectedLearningSpaceView();
    }

    private void CloseLearningSpaceView()
    {
        LearningWorldP.CloseLearningSpaceView();
    }

    private void OnLearningWorldViewModelPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged += OnLearningWorldViewModelPropertyChanged;
        }
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanging(object? sender, PropertyChangingEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged -= OnLearningWorldViewModelPropertyChanged;
        }
    }
}