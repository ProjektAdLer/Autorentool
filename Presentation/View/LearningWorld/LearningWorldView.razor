@using Presentation.View.LearningSpace
@using Presentation.View.LearningPathWay
@using Presentation.View.LearningElement
@using System.ComponentModel
@using Presentation.Components.ModalDialog
@using Presentation.Components.RightClickMenu
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningPathway
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.ModalDialog
@using Shared

<h2>World: @LearningWorldP.LearningWorldVm?.Name</h2>
@ChildContent
@if (LearningWorldP.ShowingLearningSpaceView)
{
    <LearningSpaceView>
        <button class="btn btn-primary" @onclick="CloseLearningSpaceView">Close Learning Space View</button>
    </LearningSpaceView>
}
else
{
    <h5>Workload: @LearningWorldP.LearningWorldVm?.Workload minutes</h5>
    <h5>Points: @LearningWorldP.LearningWorldVm?.Points </h5>
    <button class="btn btn-primary add-learning-space" @onclick="AddNewLearningSpace">Add Learning Space</button>
    <button class="btn btn-primary load-learning-space" @onclick="LoadLearningSpaceAsync">Load Learning Space</button>
    <button class="btn btn-primary add-pathway-condition" @onclick="AddNewPathWayCondition">Add Condition</button>                                         
    <br>

    @if (LearningWorldP.LearningWorldVm?.SelectedLearningObject != null)
    {
        <br/>
        <button class="btn btn-primary edit-learning-object" @onclick="EditLearningObject" disabled="@(LearningWorldP.LearningWorldVm.SelectedLearningObject is ILearningPathWayViewModel)">Edit selected Object</button>
        <button class="btn btn-primary delete-learning-object" @onclick="DeleteSelectedLearningObject">Delete selected Object</button>
        <button class="btn btn-primary save-learning-space" @onclick="SaveSelectedLearningSpaceAsync" disabled="@(!LearningWorldP.SelectedLearningObjectIsSpace)">Save selected Learning Space</button>
        <button class="btn btn-primary show-learning-space" @onclick="ShowSelectedLearningSpaceView" disabled="@(!LearningWorldP.SelectedLearningObjectIsSpace)">Open selected Learning Space</button>
    }
    <svg style="width: 100%; height: 600px; border: 1px solid green"
         xmlns="http://www.w3.org/2000/svg"
         @onmousemove=@(e => MouseService.FireMove(this, e))
             @onmouseup=@(e => MouseService.FireUp(this, e))
             @onmouseleave=@(e => MouseService.FireOut(this, e))
            @onmousedown="@LearningWorldP.HideRightClickMenu">
        @if (LearningWorldP.LearningWorldVm != null)
        {
            @foreach (var pathWayCondition in LearningWorldP.LearningWorldVm.PathWayConditions)
            {
                <DraggablePathWayCondition ObjectInPathWay="pathWayCondition"
                                           OnClickedDraggable="@LearningWorldP.ClickOnObjectInWorld"
                                           OnDraggedDraggable="@LearningWorldP.DragObjectInPathWay"
                                           OnClickedClickable="@LearningWorldP.DeleteLearningPathWay"
                                           OnRightClickedDraggable="@LearningWorldP.RightClickOnObjectInPathWay"
                                           ShowingRightClickMenu="pathWayCondition == LearningWorldP.RightClickedLearningObject"
                                           OnEditPathWayCondition="@LearningWorldP.EditObjectInPathWay"
                                           OnDeletePathWayCondition="@LearningWorldP.DeletePathWayCondition"
                                           OnCloseRightClickMenu="@LearningWorldP.HideRightClickMenu"
                                           PositioningService="@LearningWorldP"/>
            }
            
            @foreach(var learningSpace in LearningWorldP.LearningWorldVm.LearningSpaces)
            {
                <DraggableLearningSpace ObjectInPathWay="learningSpace"
                                        OnClickedDraggable="@LearningWorldP.ClickOnObjectInWorld"
                                        OnDraggedDraggable="@LearningWorldP.DragObjectInPathWay"
                                        OnClickedClickable="@LearningWorldP.DeleteLearningPathWay"
                                        OnRightClickedDraggable="@LearningWorldP.RightClickOnObjectInPathWay"
                                        ShowingRightClickMenu="learningSpace == LearningWorldP.RightClickedLearningObject"
                                        OnOpenLearningSpace="@LearningWorldP.ShowSelectedLearningSpaceView"
                                        OnEditLearningSpace="@LearningWorldP.EditObjectInPathWay"
                                        OnDeleteLearningSpace="@LearningWorldP.DeleteLearningSpace"
                                        OnCloseRightClickMenu="@LearningWorldP.HideRightClickMenu"
                                        PositioningService="@LearningWorldP"/>
            }
            
            @foreach (var learningPathWay in LearningWorldP.LearningWorldVm.LearningPathWays)
            {
                <PathWay X1=@(learningPathWay.SourceObject.OutputConnectionX) Y1=@(learningPathWay.SourceObject.OutputConnectionY+6)
                         Direction1=Direction.Right X2=@(learningPathWay.TargetObject.InputConnectionX)
                         Y2=@(learningPathWay.TargetObject.InputConnectionY) Direction2=Direction.Left
                         LearningPathWay="learningPathWay" OnClickedClickable="@LearningWorldP.ClickOnObjectInWorld"
                         PositioningService="LearningWorldP"/>
            }
        }
        <!-- The RightClickMenu might lies behind other spaces. 
        This line brings the RightClickMenu back to top, but the clickable buttons do not work anymore. -->
        <!--<use xlink:href="#rightClickMenu" />-->
    </svg>
    //create space modal
    @if (LearningWorldP.CreateLearningSpaceDialogOpen)
    {
        @ModalDialogFactory.GetCreateLearningSpaceFragment(OnCreateSpaceDialogClose)
    }
    
    //create pathway condition modal
    @if (LearningWorldP.CreatePathWayConditionDialogOpen)
    {
        @ModalDialogFactory.GetCreatePathWayConditionFragment(OnCreatePathWayConditionDialogClose)
    }
    
    //edit space modal
    @if (LearningWorldP.EditLearningSpaceDialogOpen && LearningWorldP.LearningWorldVm != null)
    {
        <!-- EditSpaceDialogInitialValues is set by presenter before setting EditLearningSpaceDialogOpen to true -->
        @ModalDialogFactory.GetEditLearningSpaceFragment(LearningWorldP.EditSpaceDialogInitialValues!, OnEditSpaceDialogClose, LearningWorldP.EditSpaceDialogAnnotations)
    }
    
    //edit pathway condition modal
    @if (LearningWorldP.EditPathWayConditionDialogOpen && LearningWorldP.LearningWorldVm != null)
    {
        <!-- EditConditionDialogInitialValues is set by presenter before setting EditPathWayConditionDialogOpen to true -->
        @ModalDialogFactory.GetEditPathWayConditionFragment(LearningWorldP.EditConditionDialogInitialValues!, OnEditPathWayConditionDialogClose)
    }

    @if (ErrorState != null)
    {
        <ModalDialog Title="Exception encountered" Text=@ErrorState.ToString()
                     OnClose="@ErrorDialogOnClose" DialogType=@ModalDialogType.Ok/>
    }
}

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

#pragma warning disable CS8618 // injected by framework - n.stich
    [Inject]
    public IMouseService MouseService { get; set; }
    
    [Inject]
    public ILearningWorldPresenter LearningWorldP { get; set; }
    
    [Inject]
    public ILearningWorldViewModalDialogFactory ModalDialogFactory { get; set; }
#pragma warning restore CS8618
    
    private ExceptionWrapper? ErrorState { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LearningWorldP.PropertyChanging += OnLearningWorldPresenterPropertyChanging;
        LearningWorldP.PropertyChanged += OnLearningWorldPresenterPropertyChanged;
        LearningWorldP.OnUndoRedoPerformed += StateHasChanged;
    }

    private void AddNewLearningSpace()
    {
        LearningWorldP.AddNewLearningSpace();
    }
    
    private void AddNewPathWayCondition()
    {
        LearningWorldP.AddNewPathWayCondition();
    }

    private void DeleteSelectedLearningObject()
    {
        LearningWorldP.DeleteSelectedLearningObject();
    }

    private async Task LoadLearningSpaceAsync()
    {
        try
        {
            await LearningWorldP.LoadLearningSpaceAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning space", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning space
            StateHasChanged();
        }
    }

    private async Task SaveSelectedLearningSpaceAsync()
    {
        try
        {
            await LearningWorldP.SaveSelectedLearningSpaceAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Save learning space", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning space
            StateHasChanged();
        }
    }

    private void OnCreateSpaceDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnCreateSpaceDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }
    
    private void OnCreatePathWayConditionDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnCreatePathWayConditionDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    private void EditLearningObject()
    {
        LearningWorldP.OpenEditSelectedObjectDialog();
    }
    
    private void OnEditPathWayConditionDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnEditPathWayConditionDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    private void OnEditSpaceDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnEditSpaceDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    public void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void ErrorDialogOnClose(ModalDialogOnCloseResult _)
    {
        ErrorState = null;
        TriggerStateHasChanged();
    }

    private void ShowSelectedLearningSpaceView()
    {
        LearningWorldP.ShowSelectedLearningSpaceView();
    }

    private void CloseLearningSpaceView()
    {
        LearningWorldP.CloseLearningSpaceView();
    }

    private void OnLearningWorldViewModelPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged += OnLearningWorldViewModelPropertyChanged;
        }
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanging(object? sender, PropertyChangingEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged -= OnLearningWorldViewModelPropertyChanged;
        }
    }
}