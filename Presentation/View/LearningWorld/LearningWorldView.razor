@page "/LearningWorldViewRedesign"
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.ModalDialog
@using Presentation.View.LearningSpace
@using Presentation.View.LearningPathWay
@using Size = MudBlazor.Size
@using Color = MudBlazor.Color
@using Presentation.Components.ModalDialog
@using System.ComponentModel
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningPathway
@using Presentation.PresentationLogic.LearningSpace
@using Direction = Shared.Direction
@ChildContent

<div>
    <h2>World: @LearningWorldP.LearningWorldVm?.Name</h2>
    <h5>Workload: @LearningWorldP.LearningWorldVm?.Workload minutes</h5>
    <h5>Points: @LearningWorldP.LearningWorldVm?.Points </h5>
</div>
<div class="p-2">
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="AddNewLearningSpace">New Space</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="AddNewPathWayCondition">New Condition</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="LoadLearningSpaceAsync">Load Space</MudButton>
</div>
<div class="p-2">
    <MudFab Size="Size.Small" Color="Color.Primary" StartIcon="@Icons.Material.Rounded.Edit" Disabled="@(LearningWorldP.LearningWorldVm?.SelectedLearningObject == null || LearningWorldP.LearningWorldVm.SelectedLearningObject is ILearningPathWayViewModel)" @onclick="EditLearningObject"></MudFab>
    <MudFab Size="Size.Small" Color="Color.Secondary" StartIcon="@Icons.Material.Rounded.Delete" Disabled="@(LearningWorldP.LearningWorldVm?.SelectedLearningObject == null)" @onclick="DeleteSelectedLearningObject"></MudFab>
    <MudFab Size="Size.Small" Color="Color.Primary" StartIcon="@Icons.Material.Rounded.Save" Disabled="@(LearningWorldP.LearningWorldVm?.SelectedLearningObject == null || LearningWorldP.LearningWorldVm.SelectedLearningObject is not ILearningSpaceViewModel)" @onclick="SaveSelectedLearningSpaceAsync"></MudFab>
</div>

<!-- <svg style="width: 400px; height: 600px; border:3px black; background-color: white" -->
<svg style="width: 600px; height: 800px; border:3px black; background-color: white"
     xmlns="http://www.w3.org/2000/svg"
     @onmousemove=@(e => MouseService.FireMove(this, e))
             @onmouseup=@(e => MouseService.FireUp(this, e))
             @onmouseleave=@(e => MouseService.FireOut(this, e))>
    @if (LearningWorldP.LearningWorldVm != null)
    {
        @foreach (var pathWayCondition in LearningWorldP.LearningWorldVm.PathWayConditions)
        {
            <DraggablePathWayCondition ObjectInPathWay="pathWayCondition"
                                       OnClickedDraggable="@LearningWorldP.ClickOnObjectInWorld"
                                       OnDraggedDraggable="@LearningWorldP.DragObjectInPathWay"
                                       OnClickedDeletePath="@LearningWorldP.DeleteLearningPathWay"
                                       OnClickedDeleteObject="@LearningWorldP.DeleteLearningObject"
                                       OnRightClickedDraggable="@LearningWorldP.RightClickOnObjectInPathWay"
                                       ShowingRightClickMenu="pathWayCondition == LearningWorldP.RightClickedLearningObject"
                                       OnEditPathWayCondition="@LearningWorldP.EditObjectInPathWay"
                                       OnDeletePathWayCondition="@LearningWorldP.DeletePathWayCondition"
                                       OnCloseRightClickMenu="@LearningWorldP.HideRightClickMenu"
                                       OnSwitchPathWayCondition="@LearningWorldP.SwitchPathWayCondition"
                                       PositioningService="@LearningWorldP"/>
        }
        
        @foreach(var learningSpace in LearningWorldP.LearningWorldVm.LearningSpaces)
        {
            <DraggableLearningSpace ObjectInPathWay="learningSpace"
                                    OnClickedDraggable="@LearningWorldP.ClickOnObjectInWorld"
                                    OnDraggedDraggable="@LearningWorldP.DragObjectInPathWay"
                                    OnClickedDeletePath="@LearningWorldP.DeleteLearningPathWay"
                                    OnClickedDeleteObject="@LearningWorldP.DeleteLearningObject"
                                    OnDoubleClickedDraggable="@LearningWorldP.DoubleClickOnLearningSpaceInWorld"
                                    OnRightClickedDraggable="@LearningWorldP.RightClickOnObjectInPathWay"
                                    ShowingRightClickMenu="learningSpace == LearningWorldP.RightClickedLearningObject"
                                    OnOpenLearningSpace="@LearningWorldP.ShowSelectedLearningSpaceView"
                                    OnEditLearningSpace="@LearningWorldP.EditObjectInPathWay"
                                    OnDeleteLearningSpace="@LearningWorldP.DeleteLearningSpace"
                                    OnCloseRightClickMenu="@LearningWorldP.HideRightClickMenu"
                                    PositioningService="@LearningWorldP"/>
        }

        @foreach (var learningPathWay in LearningWorldP.LearningWorldVm.LearningPathWays)
        {
            <PathWay X1=@(learningPathWay.SourceObject.OutputConnectionX) Y1=@(learningPathWay.SourceObject.OutputConnectionY + 6)
                     Direction1=Direction.Right X2=@(learningPathWay.TargetObject.InputConnectionX)
                     Y2=@(learningPathWay.TargetObject.InputConnectionY) Direction2=Direction.Left
                     LearningPathWay="learningPathWay" OnClickedClickable="@LearningWorldP.ClickOnObjectInWorld"
                     PositioningService="LearningWorldP"/>
        }
    }
    <!-- The RightClickMenu might lies behind other spaces. 
    This line brings the RightClickMenu back to top, but the clickable buttons do not work anymore. -->
    <!--<use xlink:href="#rightClickMenu" />-->
</svg>

@if (LearningWorldP.CreateLearningSpaceDialogOpen)
    {
        //create space modal
        @ModalDialogFactory.GetCreateLearningSpaceFragment(OnCreateSpaceDialogClose)
    }

    @if (LearningWorldP.CreatePathWayConditionDialogOpen)
    {
        //create pathway condition modal
        @ModalDialogFactory.GetCreatePathWayConditionFragment(OnCreatePathWayConditionDialogClose)
    }

    @if (LearningWorldP.EditLearningSpaceDialogOpen && LearningWorldP.LearningWorldVm != null)
    {
        //edit space modal
        <!-- EditSpaceDialogInitialValues is set by presenter before setting EditLearningSpaceDialogOpen to true -->
        @ModalDialogFactory.GetEditLearningSpaceFragment(LearningWorldP.EditSpaceDialogInitialValues!, OnEditSpaceDialogClose, LearningWorldP.EditSpaceDialogAnnotations)
    }

    @if (LearningWorldP.EditPathWayConditionDialogOpen && LearningWorldP.LearningWorldVm != null)
    {
        //edit pathway condition modal
        <!-- EditConditionDialogInitialValues is set by presenter before setting EditPathWayConditionDialogOpen to true -->
        @ModalDialogFactory.GetEditPathWayConditionFragment(LearningWorldP.EditConditionDialogInitialValues!, OnEditPathWayConditionDialogClose)
    }

    @if (ErrorState != null)
    {
        <ModalDialog Title="Exception encountered" Text=@ErrorState.ToString()
                     OnClose="@ErrorDialogOnClose" DialogType=@ModalDialogType.Ok/>
    }

@code {

    public bool Basic_Switch1 { get; set; } = false;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

#pragma warning disable CS8618 // injected by framework - n.stich
    [Inject]
    public IMouseService MouseService { get; set; }
    
    [Inject]
    public ILearningWorldPresenter LearningWorldP { get; set; }
    
    [Inject]
    public ILearningWorldViewModalDialogFactory ModalDialogFactory { get; set; }
#pragma warning restore CS8618
    
    private ExceptionWrapper? ErrorState { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LearningWorldP.PropertyChanging += OnLearningWorldPresenterPropertyChanging;
        LearningWorldP.PropertyChanged += OnLearningWorldPresenterPropertyChanged;
        LearningWorldP.OnUndoRedoPerformed += StateHasChanged;
    }

    private void AddNewLearningSpace()
    {
        LearningWorldP.AddNewLearningSpace();
    }
    
    private void AddNewPathWayCondition()
    {
        LearningWorldP.AddNewPathWayCondition();
    }

    private void DeleteSelectedLearningObject()
    {
        LearningWorldP.DeleteSelectedLearningObject();
    }

    private async Task LoadLearningSpaceAsync()
    {
        try
        {
            await LearningWorldP.LoadLearningSpaceAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning space", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning space
            StateHasChanged();
        }
    }

    private async Task SaveSelectedLearningSpaceAsync()
    {
        try
        {
            await LearningWorldP.SaveSelectedLearningSpaceAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Save learning space", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning space
            StateHasChanged();
        }
    }

    private void OnCreateSpaceDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnCreateSpaceDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }
    
    private void OnCreatePathWayConditionDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnCreatePathWayConditionDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    private void EditLearningObject()
    {
        LearningWorldP.OpenEditSelectedObjectDialog();
    }
    
    private void OnEditPathWayConditionDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnEditPathWayConditionDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    private void OnEditSpaceDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnEditSpaceDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    public void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void ErrorDialogOnClose(ModalDialogOnCloseResult _)
    {
        ErrorState = null;
        TriggerStateHasChanged();
    }
    
    private void OnLearningWorldViewModelPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged += OnLearningWorldViewModelPropertyChanged;
        }
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanging(object? sender, PropertyChangingEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged -= OnLearningWorldViewModelPropertyChanged;
        }
    }
}