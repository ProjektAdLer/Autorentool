@page "/LearningWorldOverView"
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.Components
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningElement
@using System.Buffers
@using Presentation.PresentationLogic.LearningSpace

@if (LearningWorldP?.LearningWorldVm != null)
{
    <div class="flex flex-col">
        <article class="flex flex-col justify-content w-[250px] mb-2">
            <section class="bg-white rounded-lg p-2">
                <div class="flex justify-start items-center space-x-2 py-1">
                    <img src="CustomIcons/world-icon-nobg.png" alt="world" class="opacity-50 w-7 h-7"> 
                    <p class="text-lg text-adlerblue-600 truncate hover:text-clip"> @LearningWorldP.LearningWorldVm?.Name</p>
                </div>
                <h3 class="text-base text-adlerblue-600"><span class="text-adlergrey-600">Workload: </span> @LearningWorldP.LearningWorldVm?.Workload<span class="text-adlergrey-600"> min.</span></h3>
                <h3 class="text-base text-adlerblue-600"><span class="text-adlergrey-600">Points: </span> @LearningWorldP.LearningWorldVm?.Points</h3>
            </section>
        </article>
        <section class="flex bg-white rounded-lg w-[250px] grow overflow-scroll pt-2">
            <MudTreeView Color="Color" Hover="true" Class="mud-width-full" @bind-SelectedValue="SelectedValue">
       
                @if(LearningWorldP.LearningWorldVm.LearningSpaces.Count > 0)
                {
                    @foreach (var learningSpace in LearningWorldP.LearningWorldVm.LearningSpaces)
                    {
                        <div class="text-adlergrey-700 text-lg">
                            <MudTreeViewItem Class="overflow-hidden" Value="@learningSpace.Name" OnClick="() => OnSpaceClicked(learningSpace)" Icon="@SpaceIcon">
                                @foreach (var element in learningSpace.ContainedLearningElements)
                                {
                                    <MudTreeViewItem Class="overflow-hidden" Icon="@GetElementIcon(element)" OnClick="() => OnElementClicked(element)" Value="@element.Name"></MudTreeViewItem>
                                }
                            </MudTreeViewItem>
                        </div>
                    }
                }
            </MudTreeView>
        </section>
    </div>
}

@code{
    string SelectedValue { get; set; }
    public Color Color { get; set; } = Color.Info;
}

@code {
    [Inject]
    public ILearningWorldPresenterOverviewInterface? LearningWorldP { get; set; }

    private static string SpaceIcon { get; set; } = CustomIcons.SpaceIcon;

    private string GetElementIcon(ILearningElementViewModel element)
    {
        return element.LearningContent switch
        {
            ILinkContentViewModel => CustomIcons.VideoElementIcon,
            IFileContentViewModel { Type: "png" or "jpg" or "bmp" or "webp" } => CustomIcons.ImageElementIcon,
            IFileContentViewModel
            {
                Type: "txt" or "c" or "h" or "cpp" or "cc" or "c++" or "py" or
                    "js" or "php" or "html" or "css"
                } => CustomIcons.TextElementIcon,
            IFileContentViewModel { Type: "h5p" } => CustomIcons.H5PElementIcon,
            IFileContentViewModel { Type: "pdf" } => CustomIcons.TextElementIcon,
            _ => throw new ArgumentOutOfRangeException(nameof(LearningElement))
            };
    }
    
    private void OnElementClicked(ILearningElementViewModel element)
    {
        LearningWorldP?.SetSelectedLearningElement(element);
    }
    
    private void OnSpaceClicked(ILearningSpaceViewModel space)
    {
        LearningWorldP?.SetSelectedLearningSpace(space);
    }
}