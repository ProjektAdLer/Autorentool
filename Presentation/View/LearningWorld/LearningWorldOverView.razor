@page "/LearningWorldOverView"
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.Components
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningElement

@if (LearningWorldP?.LearningWorldVm != null)
{
    <MudPaper Width="250px" Class="default-inline-flex rounded-lg bg-white" Elevation="0">
        <MudNavMenu Class="mud-width-full">
            <section class="bg-white rounded-lg p-2">
                <div class="flex justify-start items-center space-x-2 py-1">
                    <img src="CustomIcons/world-icon-nobg.png" alt="world" class="opacity-50 w-7 h-7"> 
                    <p class="text-lg text-adlerblue-600 truncate hover:text-clip"> @LearningWorldP.LearningWorldVm?.Name</p>
                </div>
                <h3 class="text-base text-adlerblue-600"><span class="text-adlergrey-600">Workload: </span> @LearningWorldP.LearningWorldVm?.Workload<span class="text-adlergrey-600"> min.</span></h3>
                <h3 class="text-base text-adlerblue-600"><span class="text-adlergrey-600">Points: </span> @LearningWorldP.LearningWorldVm?.Points</h3>
            </section>
            <MudDivider Class="my-1" />
            @if(LearningWorldP.LearningWorldVm.LearningSpaces.Count > 0)
            {
                @foreach (var learningSpace in LearningWorldP.LearningWorldVm.LearningSpaces)
                {
                    <MudNavGroup Title="@learningSpace.Name" Icon="@SpaceIcon">
                        @foreach (var element in learningSpace.ContainedLearningElements)
                        {
                            <MudNavLink Icon="@GetElementIcon(element)" OnClick="() => OnElementClicked(element)">@element.Name</MudNavLink>
                        }
                    </MudNavGroup>
                }
            }
        </MudNavMenu>
    </MudPaper>
}

@code {
    [Inject]
    public ILearningWorldPresenterOverviewInterface? LearningWorldP { get; set; }

    private static string SpaceIcon { get; set; } = CustomIcons.SpaceIcon;

    private string GetElementIcon(ILearningElementViewModel element)
    {
        return element.LearningContent switch
        {
            ILinkContentViewModel => CustomIcons.VideoElementIcon,
            IFileContentViewModel { Type: "png" or "jpg" or "bmp" or "webp" } => CustomIcons.ImageElementIcon,
            IFileContentViewModel
            {
                Type: "txt" or "c" or "h" or "cpp" or "cc" or "c++" or "py" or
                    "js" or "php" or "html" or "css"
                } => CustomIcons.TextElementIcon,
            IFileContentViewModel { Type: "h5p" } => CustomIcons.H5PElementIcon,
            IFileContentViewModel { Type: "pdf" } => CustomIcons.TextElementIcon,
            _ => throw new ArgumentOutOfRangeException(nameof(LearningElement))
            };
    }
    
    private void OnElementClicked(ILearningElementViewModel element)
    {
        LearningWorldP?.SetSelectedLearningElement(element);
    }
}