@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Presentation.PresentationLogic.LearningElement
@using System.Diagnostics.CodeAnalysis
@using MudBlazor.Extensions
@using Presentation.Components
@using Presentation.Components.Forms.Element
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
<MudMenu ActivationEvent="MouseEvent.RightClick" PositionAtCursor="true">
    <ActivatorContent>
        <MudCard Outlined="true" Class="@GetElementStyleString()">
            <section class="flex flex-col justify-start">
                <MudCardContent Class="relative flex justify-center w-[72px] 2xl:w-[85px] 3xl:w-[88px] 1080p:w-[100px] 2500p:w-[145px] h-[40px] 2xl:h-[80px] 2500p:h-[56px] p-0">

                    <div class="absolute flex justify-center -top-5">
                        <MudIcon Icon="@GetElementIcon()" Class="w-8 h-8 2xl:w-8 2xl:h-8 -top-5 flex rounded-lg p-1 element-icon"/>
                    </div>

                    <div class="flex flex-col">
                        
                        
                        <div class="flex justify-center items-center">
                            @{
                                var item = LearningElement;
                                var text = item.Name;
                            }
                            <MudListItem Class="w-20 h-14 text-[11px] 2xl:text-xs 1080p:text-sm font-bold text-adlertextgrey text-ellipsis overflow-hidden text-center leading-none 2xl:leading-none 1080p:leading-none p-0" Text="@text"></MudListItem>
                        </div>
                        
                        
                        
                        <div class="flex flex-row justify-between items-center">
                            <div>
                                <MudIcon Class="flex difficulty-icon drop-shadow h-4 w-4" Icon="@GetDifficultyIcon(LearningElement.Difficulty)"></MudIcon>
                            </div>
                            <div>
                                <MudText Class="flex text-adlerdarkblue text-xs font-bold">@LearningElement.Points P.</MudText>
                            </div>
                        </div>
                    </div>

                </MudCardContent>
            </section>
            <MudButton Class="cursor-grab" Style="position: absolute; top: 0; bottom: 0; left: 0; right: 0; background-color: transparent;"
                       OnClick="() => OnClicked.InvokeAsync(LearningElement)"/>
        </MudCard>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem OnClick="() => OnShowLearningElementContent.InvokeAsync(LearningElement)">Show</MudMenuItem>
        <MudMenuItem OnClick="() => OnEditLearningElement.InvokeAsync(LearningElement)">Edit</MudMenuItem>
        <MudMenuItem OnClick="() => OnDeleteLearningElement.InvokeAsync(LearningElement)">Delete</MudMenuItem>
    </ChildContent>
</MudMenu>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; } = null!;

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningElementViewModel LearningElement { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnShowLearningElementContent { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnEditLearningElement { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnDeleteLearningElement { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnClicked { get; set; }

    [Parameter]
    public EventCallback<ILearningElementViewModel> OnDoubleClicked { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (LearningElement is null)
        {
            throw new ArgumentNullException(nameof(LearningElement));
        }
    }

    private static string GetDifficultyIcon(LearningElementDifficultyEnum difficulty)
    {
        return difficulty switch
        {
            LearningElementDifficultyEnum.Easy => CustomIcons.DifficultyPolygonEasy,
            LearningElementDifficultyEnum.Medium => CustomIcons.DifficultyPolygonMedium,
            LearningElementDifficultyEnum.Hard => CustomIcons.DifficultyPolygonHard,
            LearningElementDifficultyEnum.None => CustomIcons.DifficultyPolygonNone,
            _ => throw new ArgumentOutOfRangeException(nameof(difficulty))
            };
    }
    
    private string GetElementIcon()
    {
        return LearningElement.LearningContent switch
        {
            ILinkContentViewModel => CustomIcons.VideoElementIcon,
            IFileContentViewModel { Type: "png" or "jpg" or "jpeg" or "bmp" or "webp" } => CustomIcons.ImageElementIcon,
            IFileContentViewModel
            {
                Type: "txt" or "c" or "h" or "cpp" or "cc" or "c++" or "py" or
                    "js" or "php" or "html" or "css"
                } => CustomIcons.TextElementIcon,
            IFileContentViewModel { Type: "h5p" } => CustomIcons.H5PElementIcon,
            IFileContentViewModel { Type: "pdf" } => CustomIcons.TextElementIcon,
            IAdaptivityContentViewModel => CustomIcons.AdaptivityElementIcon,
            _ => throw new ArgumentOutOfRangeException(nameof(LearningElement))
            };
    }

    private string GetElementStyleString()
    {
        return LearningElement == SelectedViewModelsProvider.LearningElement ? "border-2 border-adlerbggradientfrom bg-adlerblue-100 bg-opacity-30 relative flex rounded-lg hover:bg-adlerblue-300" : "border-2 relative flex rounded-lg bg-adlerbggradientto hover:bg-adlerblue-300";
    }

}