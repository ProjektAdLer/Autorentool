@using Presentation.PresentationLogic.LearningElement
@using Shared
@using Presentation.Components
@using Presentation.PresentationLogic.LearningElement.ActivationElement
@using Presentation.PresentationLogic.LearningElement.InteractionElement
@using Presentation.PresentationLogic.LearningElement.TestElement
@using Presentation.PresentationLogic.LearningElement.TransferElement
<MudMenu ActivationEvent="MouseEvent.RightClick" PositionAtCursor="true" @onclick="() => OnClicked.InvokeAsync(LearningElement)">
    <ActivatorContent>
        <MudCard Class="flex">
                <MudIcon Icon="@GetElementIcon()" Size="Size.Large"></MudIcon>
            <MudCardContent>
                @{
                    var item = LearningElement;
                    var text = item.Name;
                }
                <MudListItem Text="@text"></MudListItem>
                <MudIcon Icon="@GetDifficultyIcon(LearningElement.Difficulty)"/>
            </MudCardContent>
        </MudCard>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem OnClick="() => OnShowLearningElementContent.InvokeAsync(LearningElement)">Show</MudMenuItem>
        <MudMenuItem OnClick="() => OnEditLearningElement.InvokeAsync(LearningElement)">Edit</MudMenuItem>
        <MudMenuItem OnClick="() => OnDeleteLearningElement.InvokeAsync(LearningElement)">Delete</MudMenuItem>
    </ChildContent>
</MudMenu>

@code {

    [Parameter, EditorRequired]
    public ILearningElementViewModel LearningElement { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnShowLearningElementContent { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnEditLearningElement { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnDeleteLearningElement { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnClicked { get; set; }

    [Parameter]
    public EventCallback<ILearningElementViewModel> OnDoubleClicked { get; set; }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (LearningElement is null)
        {
            throw new ArgumentNullException(nameof(LearningElement));
        }
    }

    internal static string GetDifficultyIcon(LearningElementDifficultyEnum difficulty)
    {
        return difficulty switch
        {
            LearningElementDifficultyEnum.Easy => CustomIcons.DifficultyPolygonEasy,
            LearningElementDifficultyEnum.Medium => CustomIcons.DifficultyPolygonMedium,
            LearningElementDifficultyEnum.Hard => CustomIcons.DifficultyPolygonHard,
            LearningElementDifficultyEnum.None => CustomIcons.DifficultyPolygonNone,
            _ => throw new ArgumentOutOfRangeException(nameof(difficulty))
            };
    }
    
    private string GetElementIcon()
    {
        return LearningElement switch
        {
            H5PActivationElementViewModel => CustomIcons.H5PElementIcon,
            VideoActivationElementViewModel => CustomIcons.VideoElementIcon,
            H5PInteractionElementViewModel => CustomIcons.H5PElementIcon,
            H5PTestElementViewModel => CustomIcons.H5PElementIcon,
            ImageTransferElementViewModel => CustomIcons.ImageElementIcon,
            PdfTransferElementViewModel => CustomIcons.TextElementIcon,
            TextTransferElementViewModel => CustomIcons.TextElementIcon,
            VideoTransferElementViewModel => CustomIcons.VideoElementIcon,
            _ => throw new ArgumentOutOfRangeException(nameof(LearningElement))
            };
    }

}