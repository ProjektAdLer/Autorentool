@using Presentation.PresentationLogic.LearningElement
@using Shared
@using Presentation.Components
@using BusinessLogic.Entities.LearningContent
@using Presentation.PresentationLogic.LearningContent
<MudMenu ActivationEvent="MouseEvent.RightClick" PositionAtCursor="true" @onclick="() => OnClicked.InvokeAsync(LearningElement)">
    <ActivatorContent>
        <MudCard Outlined="true" Class="flex bg-adlerbggradientto m-[-1px]">
            <MudCardContent>
                <MudIcon Icon="@GetDifficultyIcon(LearningElement.Difficulty)" Class="difficulty-icon m-0 top-0 right-0"/>
                <MudIcon Icon="@GetElementIcon()" Size="Size.Large" Class="element-icon opacity-50 flex justify-center items-center m-0"/>
                @{
                    var item = LearningElement;
                    var text = item.Name;
                }
                <MudListItem Text="@text"></MudListItem>
            </MudCardContent>
        </MudCard>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem OnClick="() => OnShowLearningElementContent.InvokeAsync(LearningElement)">Show</MudMenuItem>
        <MudMenuItem OnClick="() => OnEditLearningElement.InvokeAsync(LearningElement)">Edit</MudMenuItem>
        <MudMenuItem OnClick="() => OnDeleteLearningElement.InvokeAsync(LearningElement)">Delete</MudMenuItem>
    </ChildContent>
</MudMenu>

@code {

    [Parameter, EditorRequired]
    public ILearningElementViewModel LearningElement { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnShowLearningElementContent { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnEditLearningElement { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnDeleteLearningElement { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnClicked { get; set; }

    [Parameter]
    public EventCallback<ILearningElementViewModel> OnDoubleClicked { get; set; }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (LearningElement is null)
        {
            throw new ArgumentNullException(nameof(LearningElement));
        }
    }

    private static string GetDifficultyIcon(LearningElementDifficultyEnum difficulty)
    {
        return difficulty switch
        {
            LearningElementDifficultyEnum.Easy => CustomIcons.DifficultyPolygonEasy,
            LearningElementDifficultyEnum.Medium => CustomIcons.DifficultyPolygonMedium,
            LearningElementDifficultyEnum.Hard => CustomIcons.DifficultyPolygonHard,
            LearningElementDifficultyEnum.None => CustomIcons.DifficultyPolygonNone,
            _ => throw new ArgumentOutOfRangeException(nameof(difficulty))
            };
    }
    
    private string GetElementIcon()
    {
        return LearningElement.LearningContent switch
        {
            ILinkContentViewModel => CustomIcons.VideoElementIcon,
            IFileContentViewModel { Type: "png" or "jpg" or "bmp" or "webp" } => CustomIcons.ImageElementIcon,
            IFileContentViewModel
            {
                Type: "txt" or "c" or "h" or "cpp" or "cc" or "c++" or "py" or
                    "js" or "php" or "html" or "css"
                } => CustomIcons.TextElementIcon,
            IFileContentViewModel { Type: "h5p" } => CustomIcons.H5PElementIcon,
            IFileContentViewModel { Type: "pdf" } => CustomIcons.TextElementIcon,
            _ => throw new ArgumentOutOfRangeException(nameof(LearningElement))
            };
    }

}