@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.Components
@using Presentation.Components.Dialogues
@using Presentation.Components.Forms.Element
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningContent.Story
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@implements IDisposable

<MudCard Outlined="true" Class="@GetElementStyleString()">

    @if (LearningElement.LearningContent is IStoryContentViewModel)
    {
        <MudCardContent Class="w-[72px] 2xl:w-[85px] 3xl:w-[88px] 1080p:w-[100px] 2500p:w-[145px] h-[40px] 2xl:h-[50px] 2500p:h-[55px] p-0">
     
            <div class="flex flex-col items-center">
      
                <MudListItem Class="absolute truncate w-[2.5rem] 2xl:w-[5rem] h-6 2xl:h-8 text-[8px] 2xl:text-xs 1080p:text-xs mt-2 font-bold text-adlertextgrey text-ellipsis overflow-hidden text-center leading-none 2xl:leading-none 1080p:leading-none px-0 z-10" 
                             Text="@LearningElement.Name"
                             OnClick="() => OnClicked.InvokeAsync(LearningElement)"
                             title="@LearningElement.Name">
                </MudListItem>
      
                <button @onclick="DeleteLearningElement" class="absolute -top-0 -right-0.5 2xl:top-0 2xl:right-0 z-20 opacity-75">
                    <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Default" Title="@Localizer["DragDropLearningElement.Element.Delete"]"></MudIcon>
                </button>
     
                <img src="@ElementModelHandler.GetIconForElementModel(LearningElement.ElementModel)" class="drop-shadow w-10 h-10 2xl:w-12 2xl:h-12 opacity-50 z-0" draggable="false"/>
                
            </div>

        </MudCardContent> 
    }

    else
    {
        <MudCardContent Class="w-[72px] 2xl:w-[85px] 3xl:w-[88px] 1080p:w-[100px] 2500p:w-[145px] h-[40px] 2xl:h-[50px] 2500p:h-[55px] p-0">
     
            <div class="flex flex-col items-center">
                
                <MudListItem Class="absolute truncate w-[2.5rem] 2xl:w-[5rem] h-4 2xl:h-4 text-[8px] 2xl:text-xs 1080p:text-xs mt-4 font-bold text-adlertextgrey text-ellipsis overflow-hidden text-center leading-none 2xl:leading-none 1080p:leading-none px-0 z-20" 
                             Text="@LearningElement.Name"
                             OnClick="() => OnClicked.InvokeAsync(LearningElement)"
                             title="@LearningElement.Name">
                </MudListItem>
                
                <button @onclick="DeleteLearningElement" class="absolute -top-0 -right-0.5 2xl:top-0 2xl:right-0 z-20 opacity-75">
                    <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Default" Title="@Localizer["DragDropLearningElement.Element.Delete"]"></MudIcon>
                </button>

                <img src="@ElementModelHandler.GetIconForElementModel(LearningElement.ElementModel)" class="drop-shadow w-10 h-10 2xl:w-12 2xl:h-12 opacity-50 z-0" draggable="false"/>
                
                <div class="w-[60px] 2xl:w-[70px] 3xl:w-[75px] 1080p:w-[80px] 2500p:w-[120px] bg-[#b9c0ca] rounded-md border-2 border-[#8b96a7] px-0.5 mt-0.5 absolute -bottom-2">
                    <div class="flex justify-between items-center">
                        <MudIcon Class="flex difficulty-icon drop-shadow w-3 h-3 2xl:h-4 2xl:w-4"
                                 Icon="@GetDifficultyIcon(LearningElement.Difficulty)">
                        </MudIcon>
                        <MudText Class="flex items-center justify-center rounded-full text-adlertextgrey text-[8px] 2xl:text-[10px] font-bold">@LearningElement.Points P.</MudText>
                        <MudIcon Class="flex drop-shadow w-3 h-3 2xl:w-3 2xl:h-3" 
                                 Icon="@GetElementIcon()"></MudIcon>
                    </div>
                </div>
            </div>
        </MudCardContent>
    }
    
 
</MudCard>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; } = null!;

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningElementViewModel LearningElement { get; set; } = null!;

    [Parameter, EditorRequired] public EventCallback<ILearningElementViewModel> OnDeleteLearningElement { get; set; }

    [Parameter, EditorRequired] public EventCallback<ILearningElementViewModel> OnClicked { get; set; }
    
    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IElementModelHandler ElementModelHandler { get; set; }

    [Parameter] public EventCallback<ILearningElementViewModel> OnDoubleClicked { get; set; }

    [Inject, AllowNull] internal IStringLocalizer<DragDropLearningElement> Localizer { get; set; }

    [Inject, AllowNull] internal IDialogService DialogService { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (LearningElement is null)
        {
            throw new ArgumentNullException(nameof(LearningElement));
        }

        LearningElement.PropertyChanged += LearningElementOnPropertyChanged;
    }

    private async void LearningElementOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    private static string GetDifficultyIcon(LearningElementDifficultyEnum difficulty)
    {
        return difficulty switch
        {
            LearningElementDifficultyEnum.Easy => CustomIcons.DifficultyPolygonEasy,
            LearningElementDifficultyEnum.Medium => CustomIcons.DifficultyPolygonMedium,
            LearningElementDifficultyEnum.Hard => CustomIcons.DifficultyPolygonHard,
            LearningElementDifficultyEnum.None => CustomIcons.DifficultyPolygonNone,
            _ => throw new ArgumentOutOfRangeException(nameof(difficulty))
        };
    }
    

    private string GetElementIcon()
    {
        return LearningElement.LearningContent switch
        {
            ILinkContentViewModel => CustomIcons.VideoElementIcon,
            IFileContentViewModel { Type: "png" or "jpg" or "jpeg" or "bmp" or "webp" } => CustomIcons.ImageElementIcon,
            IFileContentViewModel
            {
                Type: "txt" or "c" or "h" or "cpp" or "cc" or "c++" or "py" or
                "js" or "php" or "html" or "css"
            } => CustomIcons.TextElementIcon,
            IFileContentViewModel { Type: "h5p" } => CustomIcons.H5PElementIcon,
            IFileContentViewModel { Type: "pdf" } => CustomIcons.TextElementIcon,
            IAdaptivityContentViewModel => CustomIcons.AdaptivityElementIcon,
            IStoryContentViewModel => CustomIcons.StoryElementIcon,
            _ => throw new ArgumentOutOfRangeException(nameof(LearningElement))
        };
    }

    private string GetElementStyleString()
    {
        @if(LearningElement.LearningContent is IStoryContentViewModel)
        {
        return LearningElement == SelectedViewModelsProvider.LearningElement ? "border-2 border-adlergold-300 bg-adlergold-200 relative flex rounded-lg hover:bg-adlergold-300" : "border-2 relative flex rounded-lg bg-adlerdeactivated hover:bg-adlergold-400 hover:border-adlergold-300";
        }
        return LearningElement == SelectedViewModelsProvider.LearningElement ? "border-2 border-adlerblue-300 bg-adlerblue-200 relative flex rounded-lg hover:bg-adlerblue-300" : "border-2 relative flex rounded-lg bg-adlerdeactivated hover:bg-adlerblue-300 hover:border-adlerblue-300";
    }

    private async Task DeleteLearningElement()
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(GenericCancellationConfirmationDialog.DialogText), Localizer["DragDropLearningElement.DeleteElementConfirmationDialog.DialogText", LearningElement.Name].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonText), Localizer["DragDropLearningElement.DeleteElementConfirmationDialog.SubmitButtonText"].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonColor), Color.Error },
        };

        var dialogReference = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["DragDropLearningElement.DeleteElementConfirmationDialog.Title"].Value, dialogParameters);
        var result = await dialogReference.Result;
        if (result.Canceled)
        {
            return;
        }

        await OnDeleteLearningElement.InvokeAsync(LearningElement);
    }

    public void Dispose()
    {
        LearningElement.PropertyChanged -= LearningElementOnPropertyChanged;
    }
}