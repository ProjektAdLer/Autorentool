@using Microsoft.AspNetCore.Components
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.LearningElement
@using Presentation.Components
@using Presentation.Components.RightClickMenu
@using Shared
<Draggable LearningObject="LearningElement" OnClicked="@OnClicked" OnDoubleClicked="@OnDoubleClicked" 
           OnRightClicked="@OnRightClicked" OnDragged="@OnDragged"
           @bind-X="@LearningElement.PositionX" @bind-Y="@LearningElement.PositionY">
    <rect height="50" width="100" style="fill:lightblue;stroke: black"></rect>
    <polygon transform="translate(75,1)" fill="@PolygonColor"
             points="@PolygonPoints"></polygon>
    <text x="3" y="15">@LearningElement.Name</text>

</Draggable>
@if (ShowingRightClickMenu)
{
    <RightClickMenu LearningObject="@LearningElement"
                                    MenuEntries="@GetRightClickMenuEntries()"
                                    OnClose="() => OnCloseRightClickMenu.InvokeAsync()"/>
}

@code {
    // Overwrite nullability warning below because we check in OnParametersSet -n.stich
    [Parameter, EditorRequired]
    public ILearningElementViewModel LearningElement { get; set; } = null!;
    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnClicked { get; set; }
    [Parameter]
    public EventCallback<ILearningElementViewModel> OnDoubleClicked { get; set; }
    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnRightClicked { get; set; }
    [Parameter, EditorRequired]
    public DraggedEventArgs<ILearningElementViewModel>.DraggedEventHandler? OnDragged { get; set; }
    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnEditLearningElement { get; set; }
    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnDeleteLearningElement { get; set; }
    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnShowLearningElementContent { get; set; }
    [Parameter, EditorRequired]
    public EventCallback<ILearningElementViewModel> OnCloseRightClickMenu { get; set; }
    [Parameter, EditorRequired]
    public bool ShowingRightClickMenu { get; set; }
    

    private string? PolygonPoints { get; set; }
    private string? PolygonColor { get; set; }

    private const string EasyPolygonPoints = "13 1 10 10 2 13 10 16 13 25 16 16 24 13 16 10";
    private const string MediumPolygonPoints = "13 1 5 25 24 10 2 10 21 25";
    private const string HardPolygonPoints = "13 1 10 8 2 7 8 13 2 19 10 18 13 25 16 18 24 19 19 13 24 7 16 8 13 1";
    private const string NonePolygonPoints = "0";

    private const string EasyPolygonColor = "green";
    private const string MediumPolygonColor = "yellow";
    private const string HardPolygonColor = "red";
    private const string NonePolygonColor = "lightblue";
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (LearningElement is null)
        {
            throw new ArgumentNullException(nameof(LearningElement));
        }
        (PolygonPoints, PolygonColor) = GetDifficultyPolygon(LearningElement.Difficulty);
    }

    public static (string, string) GetDifficultyPolygon(LearningElementDifficultyEnum difficulty)
    {
        return difficulty switch
        {
            LearningElementDifficultyEnum.Easy => (EasyPolygonPoints, EasyPolygonColor),
            LearningElementDifficultyEnum.Medium => (MediumPolygonPoints, MediumPolygonColor),
            LearningElementDifficultyEnum.Hard => (HardPolygonPoints, HardPolygonColor),
            LearningElementDifficultyEnum.None => (NonePolygonPoints, NonePolygonColor),
            _ => throw new ArgumentOutOfRangeException(nameof(difficulty))
        };
    }
    
    private List<RightClickMenuEntry> GetRightClickMenuEntries()
    {
        return new List<RightClickMenuEntry>()
        {
            new("Edit", () => OnEditLearningElement.InvokeAsync(LearningElement)),
            new("Delete", () => OnDeleteLearningElement.InvokeAsync(LearningElement)),
            new("Show", () => OnShowLearningElementContent.InvokeAsync(LearningElement))
        };
    }

}