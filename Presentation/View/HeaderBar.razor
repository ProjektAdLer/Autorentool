@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using System.Runtime.Serialization
@using BusinessLogic.ErrorManagement.BackendAccess
@using ElectronWrapper
@using Microsoft.Extensions.Localization
@using Presentation.Components
@using Presentation.Components.Dialogues
@using Presentation.Components.LearningOutcomes
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.Components.ContentFiles
@using Presentation.Components.Dialogues.AdministrationDialog
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Shared.Exceptions
@using Size = MudBlazor.Size
@using Color = MudBlazor.Color
@inject ISnackbar Snackbar

<header class="flex flex-row w-full bg-buttonbgblue items-center gap-1 justify-between h-8">

    <div class="flex justify-start items-center w-14">
        @if (SelectedViewModelsProvider.LearningWorld?.Name != null)
        {
            <MudIconButton Class="p-1 text-adlerdarkblue" Icon="@Icons.Material.Filled.Home" Size="Size.Large"
                           title=@Localizer["LearningWorld.Home.Hover"]
                           OnClick="OnClickMyLearningWorldsOverview"></MudIconButton>
        }
        else
        {
            <MudIconButton Class="p-1" Icon="@Icons.Material.Filled.Home" Size="Size.Large"
                           Disabled="true"></MudIconButton>
        }
    </div>

    <div class="flex justify-start items-center h-6 w-56 gap-2">
        <MudIconButton Class="p-1 text-adlerdarkblue" Size="Size.Small" Icon="@_content"
                       title=@Localizer["Header.ContentFilesAdd.Title"] OnClick="OpenContentFilesDialog">
        </MudIconButton>

        <MudIconButton Class="p-1 text-adlerdarkblue" Size="Size.Small" Icon="@Icons.Material.Filled.Save"
                       title=@Localizer["LearningWorld.Save.Hover"] OnClick="TrySave">
        </MudIconButton>
        @if (SaveButtonHighlighted)
        {
            <span
                class="absolute inline-flex items-center justify-center text-xs font-bold text-white bg-red-500 border-2 border-white rounded-full -top-0 -end-0">
            </span>
        }

        <MudIconButton Size="Size.Small" Class="p-1 undo-button text-adlerdarkblue" Icon="@Icons.Material.Filled.Undo"
                       Disabled="!CanUndo"
                       title=@Localizer["Functionality.Button.Undo.Hover"] OnClick="OnClickUndo">
        </MudIconButton>
        <MudIconButton Size="Size.Small" Class="p-1 redo-button text-adlerdarkblue" Icon="@Icons.Material.Filled.Redo"
                       Disabled="!CanRedo"
                       title=@Localizer["Functionality.Button.Redo.Hover"] OnClick="OnClickRedo">
        </MudIconButton>
        @if (_debugBuild)
        {
            <button @onclick="DebugButtonClick"
                    class="relative btn-standard w-12 h-6 my-1 p-1 bg-adlergold-400 hover:bg-adlergold-600 hover:text-adlerdarkblue disabled:bg-adlerbggradientto"
                    disabled="@(SelectedViewModelsProvider.LearningWorld == null)">
                <p class="absolute left-1 hover:-translate-x-[30%] transition-all duration-1000">DEBUG BACKUP</p>
            </button>
        }
    </div>

    <div class="flex justify-center w-full">
        @if (SelectedViewModelsProvider.LearningWorld?.Name == null)
        {
            <div class="flex justify-center items-center gap-2 cursor-default">
                <img class="w-5 h-5 drop-shadow opacity-60" src="/CustomIcons/HeaderBar/autorentool-logo-icon.png"
                     alt="authoringtool-logo"/>
                <p class="font-bold text-base 2xl:text-lg text-adlertitledarkblue">@Localizer["AuthoringTool.Text"] @(Constants.ApplicationVersion)</p>
            </div>
        }
        @if (SelectedViewModelsProvider.LearningWorld?.Name != null)
        {
            <div class="flex justify-center items-center gap-2 cursor-default max-w-[85%] 2xl:w-full">
                <p class="font-bold text-base 2xl:text-lg truncate text-adlertitledarkblue"
                   title="@SelectedViewModelsProvider.LearningWorld?.Name"> @SelectedViewModelsProvider.LearningWorld?.Name</p>
                <MudIconButton Size="Size.Small" Class="flex items-center h-5 w-5 text-adlerdarkblue opacity-70"
                               OnClick="@ShowLearningOutcomesOverview"
                               Disabled="@(SelectedViewModelsProvider.LearningWorld == null)"
                               Icon="@learningOutcomeIcon"
                               title="@Localizer["LearningOutcomes.Overview"]"></MudIconButton>
            </div>
        }
    </div>

    <div class="flex flex-row w-60 gap-2 items-center justify-end">

        <div class="bg-none w-60 flex flex-row justify-center items-center cursor-pointer">
            <MudButton
                Class="h-6 rounded-lg my-1 p-1 drop-shadow disabled:bg-adlerbggradientto text-adlerdarkblue bg-adlergold-400 hover:bg-adlergold-600"
                id="HeaderBar.GenerateLearningWorld.Button" OnClick="GenerateLearningWorld"
                title=@Localizer["3DWorld.Generate.Hover"].Value
                Disabled="@(SelectedViewModelsProvider.LearningWorld == null)">
                <MudIcon Icon="@Icons.Material.Filled.Upload" Title="@Localizer["3DWorld.Generate.Hover"].Value"
                         Size="Size.Small"></MudIcon>
                <p class="text-xs font-bold uppercase pl-2">@Localizer["3DWorld.Generate.Button.Title"]</p>
            </MudButton>
        </div>

        <MudIconButton id="LmsLoginButton.OpenLmsDialog.Button" OnClick="OpenAdministrationDialog"
                       Icon="@Icons.Material.Filled.Settings"
                       title=@Localizer["LMS.Login.Hover"]
                       Class="text-adlerdarkblue normal-case p-1 w-8"
                       Size="Size.Medium"/>

    </div>

    <div class="flex justify-end w-16">
        @if (PresentationLogic.RunningElectron)
        {
            <CloseAppButton/>
        }
    </div>

</header>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] public IShellWrapper ShellWrapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal NavigationManager NavManager { get; private init; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<HeaderBar> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IMediator Mediator { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IErrorService ErrorService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILogger<HeaderBar> Logger { get; set; }

    private bool SaveButtonHighlighted => SelectedViewModelsProvider.LearningWorld is { UnsavedChanges: true };

    private void OpenContentFilesDialog()
    {
        var options = new DialogOptions
        {
            BackdropClick = false,
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Large,
        };
        DialogService.ShowAsync<ContentFilesContainer>(@Localizer["Header.ContentFilesAdd.Title"].Value, options);
        InvokeAsync(StateHasChanged);
    }

    private bool _popoverOpen;
    private bool _debugBuild = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
#if DEBUG
        _debugBuild = true;
#endif
    }

    private void DebugButtonClick()
    {
#if DEBUG
        PresentationLogic.ConstructDebugBackup(SelectedViewModelsProvider.LearningWorld!);
#endif
    }

    private void TogglePopover()
    {
        _popoverOpen = !_popoverOpen;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PresentationLogic.OnCommandUndoRedoOrExecute += async (_, _) => await InvokeAsync(StateHasChanged);
        SelectedViewModelsProvider.PropertyChanged += OnSelectedViewModelsProviderPropertyChanged;
    }

    private void OnSelectedViewModelsProviderPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnClickMyLearningWorldsOverview()
    {
        SelectedViewModelsProvider.SetLearningWorld(null, null);
        SelectedViewModelsProvider.SetLearningObjectInPathWay(null, null);
        SelectedViewModelsProvider.SetLearningElement(null, null);
        Mediator.CloseBothSides();
        NavManager.NavigateTo("/MyLearningWorldsOverview");
    }

    private bool CanUndo => PresentationLogic.CanUndo;
    private bool CanRedo => PresentationLogic.CanRedo;

    private async void GenerateLearningWorld()
    {
        var world = SelectedViewModelsProvider.LearningWorld;
        if (world == null) return;
        if (!IsLearningWorldValidForGeneration(world)) return;
        //check if lms is connected here before generating the backup just to save time
        try
        {
            if (!await PresentationLogic.IsLmsConnected())
            {
                await ShowNotLoggedInDialog();
                return;
            }
        }
        catch (BackendApiUnreachableException e)
        {
            ErrorService.SetError("An error occurred while checking the LMS connection", e.Message);
            return;
        }

        //present "Upload/Cancel" dialog
        var parameters = new DialogParameters
        {
            { "SubmitButtonText", Localizer["UploadLearningWorld.SubmitButtonText"].ToString() },
            { "SubmitButtonColor", Color.Success },
            {
                "DialogText",
                Localizer["Dialog.UploadLearningWorld.DialogText", world.Name].ToString()
            },
        };
        var options = CreateUnskippableDialogOptions();
        var dialog =
            await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["DialogService.UploadLearningWorld.Dialog"].ToString(), parameters,
                options);
        var result = await dialog.Result;

        //if not cancelled, upload LearningWorld
        if (result == null || result.Canceled) return;

        var existingLmsWorlds = await PresentationLogic.GetLmsWorldList();
        if (existingLmsWorlds.Any(lmsWorld => lmsWorld.WorldName == world.Name))
        {
            var confirmReplaceOrCreateCopyAsync = await ConfirmReplaceOrCreateCopyAsync(world.Name, existingLmsWorlds);
            if (!confirmReplaceOrCreateCopyAsync) return;
        }

        //present progress dialog
        var cancellationTokenSource = new CancellationTokenSource();
        var progress = new Progress<int>();
        options = new DialogOptions
        {
            CloseButton = false,
            CloseOnEscapeKey = false,
            BackdropClick = false
        };
        parameters = new DialogParameters
        {
            { nameof(UploadProgressDialog.Progress), progress },
            { nameof(UploadProgressDialog.CancellationTokenSource), cancellationTokenSource }
        };

        var uploadProgressDialogReference = await DialogService.ShowAsync<UploadProgressDialog>(Localizer["DialogService.UploadLearningWorld.Dialog.Title"].ToString(), parameters, options);

        try
        {
            var response = await PresentationLogic.ConstructAndUploadBackupAsync(world, progress, cancellationTokenSource.Token);
            ShowUploadSuccessfulDialog(response);
        }
        catch (OperationCanceledException)
        {
            Snackbar.Add(Localizer["ExportCanceled.Snackbar.Message"], Severity.Warning);
            return;
        }
        catch (GeneratorException e)
        {
            ErrorService.SetError("An Error has occured during creation of a Backup File", e.Message);
            return;
        }
        catch (Exception ex)
        {
            ErrorService.SetError(ex);
        }
        finally
        {
            uploadProgressDialogReference.Close();
        }

        Snackbar.Add(Localizer["Export.SnackBar.Message"], Severity.Success);
        _popoverOpen = true;
        StateHasChanged();
    }

    private async Task<bool> ConfirmReplaceOrCreateCopyAsync(string worldName, List<LmsWorldViewModel> lmsWorlds)
    {
        var options = CreateUnskippableDialogOptions();
        var parameters = new DialogParameters
        {
            { "LmsWorldName", worldName }
        };
        var replaceCopyLmsWorldDialog = await DialogService.ShowAsync<ReplaceCopyLmsWorldDialog>(@Localizer["ConfirmReplaceOrCreateCopyDialog.Title"].ToString(), parameters, options);
        var result = await replaceCopyLmsWorldDialog.Result;

        if (result == null || result.Data == null || result.Canceled)
        {
            return false;
        }

        switch ((ReplaceCopyLmsWorldDialogResult)result.Data)
        {
            case ReplaceCopyLmsWorldDialogResult.Replace:
                await PresentationLogic.DeleteLmsWorld(lmsWorlds.First(lmsWorld => lmsWorld.WorldName == worldName));
                break;
            case ReplaceCopyLmsWorldDialogResult.Copy:
                break;
        }

        return true;
    }

    private static DialogOptions CreateUnskippableDialogOptions()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = false,
        };
        return options;
    }


    private void ShowUploadSuccessfulDialog(UploadResponseViewModel response)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = true,
        };

        var parameters = new DialogParameters
        {
            {
                nameof(UploadSuccessfulDialog.Url3D), response.World3DUrl
            },
            {
                nameof(UploadSuccessfulDialog.UrlMoodle), response.WorldLmsUrl
            },
            {
                nameof(UploadSuccessfulDialog.WorldName), response.WorldNameInLms
            }
        };
        DialogService.ShowAsync<UploadSuccessfulDialog>(Localizer["UploadLearningWorld.Success.Title"].ToString(), parameters, options);
    }

    private bool IsLearningWorldValidForGeneration(ILearningWorldViewModel world)
    {
        var validationResult = PresentationLogic.ValidateLearningWorldForGeneration(world);
        if (validationResult.IsValid) return true;
        Logger.LogError("LearningWorld is not valid: {ErrorString}", validationResult.Errors);
        ErrorService.SetError(Localizer["Exception.InvalidLearningWorld.Message"], string.Join("", validationResult.Errors));
        return false;
    }

    private async Task ShowNotLoggedInDialog()
    {
        //present Info dialog
        var parameters = new DialogParameters
        {
            { "OkButtonText", Localizer["ShowNotLoggedInDialog.OkButtonText"].ToString() },
            { "OkButtonColor", Color.Primary },
            {
                "DialogText",
                (MarkupString)Localizer["Dialog.NotLoggedIn.Message"].ToString()
            },
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = true,
        };
        await DialogService.ShowAsync<GenericInfoDialog>(Localizer["DialogService.NotLoggedIn.Title"].ToString(), parameters, options);
    }

    private void OnClickUndo()
    {
        try
        {
            PresentationLogic.UndoCommand();
        }
        catch (UndoException e)
        {
            ErrorService.SetError("An error occurred while attempting to undo the last action", e.Message);
        }
    }

    private void OnClickRedo()
    {
        try
        {
            PresentationLogic.RedoCommand();
        }
        catch (RedoException e)
        {
            ErrorService.SetError("An error occurred while attempting to redo the last undone action", e.Message);
        }
    }

    private void TrySave()
    {
        var learningWorldViewModel = SelectedViewModelsProvider.LearningWorld;
        if (learningWorldViewModel is null) return;
        try
        {
            PresentationLogic.SaveLearningWorld(learningWorldViewModel);
            var snackbarString = Localizer["SaveWorld.Success.Snackbar.Message", learningWorldViewModel.Name].Value;
            Snackbar.Add(snackbarString, Severity.Success);
        }
        catch (SerializationException e)
        {
            ErrorService.SetError("An error occurred while attempting to save the LearningWorld", e.Message);
        }
        catch (InvalidOperationException e)
        {
            ErrorService.SetError("An error occurred while attempting to save the LearningWorld", e.Message);
        }
        catch (OperationCanceledException)
        {
            Snackbar.Add("Save LearningWorld canceled", Severity.Warning);
        }
    }

    private void ShowLearningOutcomesOverview()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium
        };

        var parameters = new DialogParameters
        {
            {
                nameof(LearningOutcomesWorldOverview.LearningWorld), SelectedViewModelsProvider.LearningWorld
            }
        };
        DialogService.ShowAsync<LearningOutcomesWorldOverview>("", parameters, options);
    }

    private void OpenAdministrationDialog()
    {
        var options = new DialogOptions
        {
            BackdropClick = true,
            CloseOnEscapeKey = true,
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = true
        };
        DialogService.ShowAsync<AdministrationDialog>("Administration", options);
        InvokeAsync(StateHasChanged);
    }

    private string learningOutcomeIcon => SelectedViewModelsProvider.LearningWorld == null ? learningOutcomeIconDeactivated : learningOutcomeIconActivated;

    const string learningOutcomeIconActivated =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
            <svg id=""uuid-347490b4-1d53-493d-bc86-b0ca80e39b63"" data-name=""R-LearningOutcome"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
                <circle cx=""1004.73"" cy=""1004.77"" r=""892.6"" style=""fill: none; stroke: #2e3a4d; stroke-miterlimit: 10; stroke-width: 200px;""/>
                    <circle cx=""1007.35"" cy=""1003.55"" r=""526.15"" style=""fill: none; stroke: #2e3a4d; stroke-miterlimit: 10; stroke-width: 200px;""/>
                        <line x1=""991.71"" y1=""-15.05"" x2=""991.71"" y2=""801.04"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                            <line x1=""1225.61"" y1=""1013.66"" x2=""2043.43"" y2=""1013.66"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                <circle cx=""1000.71"" cy=""984.34"" r=""243.06"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                    <line x1=""1016.48"" y1=""986.81"" x2=""1714.73"" y2=""288.56"" style=""fill: none; stroke: #e9f2fa; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 172px;""/>
                                        <line x1=""1015.48"" y1=""986.81"" x2=""1713.73"" y2=""288.56"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 120px;""/>
                                            <g>
                                                <rect x=""1562.75"" y=""219.03"" width=""214.35"" height=""214.35"" transform=""translate(1257.75 1977.01) rotate(-87.03)"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                                    <polyline points=""1771.4 438.78 1782.49 224.72 1996.55 235.81"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                                        <polyline points=""1793.58 10.66 1782.49 224.72 1568.43 213.63"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                                            </g>
                                                                <line x1=""0"" y1=""1005.85"" x2=""817.09"" y2=""1005.85"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                    <line x1=""987.71"" y1=""1221.81"" x2=""987.71"" y2=""2029.06"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                        </svg>";

    const string learningOutcomeIconDeactivated =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
            <svg id=""uuid-347490b4-1d53-493d-bc86-b0ca80e39b63"" data-name=""R-LearningOutcome"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
                <circle cx=""1004.73"" cy=""1004.77"" r=""892.6"" style=""fill: none; stroke: rgb(179,179,179); stroke-miterlimit: 10; stroke-width: 200px;""/>
                    <circle cx=""1007.35"" cy=""1003.55"" r=""526.15"" style=""fill: none; stroke: rgb(179,179,179); stroke-miterlimit: 10; stroke-width: 200px;""/>
                        <line x1=""991.71"" y1=""-15.05"" x2=""991.71"" y2=""801.04"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                            <line x1=""1225.61"" y1=""1013.66"" x2=""2043.43"" y2=""1013.66"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                <circle cx=""1000.71"" cy=""984.34"" r=""243.06"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                    <line x1=""1016.48"" y1=""986.81"" x2=""1714.73"" y2=""288.56"" style=""fill: none; stroke: #e9f2fa; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 172px;""/>
                                        <line x1=""1015.48"" y1=""986.81"" x2=""1713.73"" y2=""288.56"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 120px;""/>
                                            <g>
                                                <rect x=""1562.75"" y=""219.03"" width=""214.35"" height=""214.35"" transform=""translate(1257.75 1977.01) rotate(-87.03)"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                                    <polyline points=""1771.4 438.78 1782.49 224.72 1996.55 235.81"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                                        <polyline points=""1793.58 10.66 1782.49 224.72 1568.43 213.63"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                                            </g>
                                                                <line x1=""0"" y1=""1005.85"" x2=""817.09"" y2=""1005.85"" style=""fill: none; stroke:rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                    <line x1=""987.71"" y1=""1221.81"" x2=""987.71"" y2=""2029.06"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                        </svg>";


    private readonly string _content = ContentIcon;

    const string ContentIcon =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
  <g id=""uuid-58c73294-b6c8-4e63-81c7-5c3f104c41f0"" data-name=""R-File_Back"">
    <polygon points=""36.53 1958 36.53 738.32 309.44 738 418.62 960.8 1576.39 960.53 1589 1958 36.53 1958"" style=""fill: #172d4d; fill-rule: evenodd;""/>
  </g>
  <g id=""uuid-e5fee6e8-a59d-4d72-8816-301bfea3f822"" data-name=""R-Metadata_Back"">
    <rect x=""443.49"" y=""60.4"" width=""915"" height=""1356"" rx=""137.35"" ry=""137.35"" style=""fill: #e9f2fa; stroke: #172d4d; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""593.49"" y1=""289.4"" x2=""925.49"" y2=""289.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""878.49"" y1=""644.4"" x2=""1210.49"" y2=""644.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""593.49"" y1=""1214.4"" x2=""925.49"" y2=""1214.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""1093.49"" y1=""1206.74"" x2=""1202.05"" y2=""1206.74"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""1103.77"" y1=""289.74"" x2=""1212.32"" y2=""289.74"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""601.77"" y1=""644.74"" x2=""710.32"" y2=""644.74"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""593.49"" y1=""466.4"" x2=""1210.49"" y2=""466.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""593.49"" y1=""820.4"" x2=""1210.49"" y2=""820.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""593.49"" y1=""1028.4"" x2=""817.49"" y2=""1028.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""982.49"" y1=""1028.4"" x2=""1202.49"" y2=""1028.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
  </g>
  <g id=""uuid-449b1d8f-61d8-42e4-a3e3-9f042a1ed0bb"" data-name=""R-Metadata_Front"">
    <rect x=""752.49"" y=""408.4"" width=""915"" height=""1356"" rx=""137.35"" ry=""137.35"" style=""fill: #e9f2fa; stroke: #172d4d; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""902.49"" y1=""637.4"" x2=""1234.49"" y2=""637.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""1187.49"" y1=""992.4"" x2=""1519.49"" y2=""992.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""902.49"" y1=""1562.4"" x2=""1234.49"" y2=""1562.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""1402.49"" y1=""1554.74"" x2=""1511.05"" y2=""1554.74"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""1412.77"" y1=""637.74"" x2=""1521.32"" y2=""637.74"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""910.77"" y1=""992.74"" x2=""1019.32"" y2=""992.74"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""902.49"" y1=""814.4"" x2=""1519.49"" y2=""814.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""902.49"" y1=""1168.4"" x2=""1519.49"" y2=""1168.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""902.49"" y1=""1376.4"" x2=""1126.49"" y2=""1376.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
    <line x1=""1291.49"" y1=""1376.4"" x2=""1511.49"" y2=""1376.4"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 70px;""/>
  </g>
  <g id=""uuid-78b2ec3d-4e52-48e3-a2e2-fcb54ba09758"" data-name=""R-File_Front"">
    <polygon points=""94 1955 1592.72 1955 1975 953.21 474.86 953.21 94 1955"" style=""fill: #363f4d; fill-rule: evenodd;""/>
  </g>
</svg>";

}