@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Microsoft.Extensions.Localization
@using Presentation.Components
@using Presentation.Components.Culture
@using System.ComponentModel
@inject ISnackbar Snackbar
<header class="mb-1 grid grid-cols-3 grid-rows-1 w-full bg-buttonbgblue items-center">
    <div class="ml-1 flex justify-start items-center gap-2">
        <MudIconButton Class="p-1 text-adlerdarkblue" Icon="@Icons.Material.Filled.Home" Size="Size.Large" Title="My Learning Worlds" @onclick="OnClickMyLearningWorldsOverview"></MudIconButton>
        <MudDivider Vertical="true" FlexItem="true"/>
        <MudIconButton Class="p-1 text-adlerdarkblue" Icon="@Icons.Material.Filled.Save" Title="Save Learning World" OnClick="TrySaveAsync"></MudIconButton>
        <div>
            <MudIconButton Class="p-1" Icon="@Icons.Material.Filled.Undo" Disabled="!CanUndo" Title="Undo" OnClick="OnClickUndo"></MudIconButton>
            <MudIconButton Class="p-1" Icon="@Icons.Material.Filled.Redo" Disabled="!CanRedo" Title="Redo" OnClick="OnClickRedo"></MudIconButton>
        </div>
        <Button @onclick="@ExportLearningWorld" class="btn-standard p-2 bg-adlergold-400 hover:bg-adlergold-600 hover:text-adlerdarkblue disabled:bg-adlerbggradientto" title="Generate Learning World to Moodle and 3D Learning Environment" disabled="@(SelectedViewModelsProvider.LearningWorld == null)">
            <MudIcon Icon="@Icons.Material.Filled._3dRotation"></MudIcon>
            <p class="pl-1 font-bold">Generate 3D-World</p>
        </Button>

        <MudPopover Open="@_popoverOpen" Fixed="false" Class="left-0 rounded-none overflow-hidden min-h-screen max-h-screen h-screen w-screen bg-blacktrans-700"></MudPopover>

        <MudPopover Open="@_popoverOpen" Fixed="false" Class="mt-12 ml-20 w-96 bg-adlerblue-600 bg-opacity-80">
            <div class="flex flex-row">
                <p class="text-center text-lg pl-6 pt-6 text-white">In order to further develop and optimize the authoring tool, we would appreciate if you could take a few minutes to give us feedback on the current status of the authoring tool.</p>
                <Button class="flex-none w-5 h-5 text-adlergrey-200 font-bold text-lg hover:text-white" @onclick="TogglePopover" Icon="@Icons.Material.Filled.Close" title="Close">X</Button>
            </div>
            <div class="flex justify-center items-center pb-6 pt-1">
                <a href="https://www.soscisurvey.de/autorentoolevaluation_gesamt" target="_blank" title="Final feedback - Opens new web page" class="w-7/12 btn-standard flex flex-row gap-2 justify-center items-center">
                    <img class="w-6 h-6 drop-shadow" src="/CustomIcons/feedback-icon-without-typo-nobg.png" alt="feedback-icon"/>
                    <p class="font-bold text-base">To the final feedback</p>
                </a>
            </div>
        </MudPopover>

    </div>
    @if (SelectedViewModelsProvider?.LearningWorld?.Name == null)
        {
            <div class="flex justify-center items-center gap-2">
                <img class="w-10 drop-shadow" src="/CustomIcons/autorentool-logo.png" alt="authoringtool-logo"/>
                <h1 class="font-bold text-lg">@Localizer["AuthoringTool.Text"] @Localizer["AuthoringTool.Version"]</h1>
            </div>
        }
    @if (SelectedViewModelsProvider?.LearningWorld?.Name != null)
    {
        <div class="flex justify-center items-center gap-2">
            <img class="w-8 drop-shadow opacity-50" src="CustomIcons/world-icon-nobg.png" alt="learningworld">
            <p class="font-bold text-lg truncate hover:text-clip"> @SelectedViewModelsProvider.LearningWorld?.Name </p>
        </div>
    }
    
    <div class="flex justify-end items-center gap-2 border-solid">
        <div class="flex flex-col justify-center px-1">
             <p class="text-xs font-bold text-center">
                        Feedback
             </p>
           <div class="flex flex-row justify-around">
             <a href="https://bugreport.projekt-adler.eu" target="_blank" title="Technical feedback - Opens new web page">
                <button class="btn-standard m-0 p-1 h-5">
                   <img class="w-4 h-4 drop-shadow" src="/CustomIcons/bug-icon-nobg.png" alt="debug-icon"/>
                </button>
             </a>
             <a href="https://www.soscisurvey.de/autorentoolevaluation/" target="_blank" title="User experience feedback - Opens new web page">
                <button class="btn-standard m-0 p-1 h-5">
                   <img class="w-4 h-4 drop-shadow" src="/CustomIcons/feedback-icon-without-typo-nobg.png" alt="feedback-icon"/>
                </button>
             </a>
           </div>
        </div>
        <CultureSelector/>
        <LmsLoginButton/>
        @if (PresentationLogic?.RunningElectron == true)
        {
            <CloseAppButton/>
        }
    </div>
</header>

@code {

    [Inject]
    public IPresentationLogic PresentationLogic { get; set; }

    [Inject]
    internal NavigationManager NavManager { get; private init; }

    [Inject]
    private IStringLocalizer<HeaderBar> Localizer { get; set; }

    [Inject]
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject]
    private IMediator Mediator { get; set; }

    private string _filepath = "";

    private bool _popoverOpen;

    private void TogglePopover()
    {
        _popoverOpen = !_popoverOpen;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PresentationLogic.OnCommandUndoRedoOrExecute += async (_, args) => await InvokeAsync(StateHasChanged);
        SelectedViewModelsProvider.PropertyChanged += OnSelectedViewModelsProviderPropertyChanged;
    }

    private void OnSelectedViewModelsProviderPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnClickMyLearningWorldsOverview()
    {
        SelectedViewModelsProvider.SetLearningWorld(null, null);
        SelectedViewModelsProvider.SetLearningObjectInPathWay(null, null);
        SelectedViewModelsProvider.SetLearningElement(null, null);
        Mediator.CloseBothSides();
        NavManager.NavigateTo("/MyLearningWorldsOverview");
    }

    private bool CanUndo => PresentationLogic.CanUndo;
    private bool CanRedo => PresentationLogic.CanRedo;

    private void OnClickUndo()
    {
        PresentationLogic.UndoCommand();
    }

    private async void ExportLearningWorld()
    {
    //Create XMl-files, Overwrite Encoding to UTF-8 and Create Backup-File
        if (SelectedViewModelsProvider.LearningWorld == null) return;
        try
        {
            _filepath = await PresentationLogic.ConstructBackupAsync(SelectedViewModelsProvider.LearningWorld);
            Snackbar.Add("LearningWorld exported to " + _filepath, Severity.Success);
            _popoverOpen = true;
        }
        catch (OperationCanceledException)
        {
            Snackbar.Add("Exporting LearningWorld was canceled", Severity.Warning);
        }
        StateHasChanged();
    }

    private void OnClickRedo()
    {
        PresentationLogic.RedoCommand();
    }

    private async Task TrySaveAsync()
    {
        if (SelectedViewModelsProvider.LearningWorld is null) return;
        await PresentationLogic.SaveLearningWorldAsync(SelectedViewModelsProvider.LearningWorld);
    }

}