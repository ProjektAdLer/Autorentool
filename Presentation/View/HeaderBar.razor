@using Presentation.PresentationLogic.API
@using Presentation.Components
@using Presentation.Components.Culture
@using Microsoft.Extensions.Localization
<header class="mb-1 flex justify-between w-full bg-buttonbgblue items-center">
    <div class="ml-1 flex items-center gap-2">
        <img class="w-10 drop-shadow" src="/CustomIcons/autorentool-logo.png" alt="authoringtool-logo"/>
        <h1 class="font-bold text-lg">@Localizer["AuthoringTool.Text"] @Localizer["AuthoringTool.Version"]</h1>
        <div>
            <MudIconButton Class="p-1" Icon="@Icons.Material.Filled.Undo" Disabled="!CanUndo" Title="Undo" OnClick="OnClickUndo"></MudIconButton>
            <MudIconButton Class="p-1" Icon="@Icons.Material.Filled.Redo" Disabled="!CanRedo" Title="Redo" OnClick="OnClickRedo"></MudIconButton>
        </div>
        <MudButton Class="btn-standard" @onclick="OnClickMyLearningWorldsOverview">My Learning Worlds</MudButton>
    </div>

    <div class="flex">
        <CultureSelector/>
        @if (PresentationLogic?.RunningElectron == true)
        {
            <CloseAppButton/>
        }
    </div>
</header>

@code {

    [Inject]
    public IPresentationLogic PresentationLogic { get; set; }

    [Inject]
    internal NavigationManager NavManager { get; private init; }
    
    [Inject]
    private IStringLocalizer<HeaderBar> Localizer { get; set; }
    
    [Inject]
    private IMediator Mediator { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PresentationLogic.OnCommandUndoRedoOrExecute += async (_, args) => await InvokeAsync(StateHasChanged);
    }

    private void OnClickMyLearningWorldsOverview()
    {
        Mediator.SelectedLearningWorld = null;
        Mediator.SelectedLearningObjectInPathWay = null;
        Mediator.SelectedLearningElement = null;
        Mediator.CloseBothSides();
        NavManager.NavigateTo("/MyLearningWorldsOverview");
    }

    private bool CanUndo => PresentationLogic.CanUndo;
    private bool CanRedo => PresentationLogic.CanRedo;

    private void OnClickUndo()
    {
        PresentationLogic.UndoCommand();
    }

    private void OnClickRedo()
    {
        PresentationLogic.RedoCommand();
    }

}