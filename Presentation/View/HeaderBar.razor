@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using System.Runtime.Serialization
@using System.Text
@using ElectronWrapper
@using Microsoft.Extensions.Localization
@using Presentation.Components
@using Presentation.Components.Culture
@using Presentation.Components.Dialogues
@using Presentation.Components.LearningOutcomes
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.Extensions
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Shared.Exceptions
@using Size = MudBlazor.Size
@using Color = MudBlazor.Color
@inject ISnackbar Snackbar

<header class="flex flex-row w-full bg-buttonbgblue items-center gap-1 justify-between h-12">
    
    <div class="flex justify-start items-center w-16">
        @if (SelectedViewModelsProvider.LearningWorld?.Name != null)
        {
            <MudIconButton Class="p-1 text-adlerdarkblue" Icon="@Icons.Material.Filled.Home" Size="Size.Large" title=@Localizer["LearningWorld.Home.Hover"] OnClick="OnClickMyLearningWorldsOverview"></MudIconButton>

        }
        else
        {
            <MudIconButton Class="p-1" Icon="@Icons.Material.Filled.Home" Size="Size.Large" Disabled="true"></MudIconButton>
        }
        <MudDivider Vertical="true" FlexItem="true"/>
    </div>
    
        
    <div class="flex flex-col w-36">
        <div class="flex justify-start h-6">
            <MudIconButton Class="p-1 text-adlerdarkblue" Size="Size.Small" Icon="@Icons.Material.Filled.FolderOpen" title=@Localizer["LearningWorld.Save.Hover"] OnClick="TrySave">
            </MudIconButton>
        </div>
            
        
        <div class="flex flex-row items-center border-t-2 border-adlerblue-100 w-full justify-between h-6">
  
            <div class="flex justify-start flex-row gap-2 items-center">
                <MudIconButton Class="p-1 text-adlerdarkblue" Size="Size.Small" Icon="@Icons.Material.Filled.Save" title=@Localizer["LearningWorld.Save.Hover"] OnClick="TrySave">
                </MudIconButton>
                @if (SaveButtonHighlighted)
                {
                    <span class="absolute inline-flex items-center justify-center text-xs font-bold text-white bg-red-500 border-2 border-white rounded-full -top-0 -end-0">
                    </span>
                }

                <MudIconButton Size="Size.Small" Class="p-1 undo-button text-adlerdarkblue" Icon="@Icons.Material.Filled.Undo" Disabled="!CanUndo"
                               title=@Localizer["Functionality.Button.Undo.Hover"] OnClick="OnClickUndo">
                </MudIconButton>
                <MudIconButton Size="Size.Small" Class="p-1 redo-button text-adlerdarkblue" Icon="@Icons.Material.Filled.Redo" Disabled="!CanRedo"
                               title=@Localizer["Functionality.Button.Redo.Hover"] OnClick="OnClickRedo">
                </MudIconButton>
            </div>
        </div>
    </div>
    
    <div class="flex justify-center w-full">
        @if (SelectedViewModelsProvider.LearningWorld?.Name == null)
        {
            <div class="flex justify-center items-center gap-2 cursor-default">
                @* ReSharper disable Html.PathError *@
                <img class="w-5 h-5 drop-shadow opacity-60" src="/CustomIcons/HeaderBar/autorentool-logo-icon.png" alt="authoringtool-logo"/>
                @* ReSharper restore Html.PathError *@
                <p class="font-bold text-base 2xl:text-lg opacity-80 text-adlerdarkblue-800">@Localizer["AuthoringTool.Text"] @(Constants.ApplicationVersion)</p>
            </div>
        }
        @if (SelectedViewModelsProvider.LearningWorld?.Name != null)
        {
            <div class="flex justify-center items-center gap-2 cursor-default max-w-[85%] 2xl:w-full">
                @* ReSharper disable Html.PathError *@
                @*<img class="w-5 h-5 drop-shadow opacity-60" src="CustomIcons/World/world-icon.png" alt="learningworld"/>*@
                @* ReSharper restore Html.PathError *@
                <p class="font-bold text-base 2xl:text-lg truncate text-adlerdarkblue" title="@SelectedViewModelsProvider.LearningWorld?.Name"> @SelectedViewModelsProvider.LearningWorld?.Name</p>
                <MudIconButton Size="Size.Small" Class="flex items-center h-5 w-5 text-adlerdarkblue" OnClick="@ShowLearningOutcomesOverview" Disabled="@(SelectedViewModelsProvider.LearningWorld == null)" Icon="@learningOutcomeIcon" title="@Localizer["LearningOutcomes.Overview"]"></MudIconButton>
            </div>
        }
    </div>
    
    <div class="flex flex-col w-56">
        <div class="flex flex-row gap-2 items-center justify-end h-6">
  
            <CultureSelector/>

            <div>
                <MudMenu Class="flex items-center h-5 w-5" Size="Size.Small" ListClass="px-2" Dense="true" AnchorOrigin="Origin.BottomCenter" Icon="@_icon">
                    <div class="flex flex-col">
                        <MudMenu ListClass="mx-2" Class="w-full hover:bg-adlerbgbright" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopRight" title="@Localizer["HeaderBar.Help.UserManual.Hover"]">
                            <ActivatorContent>
                                <div class="flex flex-row justify-between pl-4 py-3 w-full">
                                    <p @onclick="@OpenManual">@Localizer["HeaderBar.Help.UserManual"]</p>
                                    <button>
                                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" Size="Size.Small" Class="px-0 text-adlertextgrey opacity-60"></MudIcon>
                                    </button>
                                </div>
                            </ActivatorContent>
                            <ChildContent>
                                <MudListItem T="object">
                                    <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["HeaderBar.Help.UserManual.SoftwareComponents.Hover"]" @onclick="@OpenManualSoftwareComponents">@Localizer["HeaderBar.Help.UserManual.SoftwareComponents"]</MudLink>
                                </MudListItem>
                                <MudListItem T="object">
                                    <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["HeaderBar.Help.UserManual.Handling.Hover"]" @onclick="@OpenManualHandling">@Localizer["HeaderBar.Help.UserManual.Handling"]</MudLink>
                                </MudListItem>
                            </ChildContent>
                        </MudMenu>

                        <MudMenu ListClass="mx-2" Class="w-full hover:bg-adlerbgbright" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopRight" title="@Localizer["HeaderBar.Help.Tutorial.Hover"]">
                            <ActivatorContent>
                                <div class="flex flex-row justify-between pl-4 py-3 w-full">
                                    <p @onclick="@OpenDidacticGuide">@Localizer["HeaderBar.Help.Tutorial"]</p>
                                    <button>
                                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" Size="Size.Small" Class="px-0 text-adlertextgrey opacity-60"></MudIcon>
                                    </button>
                                </div>
                            </ActivatorContent>
                            <ChildContent>
                                <MudListItem T="object">
                                    <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["HeaderBar.Help.Didactic.AdaptivityElement.Hover"]" @onclick="@OpenDidacticAdaptivityElementGuide">@Localizer["HeaderBar.Help.Didactic.AdaptivityElement"]</MudLink>
                                </MudListItem>
                                <MudListItem T="object">
                                    <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["HeaderBar.Help.Didactic.LearningOutcomeGuide.Hover"]" @onclick="@OpenDidacticLearningOutcomeGuide">@Localizer["HeaderBar.Help.Didactic.LearningOutcomeGuide"]</MudLink>
                                </MudListItem>
                                <MudListItem T="object">
                                    <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["HeaderBar.Help.Didactic.StoryElement.Hover"]" @onclick="@OpenDidacticStoryElementGuide">@Localizer["HeaderBar.Help.Didactic.StoryElement"]</MudLink>
                                </MudListItem>
                            </ChildContent>
                        </MudMenu>
                    </div>

                    <MudDivider></MudDivider>

                    <MudListItem T="object" Class="py-2" title="@Localizer["MudPopover.Feedback.Final.Hover"]">
                        <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" OnClick="OpenFeedbackUX">@Localizer["Feedback.MenuItem.UX.Text"]</MudLink>
                    </MudListItem>

                    <MudListItem T="object" Class="py-2" title="@Localizer["Feedback.Button.Technical.Hover"]">
                        <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" OnClick="OpenFeedbackBug">@Localizer["Feedback.MenuItem.Technical.Text"]</MudLink>
                    </MudListItem>

                    <MudDivider></MudDivider>

                    <MudListItem T="object" Class="py-2" title="@Localizer["HeaderBar.Help.About.Hover"]">
                        <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" OnClick="OpenAdLer">@Localizer["HeaderBar.Help.About"]</MudLink>
                    </MudListItem>

                </MudMenu>
            </div>

            <LmsLoginButton/>

        </div>
        
        <div class="flex flex-row gap-2 items-center justify-end border-t-2 border-adlerblue-100 h-6">
            @if (_debugBuild)
            {
                <button @onclick="DebugButtonClick" class="relative w-14 h-5 btn-standard p-1 bg-adlergold-400 hover:bg-adlergold-600 hover:text-adlerdarkblue disabled:bg-adlerbggradientto" title=@Localizer["3DWorld.Generate.Hover"] disabled="@(SelectedViewModelsProvider.LearningWorld == null)">
                    <p class="absolute left-1 hover:-translate-x-[30%] transition-all duration-1000">DEBUG BACKUP</p>
                </button>
            }
            <MudIconButton OnClick="@ExportLearningWorldToArchiveAsync"
                           Size="Size.Small"
                           Icon="@Icons.Material.Filled.Archive"
                           Class="text-adlerdarkblue disabled:bg-buttonbgblue p-0"
                           title=@Localizer["ExportArchive.Hover"]
                           Disabled="@(SelectedViewModelsProvider.LearningWorld == null)">
            </MudIconButton>

            <MudIconButton id="HeaderBar.GenerateLearningWorld.Button" OnClick="@GenerateLearningWorld"
                           Size="Size.Small"
                           title="@Localizer["3DWorld.Generate.Hover"].Value"
                           Class="disabled:bg-adlerbggradientto text-adlergold p-0 bg-none shadow-none"
                           Disabled="@(SelectedViewModelsProvider.LearningWorld == null)"
                           Icon="@Icons.Material.Filled.Publish">
            </MudIconButton>

        </div>
    </div>
    

        @*<div class="flex justify-end items-center gap-2 border-solid">
            @if (SelectedViewModelsProvider.LearningWorld?.Name == null)
        {
            <a href="https://www.soscisurvey.de/autorentoolevaluationlernwelt/" target="_blank" title="@Localizer["Feedback.Button.UX.Hover"]">
                <div class="flex flex-row items-center gap-4">
                    <MudButton Class="btn-standard bg-adlerblue-600 test-base text-white font-semibold">@Localizer["Feedback.Text"]</MudButton>
                </div>
            </a>
        }
        else
        {
            <a href="https://www.soscisurvey.de/autorentoolevaluationlernraum/" target="_blank" title="@Localizer["Feedback.Button.UX.Hover"]">
                <div class="flex flex-row items-center gap-4">
                    <MudButton Class="btn-standard bg-adlerblue-600 test-base text-white font-semibold">@Localizer["Feedback.Text"]</MudButton>
                </div>
            </a>
        }
        </div>*@
    
    <div class="flex justify-end w-16">
        @if (PresentationLogic.RunningElectron)
        {
            <CloseAppButton/>
        }
    </div>
    
</header>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] public IShellWrapper ShellWrapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal NavigationManager NavManager { get; private init; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<HeaderBar> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IMediator Mediator { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IErrorService ErrorService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILogger<HeaderBar> Logger { get; set; }

    private bool SaveButtonHighlighted => SelectedViewModelsProvider.LearningWorld is { UnsavedChanges: true };


    private bool _popoverOpen;
    private bool _debugBuild = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
#if DEBUG
        _debugBuild = true;
#endif
    }

    private void DebugButtonClick()
    {
#if DEBUG
        PresentationLogic.ConstructDebugBackup(SelectedViewModelsProvider.LearningWorld!);
#endif
    }

    private void TogglePopover()
    {
        _popoverOpen = !_popoverOpen;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PresentationLogic.OnCommandUndoRedoOrExecute += async (_, _) => await InvokeAsync(StateHasChanged);
        SelectedViewModelsProvider.PropertyChanged += OnSelectedViewModelsProviderPropertyChanged;
    }

    private void OnSelectedViewModelsProviderPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnClickMyLearningWorldsOverview()
    {
        SelectedViewModelsProvider.SetLearningWorld(null, null);
        SelectedViewModelsProvider.SetLearningObjectInPathWay(null, null);
        SelectedViewModelsProvider.SetLearningElement(null, null);
        Mediator.CloseBothSides();
        NavManager.NavigateTo("/MyLearningWorldsOverview");
    }

    private bool CanUndo => PresentationLogic.CanUndo;
    private bool CanRedo => PresentationLogic.CanRedo;

    private async void GenerateLearningWorld()
    {
        var world = SelectedViewModelsProvider.LearningWorld;
        if (world == null) return;
        if (!IsLearningWorldValid(world)) return;
        //check if lms is connected here before generating the backup just to save time
        if (!await PresentationLogic.IsLmsConnected())
        {
            await ShowNotLoggedInDialog();
            return;
        }

        //present "Upload/Cancel" dialog
        var parameters = new DialogParameters
        {
            { "SubmitButtonText", Localizer["UploadLearningWorld.SubmitButtonText"].ToString() },
            { "SubmitButtonColor", Color.Success },
            {
                "DialogText",
                Localizer["Dialog.UploadLearningWorld.DialogText", world.Name].ToString()
            },
        };
        var options = CreateUnskippableDialogOptions();
        var dialog =
            await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["DialogService.UploadLearningWorld.Dialog"].ToString(), parameters,
                options);
        var result = await dialog.Result;

        //if not cancelled, upload LearningWorld
        if (result == null || result.Canceled) return;

        var existingLmsWorlds = await PresentationLogic.GetLmsWorldList();
        if (existingLmsWorlds.Any(lmsWorld => lmsWorld.WorldName == world.Name))
        {
            var confirmReplaceOrCreateCopyAsync = await ConfirmReplaceOrCreateCopyAsync(world.Name, existingLmsWorlds);
            if (!confirmReplaceOrCreateCopyAsync) return;
        }

        //present progress dialog
        var cancellationTokenSource = new CancellationTokenSource();
        var progress = new Progress<int>();
        options = new DialogOptions
        {
            CloseButton = false,
            CloseOnEscapeKey = false,
            BackdropClick = false
        };
        parameters = new DialogParameters
        {
            { nameof(UploadProgressDialog.Progress), progress },
            { nameof(UploadProgressDialog.CancellationTokenSource), cancellationTokenSource }
        };

        var uploadProgressDialogReference = await DialogService.ShowAsync<UploadProgressDialog>(Localizer["DialogService.UploadLearningWorld.Dialog.Title"].ToString(), parameters, options);

        try
        {
            var response = await PresentationLogic.ConstructAndUploadBackupAsync(world, progress, cancellationTokenSource.Token);
            ShowUploadSuccessfulDialog(response);
        }
        catch (OperationCanceledException)
        {
            Snackbar.Add(Localizer["ExportCanceled.Snackbar.Message"], Severity.Warning);
            return;
        }
        catch (GeneratorException e)
        {
            ErrorService.SetError("An Error has occured during creation of a Backup File", e.Message);
            return;
        }
        catch (Exception ex)
        {
            ErrorService.SetError(ex);
        }
        finally
        {
            uploadProgressDialogReference.Close();
        }

        Snackbar.Add(Localizer["Export.SnackBar.Message"], Severity.Success);
        _popoverOpen = true;
        StateHasChanged();
    }

    private async Task<bool> ConfirmReplaceOrCreateCopyAsync(string worldName, List<LmsWorldViewModel> lmsWorlds)
    {
        var options = CreateUnskippableDialogOptions();
        var parameters = new DialogParameters
        {
            { "LmsWorldName", worldName }
        };
        var replaceCopyLmsWorldDialog = await DialogService.ShowAsync<ReplaceCopyLmsWorldDialog>(@Localizer["ConfirmReplaceOrCreateCopyDialog.Title"].ToString(), parameters, options);
        var result = await replaceCopyLmsWorldDialog.Result;

        if (result == null || result.Data == null || result.Canceled)
        {
            return false;
        }

        switch ((ReplaceCopyLmsWorldDialogResult)result.Data)
        {
            case ReplaceCopyLmsWorldDialogResult.Replace:
                await PresentationLogic.DeleteLmsWorld(lmsWorlds.First(lmsWorld => lmsWorld.WorldName == worldName));
                break;
            case ReplaceCopyLmsWorldDialogResult.Copy:
                break;
        }

        return true;
    }

    private static DialogOptions CreateUnskippableDialogOptions()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = false,
        };
        return options;
    }


    private void ShowUploadSuccessfulDialog(UploadResponseViewModel response)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = true,
        };

        var parameters = new DialogParameters
        {
            {
                nameof(UploadSuccessfulDialog.Url3D), response.World3DUrl
            },
            {
                nameof(UploadSuccessfulDialog.UrlMoodle), response.WorldLmsUrl
            },
            {
                nameof(UploadSuccessfulDialog.WorldName), response.WorldNameInLms
            }
        };
        DialogService.ShowAsync<UploadSuccessfulDialog>(Localizer["UploadLearningWorld.Success.Title"].ToString(), parameters, options);
    }

    private async Task ExportLearningWorldToArchiveAsync()
    {
        if (SelectedViewModelsProvider.LearningWorld is null) return;
        await PresentationLogic.ExportLearningWorldToArchiveAsync(SelectedViewModelsProvider.LearningWorld);
    }

    private bool IsLearningWorldValid(ILearningWorldViewModel world)
    {
        var errorString = new StringBuilder();
        errorString.Append("<ul>");

        if (world.LearningSpaces.Count == 0)
        {
            errorString.AppendLine($"<li> {Localizer["ErrorString.Missing.LearningSpace.Message"]} </li>");
        }
        
        if (world.LearningSpaces.Count > 50)
        {
            errorString.AppendLine($"<li> {Localizer["ErrorString.TooMany.LearningSpaces.Message"]} </li>");
        }

        foreach (var space in world.LearningSpaces)
        {
            if (!space.ContainedLearningElements.Any())
            {
                errorString.AppendLine($"<li> {Localizer["ErrorString.Missing.LearningElements.Message", space.Name]} </li>");
            }

            if (space.Points < space.RequiredPoints)
            {
                errorString.AppendLine($"<li> {Localizer["ErrorString.Insufficient.Points.Message", space.Name]} </li>");
            }
        }

        foreach (var (adaptivityContent, learningElement) in world.AllLearningElements
                     .Where(ele => ele.LearningContent is IAdaptivityContentViewModel)
                     .Select(ele => ((IAdaptivityContentViewModel)ele.LearningContent, ele)))
        {
            if (adaptivityContent.Tasks.Count <= 0) errorString.AppendLine($"<li> {Localizer["ErrorString.NoTasks.Message", learningElement.Name]} </li>");
            if (TaskReferencesNonexistantElement(adaptivityContent, world))
                errorString.AppendLine($"<li> {Localizer["ErrorString.TaskReferencesNonexistantElement.Message", learningElement.Name]} </li>");
            if (adaptivityContent.Tasks.Any(TaskReferencesUnplacedElement(world)))
                errorString.AppendLine($"<li> {Localizer["ErrorString.TaskReferencesUnplacedElement.Message", learningElement.Name]} </li>");
            var invalidSpaceReferences = ReferencesElementInSpaceAfterOwnSpace(learningElement, world);
            foreach (var referenceTuple in invalidSpaceReferences)
            {
                errorString.AppendLine($"<li> {Localizer["ErrorString.TaskReferencesElementInSpaceAfterOwnSpace.Message", learningElement.Name, referenceTuple.Space.Name, referenceTuple.Element.Name]} </li>");
            }
        }

        if (errorString.Length == "<ul>".Length) return true;

        errorString.Append("</ul>");

        Logger.LogError("LearningWorld is not valid: {ErrorString}", errorString);
        ErrorService.SetError(Localizer["Exception.InvalidLearningWorld.Message"], errorString.ToString());
        return false;
    }

    private bool TaskReferencesNonexistantElement(IAdaptivityContentViewModel adaptivityContent, ILearningWorldViewModel world)
    {
        var adaptivityContentReferencedIds = GetElementIdsContentReferences(adaptivityContent);
        return adaptivityContentReferencedIds.Any(id => world.AllLearningElements.All(ele => ele.Id != id));
    }

    private static Func<IAdaptivityTaskViewModel, bool> TaskReferencesUnplacedElement(ILearningWorldViewModel world) =>
        task => task.Questions
            .Any(question => question.Rules
                .Any(rule => rule.Action is ElementReferenceActionViewModel eravm &&
                             world.UnplacedLearningElements.Any(unplacedEle =>
                                 unplacedEle.Id == eravm.ElementId)));


    /// <summary>
    /// Checks if the given element references any elements that are placed in spaces which come AFTER the space it
    /// itself is in, in the partial ordering of spaces.
    /// </summary>
    private IEnumerable<(ILearningSpaceViewModel Space, ILearningElementViewModel Element)> ReferencesElementInSpaceAfterOwnSpace(ILearningElementViewModel element, ILearningWorldViewModel world)
    {
        var ownSpace = world.LearningSpaces.SingleOrDefault(space => space.ContainedLearningElements.Contains(element));
        //element isn't placed yet, can't say anything about it
        if (ownSpace is null) return Enumerable.Empty<(ILearningSpaceViewModel, ILearningElementViewModel)>();

        //find all the id's of elements that the adaptivity content of this element we are looking at references
        var adaptivityContent = (AdaptivityContentViewModel)element.LearningContent;
        var adaptivityContentReferencedIds = GetElementIdsContentReferences(adaptivityContent);

        //create a tuple of (space,ele) for every element in every space
        IEnumerable<(ILearningSpaceViewModel Space, ILearningElementViewModel Element)> spaceElementTuples = world.LearningSpaces
            .SelectMany(space => space.ContainedLearningElements
                .Select(ele => (space, ele)));

        //find all the tuples that contain an element that is referenced by the adaptivity content of the element we are looking at
        var spaceElementTuplesReferenced = spaceElementTuples.Where(tup => adaptivityContentReferencedIds.Contains(tup.Element.Id));

        //find all spaces that are after the space the element we are looking at is in
        var spacesAfterOwn = ownSpace.GetFollowingSpaces();

        //find all tuples that contain a space that is after our own space
        return spaceElementTuplesReferenced.Where(tup => spacesAfterOwn.Contains(tup.Space));
    }

    private static IEnumerable<Guid> GetElementIdsContentReferences(IAdaptivityContentViewModel adaptivityContent)
    {
        return adaptivityContent.Tasks
            .SelectMany(task => task.Questions
                .SelectMany(question => question.Rules
                    .Select(rule => rule.Action)
                    .Where(action => action is ElementReferenceActionViewModel)
                    .Cast<ElementReferenceActionViewModel>()
                    .Select(action => action.ElementId)));
    }

    private async Task ShowNotLoggedInDialog()
    {
        //present Info dialog
        var parameters = new DialogParameters
        {
            { "OkButtonText", Localizer["ShowNotLoggedInDialog.OkButtonText"].ToString() },
            { "OkButtonColor", Color.Primary },
            {
                "DialogText",
                (MarkupString)Localizer["Dialog.NotLoggedIn.Message"].ToString()
            },
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = true,
        };
        await DialogService.ShowAsync<GenericInfoDialog>(Localizer["DialogService.NotLoggedIn.Title"].ToString(), parameters, options);
    }

    private void OnClickUndo()
    {
        try
        {
            PresentationLogic.UndoCommand();
        }
        catch (UndoException e)
        {
            ErrorService.SetError("An error occurred while attempting to undo the last action", e.Message);
        }
    }

    private void OnClickRedo()
    {
        try
        {
            PresentationLogic.RedoCommand();
        }
        catch (RedoException e)
        {
            ErrorService.SetError("An error occurred while attempting to redo the last undone action", e.Message);
        }
    }

    private void TrySave()
    {
        var learningWorldViewModel = SelectedViewModelsProvider.LearningWorld;
        if (learningWorldViewModel is null) return;
        try
        {
            PresentationLogic.SaveLearningWorld(learningWorldViewModel);
            var snackbarString = Localizer["SaveWorld.Success.Snackbar.Message", learningWorldViewModel.Name].Value;
            Snackbar.Add(snackbarString, Severity.Success);
        }
        catch (SerializationException e)
        {
            ErrorService.SetError("An error occurred while attempting to save the LearningWorld", e.Message);
        }
        catch (InvalidOperationException e)
        {
            ErrorService.SetError("An error occurred while attempting to save the LearningWorld", e.Message);
        }
        catch (OperationCanceledException)
        {
            Snackbar.Add("Save LearningWorld canceled", Severity.Warning);
        }
    }

    private void OpenAdLer() => ShellWrapper.OpenPathAsync("https://www.projekt-adler.eu");

    private void ShowLearningOutcomesOverview()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium
        };

        var parameters = new DialogParameters
        {
            {
                nameof(LearningOutcomesWorldOverview.LearningWorld), SelectedViewModelsProvider.LearningWorld
            }
        };
        DialogService.ShowAsync<LearningOutcomesWorldOverview>("", parameters, options);
    }

    private string learningOutcomeIcon => SelectedViewModelsProvider.LearningWorld == null ? learningOutcomeIconDeactivated : learningOutcomeIconActivated;

    const string learningOutcomeIconActivated =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
            <svg id=""uuid-347490b4-1d53-493d-bc86-b0ca80e39b63"" data-name=""R-LearningOutcome"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
                <circle cx=""1004.73"" cy=""1004.77"" r=""892.6"" style=""fill: none; stroke: #2e3a4d; stroke-miterlimit: 10; stroke-width: 200px;""/>
                    <circle cx=""1007.35"" cy=""1003.55"" r=""526.15"" style=""fill: none; stroke: #2e3a4d; stroke-miterlimit: 10; stroke-width: 200px;""/>
                        <line x1=""991.71"" y1=""-15.05"" x2=""991.71"" y2=""801.04"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                            <line x1=""1225.61"" y1=""1013.66"" x2=""2043.43"" y2=""1013.66"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                <circle cx=""1000.71"" cy=""984.34"" r=""243.06"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                    <line x1=""1016.48"" y1=""986.81"" x2=""1714.73"" y2=""288.56"" style=""fill: none; stroke: #e9f2fa; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 172px;""/>
                                        <line x1=""1015.48"" y1=""986.81"" x2=""1713.73"" y2=""288.56"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 120px;""/>
                                            <g>
                                                <rect x=""1562.75"" y=""219.03"" width=""214.35"" height=""214.35"" transform=""translate(1257.75 1977.01) rotate(-87.03)"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                                    <polyline points=""1771.4 438.78 1782.49 224.72 1996.55 235.81"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                                        <polyline points=""1793.58 10.66 1782.49 224.72 1568.43 213.63"" style=""fill: #172d4d; stroke-width: 0px;""/>
                                                            </g>
                                                                <line x1=""0"" y1=""1005.85"" x2=""817.09"" y2=""1005.85"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                    <line x1=""987.71"" y1=""1221.81"" x2=""987.71"" y2=""2029.06"" style=""fill: none; stroke: #172d4d; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                        </svg>";

    const string learningOutcomeIconDeactivated =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
            <svg id=""uuid-347490b4-1d53-493d-bc86-b0ca80e39b63"" data-name=""R-LearningOutcome"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
                <circle cx=""1004.73"" cy=""1004.77"" r=""892.6"" style=""fill: none; stroke: rgb(179,179,179); stroke-miterlimit: 10; stroke-width: 200px;""/>
                    <circle cx=""1007.35"" cy=""1003.55"" r=""526.15"" style=""fill: none; stroke: rgb(179,179,179); stroke-miterlimit: 10; stroke-width: 200px;""/>
                        <line x1=""991.71"" y1=""-15.05"" x2=""991.71"" y2=""801.04"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                            <line x1=""1225.61"" y1=""1013.66"" x2=""2043.43"" y2=""1013.66"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                <circle cx=""1000.71"" cy=""984.34"" r=""243.06"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                    <line x1=""1016.48"" y1=""986.81"" x2=""1714.73"" y2=""288.56"" style=""fill: none; stroke: #e9f2fa; stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 172px;""/>
                                        <line x1=""1015.48"" y1=""986.81"" x2=""1713.73"" y2=""288.56"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 120px;""/>
                                            <g>
                                                <rect x=""1562.75"" y=""219.03"" width=""214.35"" height=""214.35"" transform=""translate(1257.75 1977.01) rotate(-87.03)"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                                    <polyline points=""1771.4 438.78 1782.49 224.72 1996.55 235.81"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                                        <polyline points=""1793.58 10.66 1782.49 224.72 1568.43 213.63"" style=""fill: rgb(179,179,179); stroke-width: 0px;""/>
                                                            </g>
                                                                <line x1=""0"" y1=""1005.85"" x2=""817.09"" y2=""1005.85"" style=""fill: none; stroke:rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                    <line x1=""987.71"" y1=""1221.81"" x2=""987.71"" y2=""2029.06"" style=""fill: none; stroke: rgb(179,179,179); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 50px;""/>
                                                                        </svg>";

    private void OpenFeedbackUX() => ShellWrapper.OpenPathAsync("https://www.soscisurvey.de/autorentoolevaluation_gesamt");

    private void OpenFeedbackBug() => ShellWrapper.OpenPathAsync("https://bugreport.projekt-adler.eu");

    private void OpenManual() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/manualauthoringautorentool.html");
    
    private void OpenManualSoftwareComponents() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/manualauthoringsoftwarekomponenten.html");
    
    private void OpenManualHandling() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/manualauthoringbedienung.html");
    
    private void OpenDidacticGuide() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/handreichung-didaktik-bd.html");
    
    private void OpenDidacticAdaptivityElementGuide() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/didaktik-autorentool-adaptivitaetselement-bd.html");
    
    private void OpenDidacticLearningOutcomeGuide() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/didaktik-autorentool-lernziele.html");
    
    private void OpenDidacticStoryElementGuide() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/didaktik-autorentool-game-design-elemente-bd.html");
    
    private string _icon = Help;

    const string Help =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
        <svg id=""Ebene_1"" data-name=""Ebene 1"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
            <defs>
                <style>
                    .cls-1 {
                        fill: #172d4d;
                    }

                        .cls-1, .cls-2 {
                            stroke-width: 0px;
                        }

                            .cls-2 {
                                fill: #e9f2fa;
                            }
    </style>
    </defs>
    <circle class=""cls-1"" cx=""1000"" cy=""1002"" r=""979""/>
    <path class=""cls-2"" d=""m544.25,614.03s161.83-383.69,652.2-240.32c2.7.79,5.38,1.68,8.02,2.66,193.68,72.11,231.78,155.81,262.57,236.47,1.08,2.83,2.06,5.7,2.92,8.6,110.36,376.9-370.36,480.48-375.65,635.86-.76,127.58-322.4,150.5-229.19-142.86,79.89-251.46,305.72-177.93,320.02-343.75,5.03-58.36,4.33-105.36-37.37-151.01-14.12-15.46-32.17-26.82-52.08-33.31-336.37-109.7-265.48,333.41-498.75,220.87-43.55-21.01-71.01-65.56-69.45-113.89,1.45-44.95,16.76-79.31,16.76-79.31Z""/>
    <ellipse class=""cls-2"" cx=""986.74"" cy=""1572.63"" rx=""133.38"" ry=""134.89""/>
    </svg>";

}