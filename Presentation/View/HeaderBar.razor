@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared.Exceptions
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using System.Text
@using Presentation.Components.Dialogues
@using System.Runtime.Serialization
@using Presentation.Components.Culture
@using Presentation.Components
@inject ISnackbar Snackbar

<header class=" grid grid-cols-3 grid-rows-1 w-full bg-buttonbgblue items-center">
    <div class="ml-1 flex justify-start items-center gap-2">
        <MudIconButton Class="p-1 text-adlerdarkblue" Icon="@Icons.Material.Filled.Home" Size="Size.Large" Title=@Localizer["LearningWorld.Home.Hover"] @onclick="OnClickMyLearningWorldsOverview"></MudIconButton>
        <MudDivider Vertical="true" FlexItem="true"/>
        <MudIconButton Class="p-1 text-adlerdarkblue" Icon="@Icons.Material.Filled.Save" Title=@Localizer["LearningWorld.Save.Hover"] OnClick="TrySave"></MudIconButton>
        <div>
            <MudIconButton Class="p-1 undo-button" Icon="@Icons.Material.Filled.Undo" Disabled="!CanUndo"
                           Title=@Localizer["Functionality.Button.Undo.Hover"] OnClick="OnClickUndo">
            </MudIconButton>
            <MudIconButton Class="p-1 redo-button" Icon="@Icons.Material.Filled.Redo" Disabled="!CanRedo"
                           Title=@Localizer["Functionality.Button.Redo.Hover"] OnClick="OnClickRedo">
            </MudIconButton>
        </div>
        <button @onclick="@ExportLearningWorld" class="btn-standard p-2 bg-adlergold-400 hover:bg-adlergold-600 hover:text-adlerdarkblue disabled:bg-adlerbggradientto" title=@Localizer["3DWorld.Generate.Hover"] disabled="@(SelectedViewModelsProvider.LearningWorld == null)">
            <MudIcon Icon="@Icons.Material.Filled.Upload"></MudIcon>
            <p class="pl-1 font-bold uppercase">@Localizer["3DWorld.Generate.Text"]</p>
        </button>

        <MudPopover Open="@_popoverOpen" Fixed="false" Class="mt-12 ml-20 w-96 bg-adlerblue-600">
            <div class="flex flex-row">
                <p class="text-center text-lg pl-6 pt-6 text-white">@Localizer["MudPopover.Feedback.Survey.Text"]</p>
                <Button class="flex-none w-5 h-5 text-adlergrey-200 font-bold text-lg hover:text-white" @onclick="TogglePopover" Icon="@Icons.Material.Filled.Close" title=@Localizer["Functionality.Button.Close.Hover"]>X</Button>
            </div>
            <div class="flex justify-center items-center pb-6 pt-1">
                <a href="https://www.soscisurvey.de/autorentoolevaluation_gesamt" target="_blank" title=@Localizer["MudPopover.Feedback.Final.Hover"] class="w-7/12 btn-standard flex flex-row gap-2 justify-center items-center">
                    <img class="w-6 h-6 drop-shadow" src="/CustomIcons/feedback-icon-without-typo-nobg.png" alt="feedback-icon"/>
                    <p class="uppercase">@Localizer["MudPopover.Feedback.Final.Text"]</p>
                </a>
            </div>
        </MudPopover>

    </div>
    @if (SelectedViewModelsProvider.LearningWorld?.Name == null)
    {
        <div class="flex justify-center items-center gap-2">
            <img class="w-10 drop-shadow" src="/CustomIcons/autorentool-logo.png" alt="authoringtool-logo"/>
            <h1 class="font-bold text-lg">@Localizer["AuthoringTool.Text"] @Localizer["AuthoringTool.Version"]</h1>
        </div>
    }
    @if (SelectedViewModelsProvider.LearningWorld?.Name != null)
    {
        <div class="flex justify-center items-center gap-2">
            <img class="w-8 drop-shadow opacity-50" src="CustomIcons/world-icon-nobg.png" alt="learningworld">
            <p class="font-bold text-lg truncate hover:text-clip"> @SelectedViewModelsProvider.LearningWorld?.Name </p>
        </div>
    }

    <div class="flex justify-end items-center gap-2 border-solid">
        <MudMenu ActivationEvent="MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <ActivatorContent>
                <MudButton Class="btn-standard bg-adlerblue-600 test-base text-white font-semibold">Feedback</MudButton>
            </ActivatorContent>
            <ChildContent>
                <div class="w-64">

                    @if (SelectedViewModelsProvider.LearningWorld?.Name == null)
                    {
                        <a href="https://www.soscisurvey.de/autorentoolevaluationlernwelt/" target="_blank" title=@Localizer["Feedback.Button.UX.Hover"]>
                            <div class="flex flex-row items-center gap-4">
                                <img class="w-8 h-6 drop-shadow pl-2" src="/CustomIcons/feedback-icon-without-typo-nobg-adlerdarkblue.png" alt="feedback-icon"/>
                                <MudMenuItem Class="text-adlerdarkblue flex justify-center px-0">@Localizer["Feedback.MenuItem.UX.Text"]</MudMenuItem>
                            </div>
                        </a>
                    }
                    else
                    {
                        <a href="https://www.soscisurvey.de/autorentoolevaluationlernraum/" target="_blank" title=@Localizer["Feedback.Button.UX.Hover"]>
                            <div class="flex flex-row items-center gap-4">
                                <img class="w-8 h-6 drop-shadow pl-2" src="/CustomIcons/feedback-icon-without-typo-nobg-adlerdarkblue.png" alt="feedback-icon"/>
                                <MudMenuItem Class="text-adlerdarkblue flex justify-center px-0">@Localizer["Feedback.MenuItem.UX.Text"]</MudMenuItem>
                            </div>
                        </a>
                    }

                    <a href="https://bugreport.projekt-adler.eu" target="_blank" title=@Localizer["Feedback.Button.Technical.Hover"]>
                        <div class="flex flex-row justify-start items-center gap-4">
                            <img class="w-8 h-6 drop-shadow pl-2" src="/CustomIcons/bug-icon-nobg-adlerdarkblue.png" alt="debug-icon"/>
                            <MudMenuItem Class="text-adlerdarkblue flex justify-center px-0">@Localizer["Feedback.MenuItem.Technical.Text"]</MudMenuItem>
                        </div>
                    </a>

                    @*<MudDivider></MudDivider>

                <a href="https://www.soscisurvey.de/autorentoolevaluation_gesamt" target="_blank" title="Final feedback - Opens new web page">
                    <div class="flex flex-row justify-start items-center gap-4">
                        <img class="opacity-60 w-9 h-7 drop-shadow pl-2" src="/CustomIcons/final-feedback-icon-adlerdarkblue-nobg.png" alt="final-feedback-icon"/>
                        <MudMenuItem Class="text-adlerdarkblue flex justify-center px-0">Final feedback</MudMenuItem>
                    </div>
                </a>*@
                </div>
            </ChildContent>
        </MudMenu>

        <CultureSelector/>
        <LmsLoginButton/>
        @if (PresentationLogic.RunningElectron)
        {
            <CloseAppButton/>
        }
    </div>
</header>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal NavigationManager NavManager { get; private init; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<HeaderBar> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IMediator Mediator { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    IErrorService ErrorService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILogger<HeaderBar> Logger { get; set; }


    private bool _popoverOpen;

    private void TogglePopover()
    {
        _popoverOpen = !_popoverOpen;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PresentationLogic.OnCommandUndoRedoOrExecute += async (_, _) => await InvokeAsync(StateHasChanged);
        SelectedViewModelsProvider.PropertyChanged += OnSelectedViewModelsProviderPropertyChanged;
    }

    private void OnSelectedViewModelsProviderPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnClickMyLearningWorldsOverview()
    {
        SelectedViewModelsProvider.SetLearningWorld(null, null);
        SelectedViewModelsProvider.SetLearningObjectInPathWay(null, null);
        SelectedViewModelsProvider.SetLearningElement(null, null);
        Mediator.CloseBothSides();
        NavManager.NavigateTo("/MyLearningWorldsOverview");
    }

    private bool CanUndo => PresentationLogic.CanUndo;
    private bool CanRedo => PresentationLogic.CanRedo;

    private async void ExportLearningWorld()
    {
        var world = SelectedViewModelsProvider.LearningWorld;
        if (world == null) return;
        if (!IsLearningWorldValid(world)) return;
        //check if lms is connected here before generating the backup just to save time
        if (!await PresentationLogic.IsLmsConnected())
        {
            await ShowNotLoggedInDialog();
            return;
        }
        
        //present "Upload/Cancel" dialog
        var parameters = new DialogParameters
        {
            { "SubmitButtonText", Localizer["UploadLearningWorld.SubmitButtonText"].ToString() },
            { "SubmitButtonColor", Color.Success },
            {
                "DialogText",
                Localizer["Dialog.UploadLearningWorld.DialogText", world.Name].ToString()
            },
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
        };
        var dialog =
            await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["DialogService.UploadLearningWorld.Dialog"].ToString(), parameters,
                options);
        var result = await dialog.Result;

        //if not cancelled, upload LearningWorld
        if (result.Canceled) return;
        
        //present progress dialog
        var cancellationTokenSource = new CancellationTokenSource();
        var progress = new Progress<int>();
        options = new DialogOptions
        {
            CloseButton = false,
            CloseOnEscapeKey = false,
            DisableBackdropClick = true,
        };
        parameters = new DialogParameters
        {
            { nameof(UploadProgressDialog.Progress), progress },
            { nameof(UploadProgressDialog.CancellationTokenSource), cancellationTokenSource }
        };

        var dialogReference = await DialogService.ShowAsync<UploadProgressDialog>("Uploading world...", parameters, options);

        try
        {
            await PresentationLogic.ConstructAndUploadBackupAsync(world, progress, cancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            Snackbar.Add(Localizer["ExportCanceled.Snackbar.Message"], Severity.Warning);
            return;
        }
        catch (GeneratorException e)
        {
            ErrorService.SetError("An Error has occured during creation of a Backup File", e.Message);
            return;
        }
        catch (Exception ex)
        {
            ErrorService.SetError(ex);
        }
        finally
        {
            dialogReference.Close();
        }
        
        Snackbar.Add(Localizer["Export.SnackBar.Message"], Severity.Success);
        _popoverOpen = true;
        StateHasChanged();
    }

    private bool IsLearningWorldValid(ILearningWorldViewModel world)
    {
        var errorString = new StringBuilder();
        errorString.Append("<ul>");

        if (world.LearningSpaces.Count == 0)
        {
            errorString.AppendLine($"<li> {Localizer["ErrorString.Missing.LearningSpace.Message"]} </li>");
        }

        foreach (var space in world.LearningSpaces)
        {
            if (!space.ContainedLearningElements.Any())
            {
                errorString.AppendLine($"<li> {Localizer["ErrorString.Missing.LearningElements.Message", space.Name]} </li>");
            }
            if (space.Points < space.RequiredPoints)
            {
                errorString.AppendLine($"<li> {Localizer["ErrorString.Insufficient.Points.Message", space.Name]} </li>");
            }
        }

        if (errorString.Length == "<ul>".Length) return true;

        errorString.Append("</ul>");

        Logger.LogError("LearningWorld is not valid: {ErrorString}", errorString);
        ErrorService.SetError(Localizer["Exception.InvalidLearningWorld.Message"], errorString.ToString());
        return false;
    }

    private async Task ShowNotLoggedInDialog()
    {
    //present Info dialog
        var parameters = new DialogParameters
        {
            { "OkButtonText", Localizer["ShowNotLoggedInDialog.OkButtonText"].ToString() },
            { "OkButtonColor", Color.Primary },
            {
                "DialogText",
                Localizer["Dialog.NotLoggedIn.Message"].ToString()
            },
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            DisableBackdropClick = false,
        };
        await DialogService.ShowAsync<GenericInfoDialog>(Localizer["DialogService.NotLoggedIn.Title"].ToString(), parameters, options);
    }

    private void OnClickUndo()
    {
        try
        {
            PresentationLogic.UndoCommand();
        }
        catch (UndoException e)
        {
            ErrorService.SetError("An error occurred while attempting to undo the last action", e.Message);
        }
    }

    private void OnClickRedo()
    {
        try
        {
            PresentationLogic.RedoCommand();
        }
        catch (RedoException e)
        {
            ErrorService.SetError("An error occurred while attempting to redo the last undone action", e.Message);
        }
    }

    private void TrySave()
    {
        if (SelectedViewModelsProvider.LearningWorld is null) return;
        try
        {
            PresentationLogic.SaveLearningWorld(SelectedViewModelsProvider.LearningWorld);
        }
        catch (SerializationException e)
        {
            ErrorService.SetError("An error occurred while attempting to save the LearningWorld", e.Message);
        }
        catch (InvalidOperationException e)
        {
            ErrorService.SetError("An error occurred while attempting to save the LearningWorld", e.Message);
        }
        catch (OperationCanceledException)
        {
            Snackbar.Add("Save LearningWorld canceled", Severity.Warning);
        }
    }

}