@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Microsoft.Extensions.Localization
@using Presentation.Components
@using Presentation.Components.Culture
@inject ISnackbar Snackbar
<header class="mb-1 grid grid-cols-3 grid-rows-1 w-full bg-buttonbgblue items-center">
    <div class="ml-1 flex justify-start items-center gap-2">
        <LmsLoginButton/>
        <MudIconButton Class="p-1 text-adlerdarkblue" Icon="@Icons.Material.Filled.Home" Size="Size.Large" Title="My Learning Worlds" @onclick="OnClickMyLearningWorldsOverview"></MudIconButton>
        <MudDivider Vertical="true" FlexItem="true"/>
        <MudIconButton Class="p-1 text-adlerdarkblue" Icon="@Icons.Material.Filled.Save" Title="Save Learning World" OnClick="TrySaveAsync"></MudIconButton>
        <MudIconButton Class="p-1" Icon="@Icons.Material.Filled.Upload" Title="Export Learning World" OnClick="ExportLearningWorld"></MudIconButton>
        <div>
            <MudIconButton Class="p-1" Icon="@Icons.Material.Filled.Undo" Disabled="!CanUndo" Title="Undo" OnClick="OnClickUndo"></MudIconButton>
            <MudIconButton Class="p-1" Icon="@Icons.Material.Filled.Redo" Disabled="!CanRedo" Title="Redo" OnClick="OnClickRedo"></MudIconButton>
        </div>
    </div>
    <div class="flex justify-center items-center gap-2">
        <img class="w-10 drop-shadow" src="/CustomIcons/autorentool-logo.png" alt="authoringtool-logo"/>
        <h1 class="font-bold text-lg">@Localizer["AuthoringTool.Text"] @Localizer["AuthoringTool.Version"]</h1>
    </div>
    <div class="flex justify-end items-center gap-2 border-solid ">
        <div class="flex flex-col justify-center">
            <p class="text-xs font-bold text-center">
                Feedback
            </p>
            <div class="flex flex-row justify-around">
                <a href="https://bugreport.projekt-adler.eu" target="_blank" title="Bugreport - Öffnet neue Webseite">
                    <button class="btn-standard m-0 p-1 h-5">
                        <img class="w-4 h-4 drop-shadow" src="/CustomIcons/bug-icon-nobg.png" alt="debug-icon"/>
                    </button>
                </a>
                <a href="https://userfeedback.projekt-adler.eu" target="_blank" title="Nutzerfeedback - Öffnet neue Webseite">
                    <button class="btn-standard m-0 p-1 h-5">
                        <img class="w-4 h-4 drop-shadow" src="/CustomIcons/feedback-icon-without-typo-nobg.png" alt="feedback-icon"/>
                    </button>
                </a>
            </div>
        </div>
        <CultureSelector/>
        @if (PresentationLogic?.RunningElectron == true)
        {
            <CloseAppButton/>
        }
    </div>
</header>

@code {

    [Inject]
    public IPresentationLogic PresentationLogic { get; set; }

    [Inject]
    internal NavigationManager NavManager { get; private init; }

    [Inject]
    private IStringLocalizer<HeaderBar> Localizer { get; set; }

    [Inject]
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject]
    private IMediator Mediator { get; set; }

    private string _filepath = "";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PresentationLogic.OnCommandUndoRedoOrExecute += async (_, args) => await InvokeAsync(StateHasChanged);
    }

    private void OnClickMyLearningWorldsOverview()
    {
        SelectedViewModelsProvider.SetLearningWorld(null, null);
        SelectedViewModelsProvider.SetLearningObjectInPathWay(null, null);
        SelectedViewModelsProvider.SetLearningElement(null, null);
        Mediator.CloseBothSides();
        NavManager.NavigateTo("/MyLearningWorldsOverview");
    }

    private bool CanUndo => PresentationLogic.CanUndo;
    private bool CanRedo => PresentationLogic.CanRedo;

    private void OnClickUndo()
    {
        PresentationLogic.UndoCommand();
    }

    private async void ExportLearningWorld()
    {
    //Create XMl-files, Overwrite Encoding to UTF-8 and Create Backup-File
        if (SelectedViewModelsProvider.LearningWorld == null) return;
        try
        {
            _filepath = await PresentationLogic.ConstructBackupAsync(SelectedViewModelsProvider.LearningWorld);
        }
        catch (OperationCanceledException)
        {
            Snackbar.Add("Exporting LearningWorld was canceled", Severity.Warning);
        }
        StateHasChanged();
        Snackbar.Add("LearningWorld exported to " + _filepath, Severity.Success);
    }

    private void OnClickRedo()
    {
        PresentationLogic.RedoCommand();
    }

    private async Task TrySaveAsync()
    {
        if (SelectedViewModelsProvider.LearningWorld is null) return;
        await PresentationLogic.SaveLearningWorldAsync(SelectedViewModelsProvider.LearningWorld);
    }

}