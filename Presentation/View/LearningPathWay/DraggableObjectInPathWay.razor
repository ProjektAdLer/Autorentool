@using System.Diagnostics.CodeAnalysis
@using Presentation.Components
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
<Draggable LearningObject="ObjectInPathWay" OnClicked="@OnClickedDraggable" OnDoubleClicked="@OnDoubleClickedDraggable"
           OnDragged="@OnDraggedDraggable"
           @bind-X="@ObjectInPathWay.PositionX" @bind-Y="@ObjectInPathWay.PositionY">
    @if (ObjectInPathWay == PositioningService.LearningWorldVm?.OnHoveredObjectInPathWay)
    {
        @((MarkupString)OnHoveredObjectShape)
    }
    @((MarkupString)String.Format(ObjectShape, ObjectStyle, ObjectName))
    <Clickable OnClickedParam="ObjectInPathWay" OnClicked="@OnClickedDeletePath">
        @if (ObjectInPathWay.InBoundObjects.Any())
        {
            @((MarkupString)DeletePathButtonShape)
        }
    </Clickable>
    <Clickable OnClickedParam="ObjectInPathWay" OnClicked="@OnClickedDeleteObject">
        @((MarkupString)DeleteObjectButtonShape)
    </Clickable>
    <title>@Title</title>
</Draggable>

<PullablePath LearningObject="@ObjectInPathWay" X1=@ObjectInPathWay.OutputConnectionX
              Y1="@ObjectInPathWay.OutputConnectionY"
              PositioningSrv="@PositioningService">
</PullablePath>

@ChildContent


@code {

    [Parameter] public RenderFragment? ChildContent { get; set; }

    // Overwrite nullability warning below because we check in OnParametersSet -n.stich
    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public IObjectInPathWayViewModel ObjectInPathWay { get; set; } = null!;

    [Parameter, EditorRequired] public EventCallback<IObjectInPathWayViewModel> OnClickedDraggable { get; set; }

    [Parameter] public EventCallback<IObjectInPathWayViewModel> OnDoubleClickedDraggable { get; set; }

    [Parameter, EditorRequired] public DraggedEventArgs<IObjectInPathWayViewModel>.DraggedEventHandler? OnDraggedDraggable { get; set; }

    [Parameter, EditorRequired] public EventCallback<IObjectInPathWayViewModel> OnClickedDeletePath { get; set; }

    [Parameter, EditorRequired] public EventCallback<IObjectInPathWayViewModel> OnClickedDeleteObject { get; set; }

    // Overwrite nullability warning below because service may never be null -n.stich
    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningWorldPresenter PositioningService { get; set; } = null!;

    [Inject] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider? SelectedObjectsService { get; set; }

    protected abstract string Text { get; }

    protected abstract string Title { get; }

    protected abstract string ObjectName { get; }

    protected abstract string OnHoveredObjectShape { get; }

    protected abstract string ObjectShape { get; }

    protected abstract string ObjectStyleWhenSelected { get; }

    protected abstract string ObjectStyleWhenNotSelected { get; }

    private string ObjectStyle => SelectedObjectsService?.LearningObjectInPathWay == ObjectInPathWay ? ObjectStyleWhenSelected : ObjectStyleWhenNotSelected;

    protected abstract string DeletePathButtonShape { get; }

    protected abstract string DeleteObjectButtonShape { get; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (ObjectInPathWay is null)
        {
            throw new ArgumentNullException(nameof(ObjectInPathWay));
        }
    }

}