@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.ContentFiles
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Shared.H5P

@inject NavigationManager Navigation

@switch (FileContentVm.H5PState)
{
    case H5PContentState.NotValidated:
        <MudTooltip Text="H5P-Validator öffnen">
            <div class="flex flex-row items-center justify-start gap-1">
                <MudIconButton
                    Icon="@Icons.Material.Filled.HelpOutline"
                    Size="Size.Small"
                    Color="Color.Default"
                    OnClick="() => ShowH5PContent()"
                    Class="p-0"/>
                <p class="text-xs text-adlergrey">ungeprüft</p>
            </div>
        </MudTooltip>
    break;
    case H5PContentState.Primitive:
    case H5PContentState.Completable:
        <MudTooltip Text="H5P-Validator öffnen">
            <div class="flex flex-row items-center justify-start gap-1">
            <MudIconButton
                Icon="@Icons.Material.Filled.TaskAlt"
                Size="Size.Small"
                Color="Color.Success"
                OnClick="() => ShowH5PContent()"
                Class="p-0"/>
                <p class="text-xs text-adlergrey">nutzbar</p>
            </div>
        </MudTooltip>
        break;
    case H5PContentState.NotUsable:
        <MudTooltip Text="H5P-Validator öffnen">
            <div class="flex flex-row items-center justify-start gap-1">
                <MudIconButton 
                    Icon="@Icons.Material.Filled.Block"
                    Size="Size.Small"
                    Color="Color.Error"
                    OnClick="() => ShowH5PContent()"
                    Class="p-0"/>
                <p class="text-xs text-adlergrey" style="white-space: nowrap;">nicht nutzbar</p>
            </div>
        </MudTooltip>
        break;
}


@code {

    [Parameter, Required] public required IFileContentViewModel FileContentVm { get; set; }
    
    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal  IH5PPlayerPluginManager H5PPlayerPluginManager { get; set; }
    
    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }
    private async Task ShowH5PContent()
    {
        if (FileContentVm.Type == "h5p")
        {
            var startH5PPlayerTO = new StartH5PPlayerTO();
            startH5PPlayerTO.FileContentVm = FileContentVm;
            startH5PPlayerTO.NavigationManager = Navigation;
            await H5PPlayerPluginManager.StartH5pPlayerToValidateAsync(startH5PPlayerTO);
        }
    }
}
