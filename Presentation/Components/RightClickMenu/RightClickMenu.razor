@implements IDisposable
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningPathway
@typeparam T

<g transform="translate(@_x, @_y)" cursor="@_cursor" id="rightClickMenu">
    @foreach (var (item, position) in MenuEntries.Select((item, position) => (item, position * _heightOfMenuItem)))
    {   
            <g transform="translate(0, @position)">
            <rect x="0" y="0" rx="5" ry="5" width="@_widthOfMenuItem" height="@(MenuEntries.Count * _heightOfMenuItem)" style="fill:rgba(251,251,251,0.1)/*#b32121*/; "/>
            </g>
            <g transform="translate(0, @position)">
            <Clickable OnClickedParam="LearningObject" OnClicked="(T? _) => { item.Action.Invoke(); OnClose.InvokeAsync(); }">
            <rect filter="url(#f1)" rx="5" ry="5" x="0" y="0" width="@_widthOfMenuItem" height="@_heightOfMenuItem" style="fill:white/*rgba(251,251,251,0.1)*/; stroke:rgba(251,251,251,0.1); stroke-width:2;"/>
            <defs>
                <filter id="f1" x="0" y="0" width="200%" height="200%">
                  <feOffset result="offOut" in="SourceAlpha" dx="-1" dy="-1" />
                  <feGaussianBlur result="blurOut" in="offOut" stdDeviation="4" />
                  <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />
                </filter>
            </defs>
                <text x="@(_widthOfMenuItem / 5)" y="35" text-anchor="start" font-size="@_fontSizeOfMenuItem" style="fill:rgb(23,45,76);" font-family="Roboto, Verdana">@item.DisplayedText</text>
            </Clickable>
        </g>
    }

    <g transform="translate(0, @(MenuEntries.Count * _heightOfMenuItem))">
        <Clickable OnClickedParam="LearningObject" OnClicked="(T? _) => OnClose.InvokeAsync()">
            <rect class="rect-hover" filter="url(#f1)" x="0" y="0" rx="5" ry="5" width="@_widthOfMenuItem" height="@_heightOfMenuItem" style="fill:white/*rgba(251,251,251,0.1)*/; stroke:rgba(251,251,251,0.1); stroke-width:2;"/>
                <defs>
                    <filter id="f1" x="0" y="0" width="200%" height="200%">
                      <feOffset result="offOut" in="SourceAlpha" dx="-1" dy="-1" />
                      <feGaussianBlur result="blurOut" in="offOut" stdDeviation="4" />
                      <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />
                    </filter>
                </defs>
            <text x="@(_widthOfMenuItem / 5)" y="35" text-anchor="start" font-size="@_fontSizeOfMenuItem" font-family="Roboto, Verdana" style="fill:rgb(23,45,76);">Close</text>
        </Clickable>
    </g>
</g>


@code {

    [Parameter, EditorRequired]
    public T? LearningObject { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public List<RightClickMenuEntry> MenuEntries { get; set; } = new();

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILogger<RightClickMenu<T>> Logger { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<RightClickMenu<T>> Localizer { get; set; }

    private double _x;
    private double _y;

    private string _cursor = "grab";

    private readonly int _heightOfMenuItem = 52;
    private readonly int _widthOfMenuItem = 78;
    private readonly int _fontSizeOfMenuItem = 16;

    protected override void OnParametersSet()
    {
        if (LearningObject == null)
        {
            throw new ArgumentNullException(nameof(LearningObject));
        }
        switch (LearningObject)
        {
            case ILearningSpaceViewModel ls:
                _x = ls.PositionX + 65;
                _y = ls.PositionY + 3;
                break;
            case ILearningElementViewModel le:
                _x = le.PositionX + 100;
                _y = le.PositionY;
                break;
            case PathWayConditionViewModel pc:
                _x = pc.PositionX + 77;
                _y = pc.PositionY;
                break;
            default:
                throw new ArgumentException(Localizer["RightClickMenu.OnParametersSet.ArgumentException.Message"], nameof(LearningObject));
        }
    }

    public void Dispose()
    {
    }

}