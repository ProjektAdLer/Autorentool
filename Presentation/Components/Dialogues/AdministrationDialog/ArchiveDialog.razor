@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
@inject ISnackbar Snackbar
<div class="flex flex-col w-full gap-2">
    <p class="text-adlerheaderblue text-lg font-bold py-2 text-center cursor-default">
        @Localizer["DialogContent.LearningWorldArchive.Title"]
    </p>
    <div class="flex flex-row gap-2 justify-center items-center mr-2">
        <!-- ZIP-Export -->
        <div class="flex flex-col items-center justify-between border rounded-xl p-3 shadow-md bg-white w-56 h-52">
            <p class="text-sm 2xl:text-base font-bold text-center mb-2">@Localizer["ArchiveDialog.ZIP.Title"]</p>
            <p class="text-sm text-center mb-4 text-adlertextgrey">@Localizer["ArchiveDialog.ZIP.Text"]
                <MudTooltip Placement="Placement.Right"
                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                    <TooltipContent>
                        <MudText Class="text-xs">@Localizer["ArchiveDialog.ZIP.Tooltip.Text"]</MudText>
                    </TooltipContent>
                    <ChildContent>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                 Class="text-adlergrey-300 hover:text-adlerdarkblue">
                        </MudIcon>
                    </ChildContent>
                </MudTooltip>
            </p>
            <MudButton Class="btn-standard w-full disabled:bg-adlerbggradientto"
                       OnClick="ExportLearningWorldToArchiveAsync"
                       title="@Localizer["ExportArchive.Hover"]"
                       Disabled="@(SelectedViewModelsProvider.LearningWorld == null)">
                <MudIcon Icon="@Icons.Material.Filled.Unarchive" Title="@Localizer["ExportArchive.Hover"]" Size="Size.Small"></MudIcon>
                <span class="pl-2 text-xs uppercase">@Localizer["DialogContent.LearningWorldArchive.Button"]</span>
            </MudButton>
        </div>
        
        <MudDivider DividerType="DividerType.FullWidth" Style="border-color: rgb(204,204,204)" Vertical="true" Light="true"></MudDivider>

        <!-- MBZ-Export -->
        <div class="flex flex-col items-center justify-between border rounded-xl p-3 shadow-md bg-white w-56 h-52">
            <p class="text-sm 2xl:text-base font-bold text-center mb-2">@Localizer["ArchiveDialog.MBZ.Title"]</p>
            <p class="text-sm text-center mb-4 text-adlertextgrey">@Localizer["ArchiveDialog.MBZ.Text"]
                <MudTooltip Placement="Placement.Right"
                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                    <TooltipContent>
                        <MudText Class="text-xs">@Localizer["ArchiveDialog.Tooltip.Text"]</MudText>
                    </TooltipContent>
                    <ChildContent>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                 Class="text-adlergrey-300 hover:text-adlerdarkblue">
                        </MudIcon>
                    </ChildContent>
                </MudTooltip>
            </p>
            <MudButton Class="btn-standard w-full disabled:bg-adlerbggradientto"
                       OnClick="ExportLearningWorldToMoodleAsync"
                       title="Exportiert die Lernwelt im Moodle-kompatiblen Format"
                       Disabled="@(SelectedViewModelsProvider.LearningWorld == null)">
                <MudIcon Icon="@Icons.Material.Filled.Unarchive" Size="Size.Small"></MudIcon>
                <span class="pl-2 text-xs uppercase">@Localizer["ArchiveDialog.MBZ.Button"]</span>
            </MudButton>
        </div>
    </div>
</div>


@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<ArchiveDialog> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILogger<ArchiveDialog> Logger { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] internal IErrorService ErrorService { get; set; }

    private async Task ExportLearningWorldToArchiveAsync()
    {
        if (SelectedViewModelsProvider.LearningWorld is null) return;
        if (IsLearningWorldValidForExportToArchive(SelectedViewModelsProvider.LearningWorld))
        {
            await PresentationLogic.ExportLearningWorldToArchiveAsync(SelectedViewModelsProvider.LearningWorld!);
            Snackbar.Add(@Localizer["LmsLoginDialog.ArchiveLearningWorld.Success.Snackbar"], Severity.Success);
        }
    }

    private bool IsLearningWorldValidForExportToArchive(ILearningWorldViewModel? learningWorld)
    {
        if (learningWorld is null) return false;

        var errors = new List<string>();

        foreach (var space in learningWorld.LearningSpaces)
        {
            foreach (var element in space.ContainedLearningElements)
            {
                if (element.LearningContent is not (IFileContentViewModel or ILinkContentViewModel))
                    continue;

                if (!PresentationLogic.GetAllContent().Contains(element.LearningContent))
                {
                    errors.Add($"<li> {Localizer["ErrorString.Missing.LearningContent.Message", element.Name]} </li>");
                }
            }
        }

        foreach (var (adaptivityContent, learningElement) in learningWorld.AllLearningElements
                     .Where(ele => ele.LearningContent is IAdaptivityContentViewModel)
                     .Select(ele => ((IAdaptivityContentViewModel)ele.LearningContent, ele)))
        {
            if (TaskReferencesNonExistentElement(adaptivityContent, learningWorld))
            {
                errors.Add($"<li> {Localizer["ErrorString.TaskReferencesNonexistantElement.Message", learningElement.Name]} </li>");
            }

            if (TaskReferencesNonExistentContent(adaptivityContent, learningWorld))
            {
                errors.Add($"<li> {Localizer["ErrorString.TaskReferencesNonexistantContent.Message", learningElement.Name]} </li>");
            }
        }

        if (!errors.Any()) return true;

        var errorString = $"<ul>{string.Join(Environment.NewLine, errors)}</ul>";

        Logger.LogError("LearningWorld is not valid: {ErrorString}", errorString);
        ErrorService.SetError(Localizer["Exception.InvalidLearningWorld.Message"], errorString.ToString());
        return false;
    }

    private static bool TaskReferencesNonExistentElement(IAdaptivityContentViewModel adaptivityContent, ILearningWorldViewModel world)
    {
        var adaptivityContentReferencedIds = GetElementIdsContentReferences(adaptivityContent);
        return adaptivityContentReferencedIds.Any(id => world.AllLearningElements.All(ele => ele.Id != id));
    }

    private bool TaskReferencesNonExistentContent(IAdaptivityContentViewModel adaptivityContent, ILearningWorldViewModel world)
    {
        var contentReferencedByAdaptivityContent = GetContentReferencesByAdaptivityContent(adaptivityContent);
        return contentReferencedByAdaptivityContent.Any(adaContent => !PresentationLogic.GetAllContent().Contains(adaContent));
    }

    private static IEnumerable<Guid> GetElementIdsContentReferences(IAdaptivityContentViewModel adaptivityContent)
    {
        return adaptivityContent.Tasks
            .SelectMany(task => task.Questions
                .SelectMany(question => question.Rules
                    .Select(rule => rule.Action)
                    .Where(action => action is ElementReferenceActionViewModel)
                    .Cast<ElementReferenceActionViewModel>()
                    .Select(action => action.ElementId)));
    }

    private static IEnumerable<ILearningContentViewModel> GetContentReferencesByAdaptivityContent(IAdaptivityContentViewModel adaptivityContent)
    {
        return adaptivityContent.Tasks
            .SelectMany(task => task.Questions
                .SelectMany(question => question.Rules
                    .Select(rule => rule.Action)
                    .Where(action => action is ContentReferenceActionViewModel)
                    .Cast<ContentReferenceActionViewModel>()
                    .Select(action => action.Content)));
    }

    private Task ExportLearningWorldToMoodleAsync()
    {
        return Task.CompletedTask;
    }

}