@using System.Diagnostics.CodeAnalysis
@using BusinessLogic.ErrorManagement.BackendAccess
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared.Configuration
@using Shared.Exceptions
@using Size = MudBlazor.Size
@inject ISnackbar Snackbar

@if (_isLmsConnected)
{
    <article class="flex flex-col gap-2 w-full px-4">
        <section class="flex flex-col gap-2 w-full">
            <div class="gap-1 py-2 flex flex-row justify-center items-center">
                <MudText
                    Class="cursor-default text-lg font-bold text-adlerheaderblue">
                    @Localizer["Header.Moodle.Text"]
                </MudText>
                <MudTooltip Placement="Placement.Right"
                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                    <TooltipContent>
                        <MudText Class="text-xs">@Localizer["DialogContent.LoggedIn.Info"]</MudText>
                    </TooltipContent>
                    <ChildContent>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                 Class="text-adlergrey-300 hover:text-adlerdarkblue">
                        </MudIcon>
                    </ChildContent>
                </MudTooltip>
            </div>

            <div class="logged-in-container flex flex-col justify-center gap-2 py-2">
                <div id="LmsLoginDialog.LoggedInContainer.Div" class="flex flex-row gap-1 justify-start items-center bg-adlergrey-100 rounded p-4">
                    <p id="LmsLoginDialog.LoggedInMessage.Text"
                       class="cursor-default text-sm text-adlergrey-700 w-28">@Localizer["DialogContent.LoggedIn.Message"]</p>
                    <p id="LmsLoginDialog.LoggedInUserName.Text"
                       class="cursor-default text-sm text-adlerblue-700">@(PresentationLogic.LoginName) (@BackendUrl)</p>
                </div>
                <MudButton Class="btn-standard mx-36" title=@Localizer["DialogContent.Button.Logout.Title"]
                           OnClick="Logout">
                    <MudIcon Icon="@Icons.Material.Filled.Logout"></MudIcon>
                    <MudText Class="px-2 uppercase font-bold">@Localizer["DialogContent.Button.Logout"]</MudText>
                </MudButton>
            </div>
        </section>

        <MudDivider DividerType="DividerType.FullWidth" Style="border-color: rgb(204,204,204)"></MudDivider>

        <section class="flex flex-col w-full h-[400px]">
            <div class="flex flex-row justify-center items-center gap-1 pb-2">
                <p class="cursor-default text-lg font-bold text-adlerheaderblue py-2">@Localizer["DialogContent.Delete.Title"]</p>
                <MudTooltip Placement="Placement.Right"
                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                    <TooltipContent>
                        <MudText
                            Class="cursor-default text-xs">
                            @((MarkupString)Localizer["LmsLoginDialog.Title.Tooltip"].ToString())
                        </MudText>
                    </TooltipContent>
                    <ChildContent>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                 Class="text-adlergrey-300 hover:text-adlerdarkblue">
                        </MudIcon>
                    </ChildContent>
                </MudTooltip>
            </div>

            <MudList T="LmsWorldViewModel" Class="border border-adlergrey-200 rounded">
                <MudText Class="cursor-default pl-4 font-bold">@Localizer["DialogContent.Delete.Subtitle"]</MudText>
                <div class="h-32 overflow-y-scroll">
                    @foreach (var lmsWorld in _lmsWorldList)
                    {
                        <MudListItem T="LmsWorldViewModel" Style="height: 48px" Class="py-0 cursor-default"
                                     Text="@lmsWorld.WorldName">
                            <div class="flex flex-row justify-between items-center">
                                <p class="text-base truncate">@lmsWorld.WorldName</p>
                                @if (lmsWorld == _deleteWorld)
                                {
                                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Color="Color.Info"/>
                                }
                                else
                                {
                                    <MudIconButton OnClick="() => DeleteLmsWorld(lmsWorld)"
                                                   Icon="@Icons.Material.Filled.Delete"
                                                   title="@Localizer["DialogContent.Delete.MoodleCourse"]"
                                                   Class="text-adlergrey-200 hover:text-adlerdarkblue-700">
                                    </MudIconButton>
                                }
                            </div>
                        </MudListItem>
                        <MudDivider DividerType="DividerType.FullWidth"></MudDivider>
                    }
                </div>
            </MudList>
        </section>
    </article>
}
else
{
    <section class="flex flex-col gap-2 px-4 w-full">
        <div class="gap-1 py-2 flex flex-row justify-center items-center">
            <MudText
                Class="cursor-default text-lg font-bold text-adlerheaderblue">
                @Localizer["Header.Moodle.Text"]
            </MudText>
            <MudTooltip Placement="Placement.Right"
                        Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                <TooltipContent>
                    <MudText Class="cursor-default text-xs">@Localizer["DialogContent.LoggedIn.Info"]</MudText>
                </TooltipContent>
                <ChildContent>
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                             Class="text-adlergrey-300 hover:text-adlerdarkblue">
                    </MudIcon>
                </ChildContent>
            </MudTooltip>
        </div>

        @if (_spinnerActive)
        {
            <div class="w-full h-full absolute bg-adlergrey-100 bg-opacity-25 z-40">
            </div>
            <MudProgressCircular Indeterminate="true" Class="z-40 m-auto absolute top-0 bottom-0 left-0 right-0"
                                 Color="Color.Info" Size="Size.Large"/>
        }

        <div class="flex flex-col">
            <MudForm>
                <div class="flex flex-col">
                    <MudTextField id="LmsLoginDialog.BackendUrl.TextField" @bind-Value="BackendUrl"
                                  Label=@Localizer["DialogContent.Field.BackendUrl"]
                                  Required="true"
                                  RequiredError="@Localizer["DialogContent.Field.BackendUrl.Required"]"/>
                    @if (_errorInvalidUrlMessage != "")
                    {
                        <MudText Color="Color.Error" Typo="Typo.subtitle2">@_errorInvalidUrlMessage</MudText>
                    }
                    <MudTextField id="LmsLoginDialog.Username.TextField" @bind-Value="Username"
                                  Label=@Localizer["DialogContent.Field.Username"]
                                  Required="true"
                                  RequiredError="@Localizer["DialogContent.Field.Username.Required"]"/>
                    <MudTextField id="LmsLoginDialog.Password.TextField" @bind-Value="_password"
                                  Label=@Localizer["DialogContent.Field.Password"]
                                  OnKeyUp="OnKeyPress"
                                  InputType=@PasswordInputType Adornment="Adornment.End"
                                  AdornmentIcon=@ShowPasswordIcon
                                  OnAdornmentClick="() => _isPasswordVisible = !_isPasswordVisible"
                                  AdornmentAriaLabel=@Localizer["DialogContent.Button.ShowPassword"] Required="true"
                                  RequiredError="@Localizer["DialogContent.Field.Password.Required"]"/>
                    @if (_showErrorInvalidCredentials)
                    {
                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                            @Localizer["DialogContent.Error.WrongUserOrPassword"]
                        </MudText>
                    }
                    @if (_showErrorApiUnreachable)
                    {
                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                            @Localizer["DialogContent.Error.APIUnreachable"]
                        </MudText>
                    }
                    @if (_showErrorTokenInvalid)
                    {
                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                            @Localizer["DialogContent.Error.TokenInvalid"]
                        </MudText>
                    }
                    @if (_showErrorMoodleUnreachable)
                    {
                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                            @Localizer["DialogContent.Error.MoodleUnreachable"]
                        </MudText>
                    }
                </div>
                <div class="flex flex-col">
                    <!--TODO: Password reset link and API link should be set in the config - we need a proper configuration dialog -->
                    <a href="https://moodle.projekt-adler.eu/login/forgot_password.php" target="_blank"
                       title=@Localizer["DialogContent.Button.ForgotPassword.Title"] class="pb-2">
                        @Localizer["DialogContent.Button.ForgotPassword"]
                    </a>
                    <MudButton id="LmsLoginDialog.SubmitForm.Button" Class="mt-6 btn-standard mx-36"
                               OnClick="SubmitForm"
                               title="@Localizer["DialogContent.Button.Login.Title"]">
                        <MudIcon Icon="@Icons.Material.Filled.Login"></MudIcon>
                        <MudText Class="px-2 uppercase font-bold">@Localizer["DialogContent.Button.Login"]</MudText>
                    </MudButton>
                </div>

            </MudForm>
        </div>
    </section>
}


@code {

    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IApplicationConfiguration Configuration { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LmsLoginDialog> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILogger<LmsLoginDialog> Logger { get; set; }

    [Inject, AllowNull] internal IErrorService ErrorService { get; set; }

    [Inject, AllowNull] internal IDialogService DialogService { get; set; }

    private string BackendUrl
    {
        get => Configuration[IApplicationConfiguration.BackendBaseUrl];
        set => Configuration[IApplicationConfiguration.BackendBaseUrl] = value;
    }

    private string Username
    {
        get => Configuration[IApplicationConfiguration.BackendUsername];
        set => Configuration[IApplicationConfiguration.BackendUsername] = value;
    }


    // ReSharper disable RedundantDefaultMemberInitializer
    private string _password = "";
    private string _errorInvalidUrlMessage = "";
    private bool _showErrorInvalidCredentials = false;
    private bool _showErrorApiUnreachable = false;
    private bool _isLmsConnected = false;

    private bool _isPasswordVisible = false;
    private bool _showErrorTokenInvalid = false;
    private bool _showErrorMoodleUnreachable = false;
    private bool _spinnerActive = false;
    private InputType PasswordInputType => _isPasswordVisible ? InputType.Text : InputType.Password;
    private string ShowPasswordIcon => _isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private List<LmsWorldViewModel> _lmsWorldList = new();

    private LmsWorldViewModel? _deleteWorld = null;
    // ReSharper restore RedundantDefaultMemberInitializer

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _errorInvalidUrlMessage = "";
        _password = "";
        _showErrorInvalidCredentials = false;
        _isLmsConnected = false;
        _ = UpdateLmsIsConnected();
    }

    private async Task UpdateLmsIsConnected()
    {
        try
        {
            StartSpinner();
            _isLmsConnected = await PresentationLogic.IsLmsConnected();
        }
        catch (BackendApiUnreachableException)
        {
            _showErrorApiUnreachable = true;
        }
        catch (BackendInvalidTokenException)
        {
            _showErrorTokenInvalid = true;
            Logout();
        }
        catch (BackendMoodleApiUnreachableException)
        {
            _showErrorMoodleUnreachable = true;
        }
        finally
        {
            StopSpinner();
            StateHasChanged();
        }

        if (_isLmsConnected) RefreshLmsWorldList();
    }

    private void StartSpinner() => _spinnerActive = true;
    private void StopSpinner() => _spinnerActive = false;

    private async void SubmitForm()
    {
        //TODO: redo form as MudForm with proper validation
        if (BackendUrl == "" || Username == "" || _password == "") return;
        if (!BackendUrl.StartsWith("http://") && !BackendUrl.StartsWith("https://"))
        {
            _errorInvalidUrlMessage = Localizer["DialogContent.Error.ProtocolMissing"];
            return;
        }

        try
        {
            StartSpinner();
            await LoginAsync();
        }
        catch (BackendInvalidLoginException)
        {
            HandleInvalidLoginException();
        }
        catch (BackendInvalidUrlException e)
        {
            HandleInvalidUrlException(e);
        }
        catch (BackendApiUnreachableException)
        {
            _showErrorApiUnreachable = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error from Backend_GetUserTokenAsync");
        }
        finally
        {
            StopSpinner();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoginAsync()
    {
        await PresentationLogic.Login(Configuration[IApplicationConfiguration.BackendUsername], _password);
        _showErrorInvalidCredentials = false;
        _showErrorApiUnreachable = false;
        _showErrorTokenInvalid = false;
        _errorInvalidUrlMessage = "";
        _ = UpdateLmsIsConnected();
    }

    private void Logout()
    {
        PresentationLogic.Logout();
        _ = UpdateLmsIsConnected();
    }

    private async void RefreshLmsWorldList()
    {
        try
        {
            var courseList = await PresentationLogic.GetLmsWorldList();
            _lmsWorldList = courseList;
        }
        catch (BackendException e)
        {
            ErrorService.SetError(@Localizer["DialogContent.AdLerServer.ErrorMessage.Refresh"], e.Message);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteLmsWorld(LmsWorldViewModel world)
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(GenericCancellationConfirmationDialog.DialogText), Localizer["ConfirmDeleteLmsWorld.DialogText", world.WorldName].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonText), Localizer["ConfirmDeleteLmsWorld.SubmitButtonText"].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonColor), Color.Error }
        };

        var dialogReference = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["ConfirmDeleteLmsWorld.Title"].Value, dialogParameters);
        var result = await dialogReference.Result;
        if (result == null || result.Canceled) return;

        _deleteWorld = world;
        await InvokeAsync(StateHasChanged);

        try
        {
            await PresentationLogic.DeleteLmsWorld(world);
        }
        catch (BackendException e)
        {
            ErrorService.SetError(@Localizer["DialogContent.AdLerServer.ErrorMessage.Delete"], e.Message);
        }
        finally
        {
            RefreshLmsWorldList();
            _deleteWorld = null;
        }

        Snackbar.Add(Localizer["DialogContent.AdLerServer.CourseDeleteSuccessful.Snackbar"], Severity.Success);
    }

    private void HandleInvalidLoginException()
    {
        _showErrorInvalidCredentials = true;
        _errorInvalidUrlMessage = "";
        _password = "";
        StateHasChanged();
    }

    // ReSharper disable once SuggestBaseTypeForParameter
    private void HandleInvalidUrlException(BackendInvalidUrlException e)
    {
        _showErrorInvalidCredentials = false;
        _errorInvalidUrlMessage = e.Message;
        StateHasChanged();
    }

    private void OnKeyPress(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            SubmitForm();
        }
    }


}