@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.LearningElement
@using System.Diagnostics.CodeAnalysis
<MudDialog>
    <DialogContent>
        <MudText Class="main-text">
            @((MarkupString)Localizer["Dialog.Text1", ContentName].Value)<br/>
            @Localizer["Dialog.Text2"]
        </MudText>
        <MudTable Items="WorldElementInUseTuples">
            <HeaderContent>
                <MudTh Class="pl-4">@Localizer["Dialog.Header.World"]</MudTh>
                <MudTh Class="pl-4">@Localizer["Dialog.Header.Element"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="World">@context.Item1.Name</MudTd>
                <MudTd DataLabel="Element">@context.Item2.Name</MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["Dialog.Button.Cancel.Text"]</MudButton>
        <MudButton Color="Color.Error" OnClick="Submit">@Localizer["Dialog.Button.Delete.Text"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<DeleteContentInUseConfirmationDialog> Localizer { get; set; }

    [CascadingParameter]
    public MudDialogInstance? MudDialog { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public string ContentName { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public IEnumerable<(ILearningWorldViewModel, ILearningElementViewModel)> WorldElementInUseTuples { get; set; }


    private void Submit() => MudDialog?.Close(DialogResult.Ok(true));
    private void Cancel() => MudDialog?.Cancel();

}