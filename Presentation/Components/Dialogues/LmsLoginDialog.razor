@using System.Diagnostics.CodeAnalysis
@using ElectronWrapper
@using BusinessLogic.ErrorManagement.BackendAccess
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.API
@using Presentation.Components.Culture
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningWorld
@using Shared.Configuration
@using Shared.Exceptions
@using Size = MudBlazor.Size
@using Presentation.PresentationLogic.SelectedViewModels
@inject ISnackbar Snackbar

<MudPaper id="LmsLoginDialog.Dialog.Paper" Height="450px" Style="overflow: hidden; position: relative;">
    <div class="w-full flex flex-row items-center justify-between">
        <MudText Class="cursor-default p-4 text-adlerdarkblue font-bold text-lg cursor-default">@Localizer["DialogContent.Header"]</MudText>
        <MudIconButton id="LmsLoginDialog.CloseDialog.Button" Icon="@Icons.Material.Filled.Close" DropShadow="false" OnClick="CloseDialog"
                       ButtonType="ButtonType.Submit" Class="relative items-center flex justify-end button-submit"/>
    </div>

    <div class="flex flex-row gap-2 bg-adlerbgbright h-full">
        <div class="flex">
            <MudPaper Width="100px" Height="590px" Class="bg-adlergrey-100" Elevation="0">
                <MudTabs Position="Position.Left" MinimumTabWidth="100px" Color="Color.Info" TabPanelClass="bg-adlergrey-100">
                    <MudTabPanel title="@Localizer["DialogContent.LeftSidebar.AdLerServer"]" Icon="@_moodle" OnClick="() => ChangeActiveSide(SideToShow.LoginDialog)">
                    </MudTabPanel>
                    <MudTabPanel Icon="@_help" OnClick="() => ChangeActiveSide(SideToShow.Help)"></MudTabPanel>
                    <MudTabPanel Icon="@Icons.Material.Filled.Language" Class="text-adlerdarkblue" OnClick="() => ChangeActiveSide(SideToShow.Language)"></MudTabPanel>
                    <MudTabPanel Icon="@Icons.Material.Filled.Archive" Class="text-adlerdarkblue" OnClick="() => ChangeActiveSide(SideToShow.Archive)"></MudTabPanel>
                </MudTabs>
            </MudPaper>
        </div>
        @switch (ActiveSide)
        {
            case SideToShow.LoginDialog:
                @if (_isLmsConnected)
                {
                    <article class="flex flex-col gap-2">
                        <section class="flex flex-col gap-2 px-4 w-full">
                            <div class="gap-1 py-2 flex flex-row justify-center items-center">
                                <MudText
                                    Class="cursor-default text-lg font-bold text-adlerheaderblue">
                                    @Localizer["Header.Moodle.Text"]
                                </MudText>
                                <MudTooltip Placement="Placement.Right"
                                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                                    <TooltipContent>
                                        <MudText Class="text-xs">@Localizer["DialogContent.LoggedIn.Info"]</MudText>
                                    </TooltipContent>
                                    <ChildContent>
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                                 Class="text-adlergrey-300 hover:text-adlerdarkblue">
                                        </MudIcon>
                                    </ChildContent>
                                </MudTooltip>
                            </div>

                            <div class="logged-in-container flex flex-col justify-center gap-2 py-2">
                                <div id="LmsLoginDialog.LoggedInContainer.Div" class="flex flex-row gap-1 justify-center">
                                    <p id="LmsLoginDialog.LoggedInMessage.Text" class="cursor-default text-sm text-adlergrey-700">@Localizer["DialogContent.LoggedIn.Message"]</p>
                                    <p id="LmsLoginDialog.LoggedInUserName.Text" class="cursor-default text-sm text-adlerblue-700">@(PresentationLogic.LoginName) (@BackendUrl)</p>
                                </div>
                                <MudButton Class="btn-standard mx-36" title=@Localizer["DialogContent.Button.Logout.Title"]
                                           OnClick="Logout">
                                    <MudIcon Icon="@Icons.Material.Filled.Logout"></MudIcon>
                                    <MudText Class="px-2 uppercase font-bold">@Localizer["DialogContent.Button.Logout"]</MudText>
                                </MudButton>
                            </div>
                        </section>

                        <MudDivider DividerType="DividerType.FullWidth" Style="border-color: rgb(204,204,204)"></MudDivider>

                        <section class="flex flex-col px-4 w-full h-[400px]">
                            <div class="flex flex-row justify-center items-center gap-1 pb-2">
                                <p class="cursor-default text-lg font-bold text-adlerheaderblue py-2">@Localizer["DialogContent.Delete.Title"]</p>
                                <MudTooltip Placement="Placement.Right"
                                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                                    <TooltipContent>
                                        <MudText
                                            Class="cursor-default text-xs">
                                            @((MarkupString)Localizer["LmsLoginDialog.Title.Tooltip"].ToString())
                                        </MudText>
                                    </TooltipContent>
                                    <ChildContent>
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                                 Class="text-adlergrey-300 hover:text-adlerdarkblue">
                                        </MudIcon>
                                    </ChildContent>
                                </MudTooltip>
                            </div>

                            <MudList T="LmsWorldViewModel" Class="border border-adlergrey-200 rounded">
                                <MudText Class="cursor-default pl-4 font-bold">@Localizer["DialogContent.Delete.Subtitle"]</MudText>
                                <div class="h-28 overflow-y-scroll">
                                    @foreach (var lmsWorld in _lmsWorldList)
                                    {
                                        <MudListItem T="LmsWorldViewModel" Style="height: 48px" Class="py-0 cursor-default" Text="@lmsWorld.WorldName">
                                            <div class="flex flex-row justify-between items-center">
                                                <p class="text-base truncate">@lmsWorld.WorldName</p>
                                                @if (lmsWorld == _deleteWorld)
                                                {
                                                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Color="Color.Info"/>
                                                }
                                                else
                                                {
                                                    <MudIconButton OnClick="() => DeleteLmsWorld(lmsWorld)"
                                                                   Icon="@Icons.Material.Filled.Delete"
                                                                   title="@Localizer["DialogContent.Delete.MoodleCourse"]"
                                                                   Class="text-adlergrey-200 hover:text-adlerdarkblue-700">
                                                    </MudIconButton>
                                                }
                                            </div>
                                        </MudListItem>
                                        <MudDivider DividerType="DividerType.FullWidth"></MudDivider>
                                    }
                                </div>
                            </MudList>
                        </section>
                    </article>
                }
                else
                {
                    <section class="flex flex-col gap-2 px-4 w-full">
                        <div class="gap-1 py-2 flex flex-row justify-center items-center">
                            <MudText
                                Class="cursor-default text-lg font-bold text-adlerheaderblue">
                                @Localizer["Header.Moodle.Text"]
                            </MudText>
                            <MudTooltip Placement="Placement.Right"
                                        Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                                <TooltipContent>
                                    <MudText Class="cursor-default text-xs">@Localizer["DialogContent.LoggedIn.Info"]</MudText>
                                </TooltipContent>
                                <ChildContent>
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                             Class="text-adlergrey-300 hover:text-adlerdarkblue">
                                    </MudIcon>
                                </ChildContent>
                            </MudTooltip>
                        </div>

                        @if (_spinnerActive)
                        {
                            <div class="w-full h-full absolute bg-adlergrey-100 bg-opacity-25 z-40">
                            </div>
                            <MudProgressCircular Indeterminate="true" Class="z-40 m-auto absolute top-0 bottom-0 left-0 right-0"
                                                 Color="Color.Info" Size="Size.Large"/>
                        }

                        <div class="flex flex-col">
                            <MudForm>
                                <div class="flex flex-col">
                                    <MudTextField id="LmsLoginDialog.BackendUrl.TextField" @bind-Value="BackendUrl" Label=@Localizer["DialogContent.Field.BackendUrl"]
                                                  Required="true"
                                                  RequiredError="@Localizer["DialogContent.Field.BackendUrl.Required"]"/>
                                    @if (_errorInvalidUrlMessage != "")
                                    {
                                        <MudText Color="Color.Error" Typo="Typo.subtitle2">@_errorInvalidUrlMessage</MudText>
                                    }
                                    <MudTextField id="LmsLoginDialog.Username.TextField" @bind-Value="Username" Label=@Localizer["DialogContent.Field.Username"]
                                                  Required="true"
                                                  RequiredError="@Localizer["DialogContent.Field.Username.Required"]"/>
                                    <MudTextField id="LmsLoginDialog.Password.TextField" @bind-Value="_password" Label=@Localizer["DialogContent.Field.Password"]
                                                  OnKeyUp="OnKeyPress"
                                                  InputType=@PasswordInputType Adornment="Adornment.End"
                                                  AdornmentIcon=@ShowPasswordIcon
                                                  OnAdornmentClick="() => _isPasswordVisible = !_isPasswordVisible"
                                                  AdornmentAriaLabel=@Localizer["DialogContent.Button.ShowPassword"] Required="true"
                                                  RequiredError="@Localizer["DialogContent.Field.Password.Required"]"/>
                                    @if (_showErrorInvalidCredentials)
                                    {
                                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                                            @Localizer["DialogContent.Error.WrongUserOrPassword"]
                                        </MudText>
                                    }
                                    @if (_showErrorApiUnreachable)
                                    {
                                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                                            @Localizer["DialogContent.Error.APIUnreachable"]
                                        </MudText>
                                    }
                                    @if (_showErrorTokenInvalid)
                                    {
                                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                                            @Localizer["DialogContent.Error.TokenInvalid"]
                                        </MudText>
                                    }
                                    @if (_showErrorMoodleUnreachable)
                                    {
                                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                                            @Localizer["DialogContent.Error.MoodleUnreachable"]
                                        </MudText>
                                    }
                                </div>
                                <div class="flex flex-col">
                                    <!--TODO: Password reset link and API link should be set in the config - we need a proper configuration dialog -->
                                    <a href="https://moodle.projekt-adler.eu/login/forgot_password.php" target="_blank"
                                       title=@Localizer["DialogContent.Button.ForgotPassword.Title"] class="pb-2">
                                        @Localizer["DialogContent.Button.ForgotPassword"]
                                    </a>
                                    <MudButton id="LmsLoginDialog.SubmitForm.Button" Class="mt-6 btn-standard mx-36" OnClick="SubmitForm"
                                               title="@Localizer["DialogContent.Button.Login.Title"]">
                                        <MudIcon Icon="@Icons.Material.Filled.Login"></MudIcon>
                                        <MudText Class="px-2 uppercase font-bold">@Localizer["DialogContent.Button.Login"]</MudText>
                                    </MudButton>
                                </div>

                            </MudForm>
                        </div>
                    </section>
                }
                break;

            case SideToShow.Help:
                <div class="flex flex-col w-full">
                    <p class="text-adlerheaderblue text-lg font-bold py-2 text-center cursor-default">@Localizer["DialogContent.Help.UserManual.Title"]</p>
                    <div class="flex flex-col h-[320px] overflow-y-scroll w-full py-2">
                        <MudList T="string">
                            <MudListItem ExpandMoreIcon="@Icons.Material.Filled.ArrowDropDown" ExpandLessIcon="@Icons.Material.Filled.ArrowDropUp">
                                <ChildContent>
                                    <p class="text-sm 2xl:text-base" @onclick="@OpenManual">@Localizer["DialogContent.Help.UserManual"]</p>
                                </ChildContent>
                                <NestedList>
                                    <MudListItem>
                                        <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["DialogContent.Help.UserManual.SoftwareComponents.Hover"]" @onclick="@OpenManualSoftwareComponents">@Localizer["DialogContent.Help.UserManual.SoftwareComponents"]</MudLink>
                                    </MudListItem>
                                    <MudListItem>
                                        <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["DialogContent.Help.UserManual.Handling.Hover"]" @onclick="@OpenManualHandling">@Localizer["DialogContent.Help.UserManual.Handling"]</MudLink>
                                    </MudListItem>
                                </NestedList>
                            </MudListItem>
                            <MudListItem ExpandMoreIcon="@Icons.Material.Filled.ArrowDropDown" ExpandLessIcon="@Icons.Material.Filled.ArrowDropUp">
                                <ChildContent>
                                    <p class="text-sm 2xl:text-base" @onclick="@OpenDidacticGuide">@Localizer["DialogContent.Help.Tutorial"]</p>
                                </ChildContent>
                                <NestedList>
                                    <MudListItem>
                                        <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["DialogContent.Help.Didactic.AdaptivityElement.Hover"]" @onclick="@OpenDidacticAdaptivityElementGuide">@Localizer["DialogContent.Help.Didactic.AdaptivityElement"]</MudLink>
                                    </MudListItem>
                                    <MudListItem>
                                        <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["DialogContent.Help.Didactic.LearningOutcomeGuide.Hover"]" @onclick="@OpenDidacticLearningOutcomeGuide">@Localizer["DialogContent.Help.Didactic.LearningOutcomeGuide"]</MudLink>
                                    </MudListItem>
                                    <MudListItem>
                                        <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" title="@Localizer["DialogContent.Help.Didactic.StoryElement.Hover"]" @onclick="@OpenDidacticStoryElementGuide">@Localizer["DialogContent.Help.Didactic.StoryElement"]</MudLink>
                                    </MudListItem>
                                </NestedList>
                            </MudListItem>
                            <MudDivider></MudDivider>
                            <MudListItem T="object" Class="py-2" title="@Localizer["MudPopover.Feedback.Final.Hover"]">
                                <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" OnClick="OpenFeedbackUX">@Localizer["Feedback.MenuItem.UX.Text"]</MudLink>
                            </MudListItem>

                            <MudListItem T="object" Class="py-2" title="@Localizer["Feedback.Button.Technical.Hover"]">
                                <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" OnClick="OpenFeedbackBug">@Localizer["Feedback.MenuItem.Technical.Text"]</MudLink>
                            </MudListItem>
                            <MudDivider></MudDivider>
                            <MudListItem T="object" Class="py-2" title="@Localizer["DialogContent.Help.About.Hover"]">
                                <MudLink Underline="Underline.None" Class="text-adlertextgrey text-sm" OnClick="OpenAdLer">@Localizer["DialogContent.Help.About"]</MudLink>
                            </MudListItem>
                        </MudList>
                    </div>
                </div>
            break;
                
                case SideToShow.Language:
                <div class="flex flex-col w-full">
                    <p class="text-adlerheaderblue text-lg font-bold py-2 text-center cursor-default">@Localizer["DialogContent.Language.Title"]</p>
                    <CultureSelector/>
                </div>

                break;
                
                case SideToShow.Archive:
                <div class="flex flex-col w-full">
                    <p class="text-adlerheaderblue text-lg font-bold py-2 text-center cursor-default">@Localizer["DialogContent.LearningWorldArchive.Title"]</p>
                    <div class="flex justify-center items-center">
                        <MudButton Class="btn-standard w-48 disabled:bg-adlerbggradientto disabled:text-adlergrey-200" OnClick="ExportLearningWorldToArchiveAsync" title=@Localizer["ExportArchive.Hover"] Disabled="@(SelectedViewModelsProvider.LearningWorld == null)">
                            <MudIcon Icon="@Icons.Material.Filled.Archive" Title="@Localizer["ExportArchive.Hover"]" Size="Size.Small"></MudIcon>
                            <p class="text-xs uppercase pl-2">@Localizer["DialogContent.LearningWorldArchive.Button"]</p>
                        </MudButton>
                    </div>
                </div>
                
                break;
                
            default:
                throw new ArgumentOutOfRangeException();
        }
    </div>
</MudPaper>


@code {

    private enum SideToShow
    {
        LoginDialog,
        Help,
        Language,
        Archive
    }

    private SideToShow ActiveSide { get; set; }

    private Task ChangeActiveSide(SideToShow sidetoshow)
    {
        ActiveSide = sidetoshow;
        return Task.CompletedTask;
    }

    [Parameter] public EventCallback OnSubmitted { get; set; }
    
    [Inject, AllowNull] public IShellWrapper ShellWrapper { get; set; }

    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IApplicationConfiguration Configuration { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LmsLoginDialog> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILogger<LmsLoginDialog> Logger { get; set; }
    
    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] internal IErrorService ErrorService { get; set; }

    [Inject, AllowNull] internal IDialogService DialogService { get; set; }
    
    private string BackendUrl
    {
        get => Configuration[IApplicationConfiguration.BackendBaseUrl];
        set => Configuration[IApplicationConfiguration.BackendBaseUrl] = value;
    }

    private string Username
    {
        get => Configuration[IApplicationConfiguration.BackendUsername];
        set => Configuration[IApplicationConfiguration.BackendUsername] = value;
    }


    // ReSharper disable RedundantDefaultMemberInitializer
    private string _password = "";
    private string _errorInvalidUrlMessage = "";
    private bool _showErrorInvalidCredentials = false;
    private bool _showErrorApiUnreachable = false;
    private bool _isLmsConnected = false;

    private bool _isPasswordVisible = false;
    private bool _showErrorTokenInvalid = false;
    private bool _showErrorMoodleUnreachable = false;
    private bool _spinnerActive = false;
    private InputType PasswordInputType => _isPasswordVisible ? InputType.Text : InputType.Password;
    private string ShowPasswordIcon => _isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private static DialogOptions Options => new() { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = false, NoHeader = true };

    private List<LmsWorldViewModel> _lmsWorldList = new();

    private LmsWorldViewModel? _deleteWorld = null;
    // ReSharper restore RedundantDefaultMemberInitializer

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _errorInvalidUrlMessage = "";
        _password = "";
        _showErrorInvalidCredentials = false;
        _isLmsConnected = false;
        _ = UpdateLmsIsConnected();
        MudDialog!.SetOptionsAsync(Options);
    }

    private async Task UpdateLmsIsConnected()
    {
        try
        {
            StartSpinner();
            _isLmsConnected = await PresentationLogic.IsLmsConnected();
        }
        catch (BackendApiUnreachableException)
        {
            _showErrorApiUnreachable = true;
        }
        catch (BackendInvalidTokenException)
        {
            _showErrorTokenInvalid = true;
            Logout();
        }
        catch (BackendMoodleApiUnreachableException)
        {
            _showErrorMoodleUnreachable = true;
        }
        finally
        {
            StopSpinner();
            StateHasChanged();
        }

        if (_isLmsConnected) RefreshLmsWorldList();
    }

    private void StartSpinner() => _spinnerActive = true;
    private void StopSpinner() => _spinnerActive = false;

    private async void SubmitForm()
    {
        //TODO: redo form as MudForm with proper validation
        if (BackendUrl == "" || Username == "" || _password == "") return;
        if (!BackendUrl.StartsWith("http://") && !BackendUrl.StartsWith("https://"))
        {
            _errorInvalidUrlMessage = Localizer["DialogContent.Error.ProtocolMissing"];
            return;
        }

        try
        {
            StartSpinner();
            await LoginAsync();
        }
        catch (BackendInvalidLoginException)
        {
            HandleInvalidLoginException();
        }
        catch (BackendInvalidUrlException e)
        {
            HandleInvalidUrlException(e);
        }
        catch (BackendApiUnreachableException)
        {
            _showErrorApiUnreachable = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error from Backend_GetUserTokenAsync");
        }
        finally
        {
            StopSpinner();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoginAsync()
    {
        await PresentationLogic.Login(Configuration[IApplicationConfiguration.BackendUsername], _password);
        _showErrorInvalidCredentials = false;
        _showErrorApiUnreachable = false;
        _showErrorTokenInvalid = false;
        _errorInvalidUrlMessage = "";
        _ = UpdateLmsIsConnected();
    }

    private void Logout()
    {
        PresentationLogic.Logout();
        _ = UpdateLmsIsConnected();
    }

    private async void RefreshLmsWorldList()
    {
        try
        {
            var courseList = await PresentationLogic.GetLmsWorldList();
            _lmsWorldList = courseList;
        }
        catch (BackendException e)
        {
            ErrorService.SetError(@Localizer["DialogContent.AdLerServer.ErrorMessage.Refresh"], e.Message);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteLmsWorld(LmsWorldViewModel world)
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(GenericCancellationConfirmationDialog.DialogText), Localizer["ConfirmDeleteLmsWorld.DialogText", world.WorldName].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonText), Localizer["ConfirmDeleteLmsWorld.SubmitButtonText"].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonColor), Color.Error }
        };

        var dialogReference = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["ConfirmDeleteLmsWorld.Title"].Value, dialogParameters);
        var result = await dialogReference.Result;
        if (result == null || result.Canceled) return;

        _deleteWorld = world;
        await InvokeAsync(StateHasChanged);

        try
        {
            await PresentationLogic.DeleteLmsWorld(world);
        }
        catch (BackendException e)
        {
            ErrorService.SetError(@Localizer["DialogContent.AdLerServer.ErrorMessage.Delete"], e.Message);
        }
        finally
        {
            RefreshLmsWorldList();
            _deleteWorld = null;
        }
        
        Snackbar.Add(Localizer["DialogContent.AdLerServer.CourseDeleteSuccessful.Snackbar"], Severity.Success);
    }

    private void HandleInvalidLoginException()
    {
        _showErrorInvalidCredentials = true;
        _errorInvalidUrlMessage = "";
        _password = "";
        StateHasChanged();
    }

    // ReSharper disable once SuggestBaseTypeForParameter
    private void HandleInvalidUrlException(BackendInvalidUrlException e)
    {
        _showErrorInvalidCredentials = false;
        _errorInvalidUrlMessage = e.Message;
        StateHasChanged();
    }

    private void OnKeyPress(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            SubmitForm();
        }
    }

    private Task CloseDialog()
    {
        MudDialog?.Close();
        return Task.CompletedTask;
    }
    
    private async Task ExportLearningWorldToArchiveAsync()
    {
        if (SelectedViewModelsProvider.LearningWorld is null) return;
        if (IsLearningWorldValidForExportToArchive(SelectedViewModelsProvider.LearningWorld))
        {
            await PresentationLogic.ExportLearningWorldToArchiveAsync(SelectedViewModelsProvider.LearningWorld!);
            Snackbar.Add(@Localizer["LmsLoginDialog.ArchiveLearningWorld.Success.Snackbar"], Severity.Success);
        }
    }
    
    private bool IsLearningWorldValidForExportToArchive(ILearningWorldViewModel? learningWorld)
    {
        if (learningWorld is null) return false;

        var errors = new List<string>();

        foreach (var space in learningWorld.LearningSpaces)
        {
            foreach (var element in space.ContainedLearningElements)
            {
                if (element.LearningContent is not (IFileContentViewModel or ILinkContentViewModel))
                    continue;

                if (!PresentationLogic.GetAllContent().Contains(element.LearningContent))
                {
                    errors.Add($"<li> {Localizer["ErrorString.Missing.LearningContent.Message", element.Name]} </li>");
                }
            }
        }

        foreach (var (adaptivityContent, learningElement) in learningWorld.AllLearningElements
                     .Where(ele => ele.LearningContent is IAdaptivityContentViewModel)
                     .Select(ele => ((IAdaptivityContentViewModel)ele.LearningContent, ele)))
        {
            if (TaskReferencesNonExistantElement(adaptivityContent, learningWorld))
            {
                errors.Add($"<li> {Localizer["ErrorString.TaskReferencesNonexistantElement.Message", learningElement.Name]} </li>");
            }

            if (TaskReferencesNonExistantContent(adaptivityContent, learningWorld))
            {
                errors.Add($"<li> {Localizer["ErrorString.TaskReferencesNonexistantContent.Message", learningElement.Name]} </li>");
            }
        }

        if (!errors.Any()) return true;

        var errorString = $"<ul>{string.Join(Environment.NewLine, errors)}</ul>";

        Logger.LogError("LearningWorld is not valid: {ErrorString}", errorString);
        ErrorService.SetError(Localizer["Exception.InvalidLearningWorld.Message"], errorString.ToString());
        return false;
    }
    
    private bool TaskReferencesNonExistantElement(IAdaptivityContentViewModel adaptivityContent, ILearningWorldViewModel world)
    {
        var adaptivityContentReferencedIds = GetElementIdsContentReferences(adaptivityContent);
        return adaptivityContentReferencedIds.Any(id => world.AllLearningElements.All(ele => ele.Id != id));
    }

    private bool TaskReferencesNonExistantContent(IAdaptivityContentViewModel adaptivityContent, ILearningWorldViewModel world)
    {
        var contentReferencedByAdaptivityContent = GetContentReferencesByAdaptivityContent(adaptivityContent);
        return contentReferencedByAdaptivityContent.Any(adaContent => !PresentationLogic.GetAllContent().Contains(adaContent));
    }
    
    private static IEnumerable<Guid> GetElementIdsContentReferences(IAdaptivityContentViewModel adaptivityContent)
    {
        return adaptivityContent.Tasks
            .SelectMany(task => task.Questions
                .SelectMany(question => question.Rules
                    .Select(rule => rule.Action)
                    .Where(action => action is ElementReferenceActionViewModel)
                    .Cast<ElementReferenceActionViewModel>()
                    .Select(action => action.ElementId)));
    }

    private IEnumerable<ILearningContentViewModel> GetContentReferencesByAdaptivityContent(IAdaptivityContentViewModel adaptivityContent)
    {
        return adaptivityContent.Tasks
            .SelectMany(task => task.Questions
                .SelectMany(question => question.Rules
                    .Select(rule => rule.Action)
                    .Where(action => action is ContentReferenceActionViewModel)
                    .Cast<ContentReferenceActionViewModel>()
                    .Select(action => action.Content)));
    }

    private void OpenFeedbackUX() => ShellWrapper.OpenPathAsync("https://www.soscisurvey.de/autorentoolevaluation_gesamt");

    private void OpenFeedbackBug() => ShellWrapper.OpenPathAsync("https://bugreport.projekt-adler.eu");

    private void OpenManual() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/manualauthoringautorentool.html");
    
    private void OpenManualSoftwareComponents() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/manualauthoringsoftwarekomponenten.html");
    
    private void OpenManualHandling() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/manualauthoringbedienung.html");
    
    private void OpenDidacticGuide() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/handreichung-didaktik-bd.html");
    
    private void OpenDidacticAdaptivityElementGuide() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/didaktik-autorentool-adaptivitaetselement-bd.html");
    
    private void OpenDidacticLearningOutcomeGuide() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/didaktik-autorentool-lernziele.html");
    
    private void OpenDidacticStoryElementGuide() => ShellWrapper.OpenPathAsync("https://projektadler.github.io/Documentation/didaktik-autorentool-game-design-elemente-bd.html");
    
    private void OpenAdLer() => ShellWrapper.OpenPathAsync("https://www.projekt-adler.eu");
    
    private readonly string _moodle = MoodleIcon;

    const string MoodleIcon =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
            <svg id=""uuid-641fc258-3a7a-40b9-819a-ba6601463eb6"" data-name=""Ebene 1"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
                <path d=""m152.06,736.06l-135.43,4.15v-15.2s441.2-330.85,1307.28-397.99l5.53,13.82-315.07,229.4s86.52,60.15,124.37,113.32c0,0,24.89,7.2,49.75,41.46,0,0,80.72-117.85,362.06-107.79,281.34,10.06,420.73,153.85,436.68,378.64v677.13h-315.07l-2.76-655.02s-1.55-167.12-163.06-157.54c-161.52,9.58-154.77,157.54-154.77,157.54v655.02h-317.84v-655.02s-3.77-101.59-74.62-140.95c0,0-86.71,66.71-232.16,88.44,0,0-5.82,11.26-8.29,52.51-2.47,41.25,0,655.02,0,655.02h-317.84v-655.02s-.9-72.33,8.29-88.44c0,0-11.39-184.97-2.79-185.17,0,0-237.76-1.6-254.24-8.29"" style=""fill: #172d4d; fill-rule: evenodd; stroke-width: 0px;""/>
                    </svg>";

    private readonly string _help = HelpIcon;
    
    const string HelpIcon =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
        <svg id=""Ebene_1"" data-name=""Ebene 1"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
            <defs>
                <style>
                    .cls-1 {
                        fill: #172d4d;
                    }

                        .cls-1, .cls-2 {
                            stroke-width: 0px;
                        }

                            .cls-2 {
                                fill: #e9f2fa;
                            }
    </style>
    </defs>
    <circle class=""cls-1"" cx=""1000"" cy=""1002"" r=""979""/>
    <path class=""cls-2"" d=""m544.25,614.03s161.83-383.69,652.2-240.32c2.7.79,5.38,1.68,8.02,2.66,193.68,72.11,231.78,155.81,262.57,236.47,1.08,2.83,2.06,5.7,2.92,8.6,110.36,376.9-370.36,480.48-375.65,635.86-.76,127.58-322.4,150.5-229.19-142.86,79.89-251.46,305.72-177.93,320.02-343.75,5.03-58.36,4.33-105.36-37.37-151.01-14.12-15.46-32.17-26.82-52.08-33.31-336.37-109.7-265.48,333.41-498.75,220.87-43.55-21.01-71.01-65.56-69.45-113.89,1.45-44.95,16.76-79.31,16.76-79.31Z""/>
    <ellipse class=""cls-2"" cx=""986.74"" cy=""1572.63"" rx=""133.38"" ry=""134.89""/>
    </svg>"; 
}