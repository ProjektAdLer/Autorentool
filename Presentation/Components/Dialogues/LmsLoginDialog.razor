@using Presentation.PresentationLogic.API
@using Shared.Configuration
@using BusinessLogic.ErrorManagement.BackendAccess
@using Microsoft.Extensions.Localization
<MudDialog Class="relative flex rounded-lg bg-gradient-to-br from-adlerbggradientfrom to-adlerbggradientto w-[420px] h-[400px]">
    <TitleContent>
        <div class="flex flex-row gap-3 justify-center items-center">
            <img class="w-14 h-14" src="CustomIcons/moodle-icon-darkblue-nobg.png" alt="moodle-icon"/>
            <p class="text-xl flex justify-center font-bold text-adlerdarkblue">@Localizer["Header.Moodle.Text"]</p>
        </div>
    </TitleContent>
    <DialogContent>
        @if (_isLmsConnected)
        {
            <div class="flex flex-col justify-center py-7">
                <p class="flex justify-center font-bold text-2xl text-adlerdarkblue-200 opacity-50">@Localizer["DialogContent.LoggedIn.Header"]</p>
                <div class="flex flex-row gap-1.5 flex justify-center">
                    <p class="text-lg text-adlergrey-700">@Localizer["DialogContent.LoggedIn.Message"]</p>
                    <p class="text-lg text-adlerblue-700">@PresentationLogic.LoginName</p>
                </div>
                <MudButton Variant="Variant.Filled" Class="mt-12 btn-standard mx-28 place-items-center" title=@Localizer["DialogContent.Button.Logout.Title"] OnClick="Logout">@Localizer["DialogContent.Button.Logout"]</MudButton>
            </div>
        }
        else
        {
            <div class="flex flex-col">
                <MudForm>
                    <div class="flex flex-col">
                        <MudTextField @bind-Value="_backendUrl" Label=@Localizer["DialogContent.Field.BackendUrl"] Required="true"/>
                        @if (_errorInvalidUrlMessage != "")
                        {
                            <MudText Color="Color.Error" Typo="Typo.subtitle2">@_errorInvalidUrlMessage</MudText>
                        }
                        <MudTextField @bind-Value="_username" Label=@Localizer["DialogContent.Field.Username"] Required="true"/>
                        <MudTextField @bind-Value="_password" Label=@Localizer["DialogContent.Field.Password"] OnKeyPress="OnKeyPress"
                                      InputType=@PasswordInputType Adornment="Adornment.End" AdornmentIcon=@ShowPasswordIcon
                                      OnAdornmentClick="() => _isPasswordVisible = !_isPasswordVisible"
                                      AdornmentAriaLabel=@Localizer["DialogContent.Button.ShowPassword"] Required="true"/>
                        @if (_showErrorInvalidCredentials)
                        {
                            <MudText Color="Color.Error" Typo="Typo.subtitle2">@Localizer["DialogContent.Error.WrongUserOrPassword"]</MudText>
                        }
                    </div>
                    <div class="flex flex-col">
                        <a href="https://moodle.projekt-adler.eu/login/forgot_password.php" target="_blank" title=@Localizer["DialogContent.Button.ForgotPassword.Title"] class="pb-2">
                            @Localizer["DialogContent.Button.ForgotPassword"]
                        </a>
                        <MudButton Variant="Variant.Filled" Class="mt-6 btn-standard mx-28" OnClick="SubmitForm" title=@Localizer["DialogContent.Button.Login.Title"]>@Localizer["DialogContent.Button.Login"]</MudButton>
                    </div>

                </MudForm>
            </div>
        }
    </DialogContent>
</MudDialog>

<!--TODO: Should be set in the config-->

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Inject]
    public IPresentationLogic PresentationLogic { get; set; }

    [Inject]
    IApplicationConfiguration Configuration { get; set; }
    
    [Inject]
    private IStringLocalizer<LmsLoginDialog> Localizer { get; set; }

    [Inject]
    private ILogger<LmsLoginDialog> Logger { get; set; }

    private string _backendUrl = "";
    private string _username = "";
    private string _password = "";
    private string _errorInvalidUrlMessage = "";
    private bool _showErrorInvalidCredentials = false;
    private bool _isLmsConnected = false;

    private bool _isPasswordVisible = false;
    private InputType PasswordInputType => _isPasswordVisible ? InputType.Text : InputType.Password;
    private string ShowPasswordIcon => _isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private static DialogOptions Options => new DialogOptions() {CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true};

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _backendUrl = Configuration[IApplicationConfiguration.BackendBaseUrl];
        _errorInvalidUrlMessage = "";
        _username = Configuration[IApplicationConfiguration.BackendUsername];
        _password = "";
        _showErrorInvalidCredentials = false;
        _isLmsConnected = false;
        CheckIfLmsIsConnected();
        MudDialog.SetOptions(Options);
    }

    private async void CheckIfLmsIsConnected()
    {
        _isLmsConnected = await PresentationLogic.IsLmsConnected();
        StateHasChanged();
    }

    private async void SubmitForm()
    {
        if (_backendUrl == "" || _username == "" || _password == "") return;
        Configuration[IApplicationConfiguration.BackendBaseUrl] = _backendUrl;
        Configuration[IApplicationConfiguration.BackendUsername] = _username;
        try
        {
            await PresentationLogic.Login(_username, _password);

            _showErrorInvalidCredentials = false;
            _errorInvalidUrlMessage = "";
            CheckIfLmsIsConnected();
        }
        catch (BackendInvalidLoginException e)
        {
            _showErrorInvalidCredentials = true;
            _errorInvalidUrlMessage = "";
            _password = "";
            StateHasChanged();
        }
        catch (BackendInvalidUrlException e)
        {
            _showErrorInvalidCredentials = false;
            _errorInvalidUrlMessage = e.Message;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error from Backend_GetUserTokenAsync");
        }
    }

    private void Logout()
    {
        PresentationLogic.Logout();
        CheckIfLmsIsConnected();
    }

    void Cancel()
    {
        _isLmsConnected = false;
        MudDialog.Cancel();
    }

    private void OnKeyPress(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            SubmitForm();
        }
    }

}