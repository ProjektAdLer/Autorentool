@using System.Diagnostics.CodeAnalysis
@using BusinessLogic.ErrorManagement.BackendAccess
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Shared.Configuration
@using Shared.Exceptions
@using Size = MudBlazor.Size
<MudPaper Height="450px" Style="overflow: hidden; position: relative;">
    <div class="w-full flex flex-row items-center justify-between">
        <MudText Class="cursor-default p-4 text-adlerdarkblue font-bold text-lg cursor-default">@Localizer["DialogContent.Header"]</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Close" DisableElevation="true" OnClick="CloseDialog"
                       ButtonType="ButtonType.Submit" Class="relative items-center flex justify-end button-submit"/>
    </div>

    <div class="flex flex-row gap-2 bg-adlerbgbright h-full">
        <div class="flex">
            <MudPaper Width="100px" Height="590px" Class="bg-adlergrey-100" Elevation="0">
                <MudList Clickable="true">

                    <MudListItem title="@Localizer["DialogContent.LeftSidebar.AdLerServer"]" Icon="@moodle" OnClick="() => ChangeActiveSide(SideToShow.LoginDialog)">
                    </MudListItem>
                    <MudDivider Style="border-color: rgb(179,179,179)"/>
                    <MudListItem IconColor="Color.Default" Disabled="true" Icon="@Icons.Material.Filled.Person" OnClick="() => ChangeActiveSide(SideToShow.PersonDialog)"></MudListItem>

                </MudList>
            </MudPaper>
        </div>
        @switch (ActiveSide)
        {
            case SideToShow.LoginDialog:
                @if (_isLmsConnected)
                {
                    <article class="flex flex-col gap-2">
                        <section class="flex flex-col gap-2 px-4 w-full">
                            <div class="gap-1 py-2 flex flex-row justify-center items-center">
                                <MudText
                                    Class="cursor-default text-lg font-bold text-adlerdarkblue">
                                    @Localizer["Header.Moodle.Text"]
                                </MudText>
                                <MudTooltip Placement="Placement.Right"
                                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                                    <TooltipContent>
                                        <MudText Class="text-xs">@Localizer["DialogContent.LoggedIn.Info"]</MudText>
                                    </TooltipContent>
                                    <ChildContent>
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                                 Class="text-adlergrey-200 hover:text-adlerdarkblue">
                                        </MudIcon>
                                    </ChildContent>
                                </MudTooltip>
                            </div>

                            <div class="logged-in-container flex flex-col justify-center gap-2 py-2">
                                <div class="flex flex-row gap-1 justify-center">
                                    <p class="cursor-default text-sm text-adlergrey-700">@Localizer["DialogContent.LoggedIn.Message"]</p>
                                    <p class="cursor-default text-sm text-adlerblue-700">@(PresentationLogic.LoginName) (@BackendUrl)</p>
                                </div>
                                <MudButton Class="btn-standard mx-36" title=@Localizer["DialogContent.Button.Logout.Title"]
                                           OnClick="Logout">
                                    <MudIcon Icon="@Icons.Material.Filled.Logout"></MudIcon>
                                    <MudText Class="px-2 uppercase font-bold">@Localizer["DialogContent.Button.Logout"]</MudText>
                                </MudButton>
                            </div>
                        </section>

                        <MudDivider DividerType="DividerType.FullWidth" Style="border-color: rgb(204,204,204)"></MudDivider>

                        <section class="flex flex-col px-4 w-full h-[400px]">
                            <div class="flex flex-row justify-center items-center gap-1 pb-2">
                                <p class="cursor-default text-lg font-bold text-adlerdarkblue py-2">@Localizer["DialogContent.Delete.Title"]</p>
                                <MudTooltip Placement="Placement.Right"
                                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                                    <TooltipContent>
                                        <MudText
                                            Class="cursor-default text-xs">
                                            @((MarkupString)Localizer["LmsLoginDialog.Title.Tooltip"].ToString())
                                        </MudText>
                                    </TooltipContent>
                                    <ChildContent>
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                                 Class="text-adlergrey-200 hover:text-adlerdarkblue">
                                        </MudIcon>
                                    </ChildContent>
                                </MudTooltip>
                            </div>

                            <MudList Class="border border-adlergrey-200 rounded">
                                <MudText Class="cursor-default pl-4 font-bold">@Localizer["DialogContent.Delete.Subtitle"]</MudText>
                                <div class="h-28 overflow-y-scroll">
                                    @foreach (var lmsWorld in _lmsWorldList)
                                    {
                                        <MudListItem Style="height: 48px" Class="py-0 cursor-default" Text="@lmsWorld.WorldName">
                                            <div class="flex flex-row justify-between items-center">
                                                <p class="text-base truncate">@lmsWorld.WorldName</p>
                                                @if (lmsWorld == _deleteWorld)
                                                {
                                                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Color="Color.Info"/>
                                                }
                                                else
                                                {
                                                    <MudIconButton OnClick="() => DeleteLmsWorld(lmsWorld)"
                                                                   Icon="@Icons.Material.Filled.Delete"
                                                                   Title="@Localizer["DialogContent.Delete.MoodleCourse"]">
                                                    </MudIconButton>
                                                }
                                            </div>
                                        </MudListItem>
                                        <MudDivider DividerType="DividerType.FullWidth"></MudDivider>
                                    }
                                </div>
                            </MudList>
                        </section>
                    </article>
                }
                else
                {
                    <section class="flex flex-col gap-2 px-4 w-full">
                        <div class="gap-1 py-2 flex flex-row justify-center items-center">
                            <MudText
                                Class="cursor-default text-lg font-bold text-adlerdarkblue">
                                @Localizer["Header.Moodle.Text"]
                            </MudText>
                            <MudTooltip Placement="Placement.Right"
                                        Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                                <TooltipContent>
                                    <MudText Class="cursor-default text-xs">@Localizer["DialogContent.LoggedIn.Info"]</MudText>
                                </TooltipContent>
                                <ChildContent>
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                             Class="text-adlergrey-200 hover:text-adlerdarkblue">
                                    </MudIcon>
                                </ChildContent>
                            </MudTooltip>
                        </div>

                        @if (_spinnerActive)
                        {
                            <div class="w-full h-full absolute bg-adlergrey-100 bg-opacity-25 z-40">
                            </div>
                            <MudProgressCircular Indeterminate="true" Class="z-40 m-auto absolute top-0 bottom-0 left-0 right-0"
                                                 Color="Color.Info" Size="Size.Large"/>
                        }

                        <div class="flex flex-col">
                            <MudForm>
                                <div class="flex flex-col">
                                    <MudTextField @bind-Value="BackendUrl" Label=@Localizer["DialogContent.Field.BackendUrl"]
                                                  Required="true"
                                                  RequiredError="@Localizer["DialogContent.Field.BackendUrl.Required"]"/>
                                    @if (_errorInvalidUrlMessage != "")
                                    {
                                        <MudText Color="Color.Error" Typo="Typo.subtitle2">@_errorInvalidUrlMessage</MudText>
                                    }
                                    <MudTextField @bind-Value="Username" Label=@Localizer["DialogContent.Field.Username"]
                                                  Required="true"
                                                  RequiredError="@Localizer["DialogContent.Field.Username.Required"]"/>
                                    <MudTextField @bind-Value="_password" Label=@Localizer["DialogContent.Field.Password"]
                                                  OnKeyPress="OnKeyPress"
                                                  InputType=@PasswordInputType Adornment="Adornment.End"
                                                  AdornmentIcon=@ShowPasswordIcon
                                                  OnAdornmentClick="() => _isPasswordVisible = !_isPasswordVisible"
                                                  AdornmentAriaLabel=@Localizer["DialogContent.Button.ShowPassword"] Required="true"
                                                  RequiredError="@Localizer["DialogContent.Field.Password.Required"]"/>
                                    @if (_showErrorInvalidCredentials)
                                    {
                                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                                            @Localizer["DialogContent.Error.WrongUserOrPassword"]
                                        </MudText>
                                    }
                                    @if (_showErrorApiUnreachable)
                                    {
                                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                                            @Localizer["DialogContent.Error.APIUnreachable"]
                                        </MudText>
                                    }
                                    @if (_showErrorTokenInvalid)
                                    {
                                        <MudText Class="invalid-login-error" Color="Color.Error" Typo="Typo.subtitle2">
                                            @Localizer["DialogContent.Error.TokenInvalid"]
                                        </MudText>
                                    }
                                </div>
                                <div class="flex flex-col">
                                    <!--TODO: Password reset link and API link should be set in the config - we need a proper configuration dialog -->
                                    <a href="https://moodle.projekt-adler.eu/login/forgot_password.php" target="_blank"
                                       title=@Localizer["DialogContent.Button.ForgotPassword.Title"] class="pb-2">
                                        @Localizer["DialogContent.Button.ForgotPassword"]
                                    </a>
                                    <MudButton Class="mt-6 btn-standard mx-36" OnClick="SubmitForm"
                                               title="@Localizer["DialogContent.Button.Login.Title"]">
                                        <MudIcon Icon="@Icons.Material.Filled.Login"></MudIcon>
                                        <MudText Class="px-2 uppercase font-bold">@Localizer["DialogContent.Button.Login"]</MudText>
                                    </MudButton>
                                </div>

                            </MudForm>
                        </div>
                    </section>
                }

                break;

            case SideToShow.PersonDialog:

                break;

            default:
                throw new ArgumentOutOfRangeException();
        }
    </div>
</MudPaper>


@code {

    private enum SideToShow
    {
        LoginDialog,
        PersonDialog
    }

    private SideToShow ActiveSide { get; set; }

    private Task ChangeActiveSide(SideToShow sidetoshow)
    {
        ActiveSide = sidetoshow;
        return Task.CompletedTask;
    }

    [Parameter] public EventCallback OnSubmitted { get; set; }

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IApplicationConfiguration Configuration { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LmsLoginDialog> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILogger<LmsLoginDialog> Logger { get; set; }

    [Inject, AllowNull] internal IErrorService ErrorService { get; set; }

    [Inject, AllowNull] internal IDialogService DialogService { get; set; }

    private string BackendUrl
    {
        get => Configuration[IApplicationConfiguration.BackendBaseUrl];
        set => Configuration[IApplicationConfiguration.BackendBaseUrl] = value;
    } 
    
    private string Username
    {
        get => Configuration[IApplicationConfiguration.BackendUsername];
        set => Configuration[IApplicationConfiguration.BackendUsername] = value;
    }
    

    private string _password = "";
    private string _errorInvalidUrlMessage = "";
    private bool _showErrorInvalidCredentials = false;
    private bool _showErrorApiUnreachable = false;
    private bool _isLmsConnected = false;

    private bool _isPasswordVisible = false;
    private bool _showErrorTokenInvalid = false;
    private bool _spinnerActive = false;
    private InputType PasswordInputType => _isPasswordVisible ? InputType.Text : InputType.Password;
    private string ShowPasswordIcon => _isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private static DialogOptions Options => new() { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, NoHeader = true };

    private List<LmsWorldViewModel> _lmsWorldList = new();

    private LmsWorldViewModel? _deleteWorld = null;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _errorInvalidUrlMessage = "";
        _password = "";
        _showErrorInvalidCredentials = false;
        _isLmsConnected = false;
        UpdateLmsIsConnected();
        MudDialog?.SetOptions(Options);
    }

    /*
    private void UpdateFromConfiguration()
    {
        _backendUrl = Configuration[IApplicationConfiguration.BackendBaseUrl];
        _username = Configuration[IApplicationConfiguration.BackendUsername];
    }
    */

    private async void UpdateLmsIsConnected()
    {
        try
        {
            StartSpinner();
            _isLmsConnected = await PresentationLogic.IsLmsConnected();
        }
        catch (BackendApiUnreachableException)
        {
            _showErrorApiUnreachable = true;
        }
        catch (BackendInvalidTokenException)
        {
            _showErrorTokenInvalid = true;
            Logout();
        }
        finally
        {
            StopSpinner();
            StateHasChanged();
        }

        if (_isLmsConnected) RefreshLmsWorldList();
    }

    private void StartSpinner() => _spinnerActive = true;
    private void StopSpinner() => _spinnerActive = false;

    private async void SubmitForm()
    {
        //TODO: redo form as MudForm with proper validation
        if (BackendUrl == "" || Username == "" || _password == "") return;
        if (!BackendUrl.StartsWith("http://") && !BackendUrl.StartsWith("https://"))
        {
            _errorInvalidUrlMessage = Localizer["DialogContent.Error.ProtocolMissing"];
            return;
        }
        try
        {
            StartSpinner();
            await LoginAsync();
        }
        catch (BackendInvalidLoginException)
        {
            HandleInvalidLoginException();
        }
        catch (BackendInvalidUrlException e)
        {
            HandleInvalidUrlException(e);
        }
        catch (BackendApiUnreachableException)
        {
            _showErrorApiUnreachable = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error from Backend_GetUserTokenAsync");
        }
        finally
        {
            StopSpinner();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoginAsync()
    {
        await PresentationLogic.Login(Configuration[IApplicationConfiguration.BackendUsername], _password);
        _showErrorInvalidCredentials = false;
        _showErrorApiUnreachable = false;
        _showErrorTokenInvalid = false;
        _errorInvalidUrlMessage = "";
        UpdateLmsIsConnected();
    }

    private void Logout()
    {
        PresentationLogic.Logout();
        UpdateLmsIsConnected();
    }

    private async void RefreshLmsWorldList()
    {
        try
        {
            var courseList = await PresentationLogic.GetLmsWorldList();
            _lmsWorldList = courseList;
        }
        catch (BackendException e)
        {
            ErrorService.SetError("Error while trying to get the LMS world list", e.Message);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteLmsWorld(LmsWorldViewModel world)
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(GenericCancellationConfirmationDialog.DialogText), Localizer["ConfirmDeleteLmsWorld.DialogText", world.WorldName].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonText), Localizer["ConfirmDeleteLmsWorld.SubmitButtonText"].Value },
            { nameof(GenericCancellationConfirmationDialog.SubmitButtonColor), Color.Error }
        };

        var dialogReference = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["ConfirmDeleteLmsWorld.Title"].Value, dialogParameters);
        var result = await dialogReference.Result;
        if (result.Canceled) return;

        _deleteWorld = world;
        await InvokeAsync(StateHasChanged);

        try
        {
            await PresentationLogic.DeleteLmsWorld(world);
        }
        catch (BackendException e)
        {
            ErrorService.SetError("Error while trying to delete the LMS world", e.Message);
        }
        finally
        {
            RefreshLmsWorldList();
            _deleteWorld = null;
        }
    }

    private void HandleInvalidLoginException()
    {
        _showErrorInvalidCredentials = true;
        _errorInvalidUrlMessage = "";
        _password = "";
        StateHasChanged();
    }

    // ReSharper disable once SuggestBaseTypeForParameter
    private void HandleInvalidUrlException(BackendInvalidUrlException e)
    {
        _showErrorInvalidCredentials = false;
        _errorInvalidUrlMessage = e.Message;
        StateHasChanged();
    }

    private void OnKeyPress(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            SubmitForm();
        }
    }

    private Task CloseDialog()
    {
        MudDialog?.Close();
        return Task.CompletedTask;
    }

    private string moodle = moodleIcon;

    const string moodleIcon =
        @"<?xml version=""1.0"" encoding=""UTF-8""?>
            <svg id=""uuid-641fc258-3a7a-40b9-819a-ba6601463eb6"" data-name=""Ebene 1"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 2000 2000"">
                <path d=""m152.06,736.06l-135.43,4.15v-15.2s441.2-330.85,1307.28-397.99l5.53,13.82-315.07,229.4s86.52,60.15,124.37,113.32c0,0,24.89,7.2,49.75,41.46,0,0,80.72-117.85,362.06-107.79,281.34,10.06,420.73,153.85,436.68,378.64v677.13h-315.07l-2.76-655.02s-1.55-167.12-163.06-157.54c-161.52,9.58-154.77,157.54-154.77,157.54v655.02h-317.84v-655.02s-3.77-101.59-74.62-140.95c0,0-86.71,66.71-232.16,88.44,0,0-5.82,11.26-8.29,52.51-2.47,41.25,0,655.02,0,655.02h-317.84v-655.02s-.9-72.33,8.29-88.44c0,0-11.39-184.97-2.79-185.17,0,0-237.76-1.6-254.24-8.29"" style=""fill: #172d4d; fill-rule: evenodd; stroke-width: 0px;""/>
                    </svg>";


}