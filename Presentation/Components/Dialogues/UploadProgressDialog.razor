@implements IDisposable
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@implements IAsyncDisposable
<MudDialog DefaultFocus="DefaultFocus.None">
    <DialogContent>
        @Localizer["Dialog.Text"]
        <MudProgressLinear Value="_progress" Min="0" Max="100" Color="Color.Info" Class="my-4 w-full"/>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="CancelUpload">@Localizer["Cancel.Button.Text"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public IMudDialogInstance? MudDialog { get; set; }

    [Inject, AllowNull] //allow null since injected - n.stich
    public IStringLocalizer<UploadProgressDialog> Localizer { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public Progress<int> Progress { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public CancellationTokenSource CancellationTokenSource { get; set; }

    private int _progress;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Progress.ProgressChanged += OnProgressChanged;
    }

    private void OnProgressChanged(object? sender, int e)
    {
        _progress = e;
    //always force re-render
        InvokeAsync(StateHasChanged);

    //close dialog automatically at 100%
        if (_progress == 100)
        {
            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    public void Dispose()
    {
        Progress.ProgressChanged -= OnProgressChanged;
    }

    public ValueTask DisposeAsync()
    {
        Dispose();
        return ValueTask.CompletedTask;
    }

    private void CancelUpload()
    {
        CancellationTokenSource.Cancel();
    }

}