@using System.Diagnostics.CodeAnalysis
@using System.Runtime.Serialization
@using Microsoft.Extensions.Localization
@using MudBlazor.Extensions
@using Presentation.Components.Dialogues
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.Mediator
@using Presentation.H5P
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared.H5P
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<div class="flex flex-col gap-3 cursor-default">
    @if (ShowHeader)
    {
        <header class="py-2 bg-adlerbgbright border-y-2 border-adlergrey-100 overflow-hidden flex justify-center">
            <h2 class="text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">@Localizer["Header"]</h2>
        </header>
    }
    <div class="@SurroundingDivClass">
        <MudTable T="ILearningContentViewModel"
                  @ref="_table"
                  Items="Items"
                  RowClass="@(SelectedLearningContent != null ? null : "bg-white")"
                  RowClassFunc="@(SelectedLearningContent != null ? SelectedRowClassFunc : null)"
                  Class="@TableClass"
                  Height="@TableHeight"
                  Breakpoint="Breakpoint.Sm"
                  Virtualize="true"
                  Filter="Filter"
                  Hover="true"
                  HeaderClass="table-head-bordered border-t-2 border-adlergrey-100 cursor-default"
                  CustomHeader="true"
                  FixedHeader="true"
                  PagerContent="@(ShowPager ? MyPagerContent : null)"
                  OnRowClick="RowClickEvent"
                  OnRowMouseEnter="args => { _rowShowingPopover = args.Item; }"
                  OnRowMouseLeave=" _ => { if (!_cursorInsidePopover) _rowShowingPopover = null; }">
            <ToolBarContent>
                <MudTextField @bind-Value="SearchString" @ref="_searchField" Immediate="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Outlined.Search"
                              Style="margin-top: 0; width: 200px; font-size: 14px;" Margin="Margin.Dense"/>
            </ToolBarContent>
            <HeaderContent>
                @if (ShowHeadRow)
                {
                    <MudTHeadRow Class="header-centered">
                        @if (ShowPreviewButton)
                        {
                            <MudTh Class="pa-1"></MudTh>
                        }
                        @if (MultipleSelection)
                        {
                            <MudTh Class="cursor-default p-1 h-8" Style="width: 15%;">
                                <div class="flex flex-row items-center">
                                    @if (DeleteButtonVisible)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                       Class="m-0 p-1"
                                                       Disabled="@(!_deletionCandidates.Any())"
                                                       OnClick="() => DeleteSelected()"
                                                       title="@Localizer["Content.MudTd.Delete"]"/>
                                    }
                                    <MudCheckBox T="bool?" TriState="true" Value="@MultipleSelected"
                                                 ValueChanged="OnMultipleSelectedChanged" Class="m-1 p-0"
                                                 Size="Size.Small"
                                                 Dense="true"></MudCheckBox>
                                    <MudText
                                        Class="m-0 pl-1 text-sm text-adlergrey-500">@_deletionCandidates.Count()</MudText>
                                    <MudMenu Dense="true">
                                        <ActivatorContent>
                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowDropDown"
                                                           Class="p-0 m-0"></MudIconButton>
                                        </ActivatorContent>
                                        <ChildContent>
                                            <MudText
                                                Class="text-sm py-2 px-4">@Localizer["Content.Select.Text"]</MudText>
                                            <MudDivider></MudDivider>
                                            <MudMenuItem
                                                OnClick="OnSelectAll">@Localizer["Content.Select.Option.All"]</MudMenuItem>
                                            <MudMenuItem
                                                OnClick="OnSelectAllUnused">@Localizer["Content.Select.Option.AllUnused"]</MudMenuItem>
                                        </ChildContent>
                                    </MudMenu>
                                </div>
                            </MudTh>
                        }
                        <MudTh Class="px-2 p-1 h-8" Style="width: 50%;">
                            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                                               SortBy="new Func<ILearningContentViewModel, object>(x => x.Name)">
                                @Localizer["Content.MudTh.Name"]
                            </MudTableSortLabel>
                        </MudTh>
                        @if (_showFilepath)
                        {
                            <MudTh Class="px-0 p-1 h-8 w-full">@Localizer["Content.MudTh.FilepathOrLink"]</MudTh>
                        }
                        <MudTh Class="px-0 p-1 h-8" Style="width: 25%;">
                            <MudTableSortLabel SortBy="new Func<ILearningContentViewModel, object>(TypeSortBy)">
                                @Localizer["Content.MudTh.Type"]
                            </MudTableSortLabel>
                        </MudTh>
                        @if (ShowContentState)
                        {
                            <MudTh Class="px-0 p-1 h-8" Style="width: 25%;">
                                <MudTableSortLabel SortBy="new Func<ILearningContentViewModel, object>(SortByH5pState)">
                                    Zustand
                                </MudTableSortLabel>
                            </MudTh>
                        }
                    </MudTHeadRow>
                }
            </HeaderContent>
            <RowTemplate>
                @if (ShowPreviewButton)
                {
                    <MudTd Class="py-0 px-2">
                        <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                                       Class="show-content-preview"
                                       OnClick="() => ShowLearningContent(context)"
                                       title="@Localizer["LearningContentDialog.LearningMaterial.Preview"]"/>
                    </MudTd>
                }
                @if (MultipleSelection)
                {
                    <MudTd Class="py-0 px-4 flex flex-row gap-6" DataLabel="Delete">

                        <div class="flex justify-start">
                            @if (GetUsage(context).Any())
                            {
                                <MudMenu ActivationEvent="MouseEvent.MouseOver" AnchorOrigin="Origin.CenterRight"
                                         TransformOrigin="Origin.CenterLeft">
                                    <ActivatorContent>

                                        <MudBadge Content="@GetUsage(context).Count().ToString()" Class="my-3 p-0"
                                                  BadgeClass="text-white bg-adlerblue-200" Overlap="false"
                                                  Origin="Origin.CenterRight">
                                            <MudText></MudText>
                                        </MudBadge>
                                    </ActivatorContent>
                                    <ChildContent>
                                        <UsedContentFilesDialog LearningContent="@context"
                                                                Usages="@GetUsage(context)"></UsedContentFilesDialog>
                                    </ChildContent>
                                </MudMenu>
                            }
                        </div>
                        <div class="flex justify-start">
                            <MudCheckBox T="bool" Value="_deletionCandidates.Contains(context)"
                                         ValueChanged="b => OnCheckedChange(context, b)"
                                         Class="flex justify-center m-0 py-1.5"></MudCheckBox>
                        </div>
                    </MudTd>
                }

                <MudTd Class="py-0 px-0 w-full" Style="max-width: 425px;" DataLabel="Name">
                    <div style="cursor:@(IsNameDisabled(context) ? "not-allowed" : "inherit")">
                        <MudTooltip Text="@context.Name"
                                    Arrow="true"
                                    Placement="Placement.Top"
                                    Class="bg-adlergrey-200 shadow-xl text-adlergrey-800"
                                    Duration="Double.Epsilon">
                            <p class="pt-2 cursor-default truncate grow shrink"
                               style="max-width: 415px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; color:@(IsNameDisabled(context) ? "#a0a0a0" : "inherit");">
                                @context.Name
                            </p>
                        </MudTooltip>
                    </div>
                    @if (ShowHoverMenu)
                    {
                        <MudPopover Open="Equals(_rowShowingPopover, context)" Class="bg-adlerdarkblue flex flex-row"
                                    AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter"
                                    @onmouseover="() => { _cursorInsidePopover = true; }"
                                    @onmouseleave="() => { _cursorInsidePopover = false; _rowShowingPopover = null; }">

                            <MudIconButton OnClick="() => ShowLearningContent(context)"
                                           Icon="@Icons.Material.Filled.RemoveRedEye"
                                           Class="m-0 p-1 text-white hover:text-adlerbggradientfrom"
                                           title=@Localizer["Content.MudTd.Preview"]>
                            </MudIconButton>

                            @if (SelectedViewModelsProvider.LearningWorld?.Name != null)
                            {
                                <MudIconButton OnClick="() => NewElementWithContent(context)"
                                               Icon="@Icons.Material.Filled.Add"
                                               Class="m-0 p-1 text-white hover:text-adlerbggradientfrom"
                                               title=@Localizer["Content.MudTd.NewElement"]>
                                </MudIconButton>
                            }

                            @if (DeleteButtonVisible)
                            {
                                <MudIconButton OnClick="() => Delete(context)"
                                               Icon="@Icons.Material.Filled.Delete"
                                               Class="m-0 p-1 text-white hover:text-adlerbggradientfrom"
                                               title=@Localizer["Content.MudTd.Delete"]>
                                </MudIconButton>
                            }
                        </MudPopover>
                    }

                </MudTd>
                @if (_showFilepath)
                {
                    <MudTd Class="p-0 w-full whitespace-nowrap" Style="white-space: nowrap;" DataLabel="Filepath/Link">
                        @switch (context)
                        {
                            case FileContentViewModel fileContentContext:
                                @fileContentContext.Filepath
                                break;
                            case LinkContentViewModel linkContentContext:
                                @linkContentContext.Link
                                break;
                        }
                    </MudTd>
                }
                <MudTd DataLabel="Type" Class="p-0 cursor-default">
                    @if (context is FileContentViewModel fileContentContext)
                    {
                        <div class="flex flex-row items-center justify-start">
                            <span class="w-12 text-sm">@fileContentContext.Type</span>
                        </div>
                    }
                    else
                    {
                        <div class="flex flex-row items-center justify-start">
                            <span class="w-12 text-sm">video</span>
                        </div>
                    }
                </MudTd>
                @if (ShowContentState)
                {
                    <MudTd DataLabel="State" Class="p-0 cursor-default">
                        @if (context is FileContentViewModel fileContentContext)
                        {
                            var fileContent = context as IFileContentViewModel;
                            <div class="flex flex-row items-center justify-start">
                                @if (fileContentContext.Type == "h5p")
                                {
                                    <H5PStateIcon FileContentVm="@fileContent"/>
                                }
                                else
                                {
                                    <MudTooltip>
                                        <div class="flex flex-row items-center justify-start gap-1">
                                            @((MarkupString)H5PStateIcon.InlineSvg(H5PStateIcon.Svg.Lockable))
                                            <p class="text-xs text-adlergrey">nutzbar</p>
                                        </div>
                                    </MudTooltip>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="flex flex-row items-center justify-start">
                                <MudTooltip>
                                    <div class="flex flex-row items-center justify-start gap-1">
                                        @((MarkupString)H5PStateIcon.InlineSvg(H5PStateIcon.Svg.Lockable))
                                        <p class="text-xs text-adlergrey">nutzbar</p>
                                    </div>
                                </MudTooltip>
                            </div>
                        }
                    </MudTd>
                }

            </RowTemplate>

        </MudTable>
    </div>
</div>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMediator Mediator { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IAuthoringToolWorkspaceViewModel WorkspaceViewModel { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<ContentFilesView> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IErrorService ErrorService { get; set; }

    [CascadingParameter, AllowNull] //injected by MudDialog
    public IMudDialogInstance DialogInstance { get; set; }

    [Parameter] public EventCallback<ILearningContentViewModel> OnRowClick { get; set; }

    [Parameter] public string TableHeight { get; set; } = "220px";
    [Parameter] public string TableWidthClass { get; set; } = "w-full";
    [Parameter] public string SurroundingDivClass { get; set; } = "px-4";
    [Parameter] public bool ShowHeadRow { get; set; } = true;
    [Parameter] public bool ShowContentState { get; set; } = true;
    [Parameter] public bool ShowHeader { get; set; } = false;
    [Parameter] public ILearningContentViewModel? SelectedLearningContent { get; set; }
    [Parameter] public EventCallback<ILearningContentViewModel?> SelectedLearningContentChanged { get; set; }

    /// <summary>
    /// If true, there are 10 items per page and a pager is shown.
    /// If false, all items are shown in one scrollable table without a pager.
    /// Default: true
    /// </summary>
    [Parameter]
    public bool ShowPager { get; set; } = true;

    /// <summary>
    /// If true, the delete button is visible.
    /// Default: true
    /// </summary>
    [Parameter]
    public bool DeleteButtonVisible { get; set; } = true;

    /// <summary>
    /// If true the multiple selection is enabled.
    /// Default: true
    /// </summary>
    [Parameter]
    public bool MultipleSelection { get; set; } = true;

    /// <summary>
    /// If true, a preview button is shown on the left for each item.
    /// Default: false
    /// </summary>
    [Parameter]
    public bool ShowPreviewButton { get; set; } = false;

    /// <summary>
    /// If true, a hover menu is shown for each item.
    /// Default: true
    /// </summary>
    [Parameter]
    public bool ShowHoverMenu { get; set; } = true;

    /// <summary>
    /// If true, the unusable content is greyed out and not selectable.
    /// Default: false
    /// </summary>
    [Parameter]
    public bool DisableUnusableContent { get; set; } = false;

    /// <summary>
    /// If true, the search field is focused on opening the view.
    /// Default: false
    /// </summary>
    [Parameter]
    public bool FocusSearch { get; set; } = false;

    private IEnumerable<ILearningContentViewModel> Items => PresentationLogic.GetAllContent();

    internal string? SearchString { get; set; }

    private bool _showFilepath;
    private MudTable<ILearningContentViewModel>? _table;
    private IEnumerable<ILearningContentViewModel> _deletionCandidates = new List<ILearningContentViewModel>();

    private string TableClass => TableWidthClass + " flex flex-col flex-nowrap shadow-none bg-adlerbgbright rounded border-adlergrey-100 border-2 cursor-pointer";

    private RenderFragment MyPagerContent => __builder =>
    {
        <MudTablePager HideRowsPerPage="true" HorizontalAlignment="HorizontalAlignment.Center"
                       Class="h-8"/>
        <div
            class="w-full max-h-40% min-h-fit shrink grow flex flex-row items-center justify-between pb-2">
            <div class="flex justify-center items-center">
                <MudSwitch Class="pl-2 w-2xs" @bind-Value="_showFilepath"
                           Color="Color.Info"></MudSwitch>
                <p class="text-xs flex justify-start">@Localizer["PagerContent.Filepath.Text"]</p>
            </div>
            @* ReSharper disable once CSharpWarnings::CS8974 *@
            <button @onclick="@OpenContentFilesFolder"
                    class="relative btn-standard p-2 justify-end items-center shadow-lg">
                <MudIcon Icon="@Icons.Material.Filled.FolderOpen"></MudIcon>
                <p class="pl-1 font-bold uppercase">@Localizer["PagerContent.Button.Text"]</p>
            </button>
        </div>
    };

    private bool? MultipleSelected
    {
        get
        {
            if (_table == null) return null;
            if (!_deletionCandidates.Any()) return false;
            if (_table.Items == null) return false;
            if (_table.Items.Count() == _deletionCandidates.Count()) return true;
            return null;
        }
    }

    private ILearningContentViewModel? _rowShowingPopover = null;
    private bool _cursorInsidePopover = false;
    private MudTextField<string> _searchField = null!;
    private bool _focusCalled = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!_focusCalled)
        {
            _focusCalled = true;
            await _searchField.FocusAsync();
        }
    }


    private object TypeSortBy(ILearningContentViewModel content) =>
        content is FileContentViewModel fc ? fc.Type : "Link";

    private bool Filter(ILearningContentViewModel element) =>
        FilterInternal(element, SearchString);

    private bool FilterInternal(ILearningContentViewModel element, string? searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        searchString = searchString.ToLowerInvariant();
        var elementType = element is FileContentViewModel fileContent ? fileContent.Type : "Link";
        if (element.Name.ToLowerInvariant().Contains(searchString) ||
            elementType.ToLowerInvariant().Contains(searchString))
            return true;
        return $"{element.Name}.{elementType}".ToLowerInvariant().Contains(searchString);
    }

    private async void RowClickEvent(TableRowClickEventArgs<ILearningContentViewModel> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs.Item != null && IsNameDisabled(tableRowClickEventArgs.Item))
        {
            return;
        }

        if (SelectedLearningContentChanged.HasDelegate)
        {
            SelectedLearningContent = tableRowClickEventArgs.Item;
            await SelectedLearningContentChanged.InvokeAsync(SelectedLearningContent);
        }

        if (OnRowClick.HasDelegate)
        {
            await OnRowClick.InvokeAsync(tableRowClickEventArgs.Item);
        }
    }

    private string SelectedRowClassFunc(ILearningContentViewModel element, int rowNumber)
    {
        return element.Equals(SelectedLearningContent) ? "bg-adlerblue-200" : "bg-white";
    }

    private async Task Delete(ILearningContentViewModel item)
    {
        //present "Delete/Cancel" dialog
        var parameters = new DialogParameters
        {
            { "SubmitButtonText", Localizer["Dialog.Delete.Button.Text"].ToString() },
            { "SubmitButtonColor", Color.Error },
            {
                "DialogText", Localizer["Dialog.Delete.DialogText", item.Name].ToString()
            },
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = false
        };
        var dialog = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["TaskDelete.DialogService.Title"], parameters, options);
        var result = await dialog.Result;

        if (result == null) return;

        if (result.Canceled) return;
        Snackbar.Add(@Localizer["ContentFilesView.Snackbar.OneMaterialDelete"], Severity.Success);

        var matches = WorkspaceViewModel.LearningWorlds
            .SelectMany(world => world.AllLearningElements
                .Where(element => element.LearningContent.Equals(item))
                .Select(el => (world, el)))
            .ToList();
        if (matches.Any())
        {
            if (await ShowContentInUseWarningAsync(item, matches, options)) return;
        }

        //not cancelled, delete content
        try
        {
            PresentationLogic.RemoveContent(item);
        }
        catch (ArgumentOutOfRangeException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (FileNotFoundException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (SerializationException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (IOException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialInUse"], e.Message);
        }
    }

    private async Task DeleteSelected()
    {
        //present "Delete/Cancel" dialog
        var parameters = new DialogParameters
        {
            { "SubmitButtonText", Localizer["Dialog.Delete.Button.Text"].ToString() },
            { "SubmitButtonColor", Color.Error },
            { "DialogText", Localizer["Dialog.DeleteSelected.DialogText"].ToString() },
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = false,
            MaxWidth = MaxWidth.Medium,
        };
        var dialog = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["TaskDelete.DialogService.Title"], parameters, options);
        var result = await dialog.Result;

        if (result == null) return;
        if (result.Canceled) return;

        var contentInUse = GetContentInUseFromDeletionCandidates();

        var doNotFilterForUnused = true;
        if (contentInUse.Any())
        {
            //present "Delete Multiple Contents" dialog
            var parameters2 = new DialogParameters
            {
                { "ContentWorldElementInUseList", contentInUse },
            };
            var dialog2 = await DialogService.ShowAsync<DeleteMultipleContentConfirmationDialog>(Localizer["TaskDelete.DialogService.Title"], parameters2, options);
            var result2 = await dialog2.Result;
            if (result2 == null || result2.Canceled) return;
            doNotFilterForUnused = result2.Data.As<bool>();
        }

        try
        {
            PresentationLogic.RemoveMultipleContents(doNotFilterForUnused ? _deletionCandidates : _deletionCandidates.Where(x => !contentInUse.Any(y => y.Item1.Equals(x))));
            Snackbar.Add(@Localizer["ContentFilesView.Snackbar.MaterialDelete"], Severity.Success);
        }
        catch (ArgumentOutOfRangeException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (FileNotFoundException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (SerializationException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }

        _deletionCandidates = _deletionCandidates.Where(x => Items.Contains(x));
    }

    private List<(ILearningContentViewModel, ILearningWorldViewModel, ILearningElementViewModel)> GetContentInUseFromDeletionCandidates()
    {
        var contentInUse = new List<(ILearningContentViewModel, ILearningWorldViewModel, ILearningElementViewModel)>();
        foreach (var candidate in _deletionCandidates)
        {
            var matches = WorkspaceViewModel.LearningWorlds
                .SelectMany(world => world.AllLearningElements
                    .Where(element => element.LearningContent.Equals(candidate))
                    .Select(el => (candidate, world, el)))
                .ToList();
            if (matches.Any())
            {
                contentInUse.AddRange(matches);
            }
        }

        return contentInUse;
    }

    /// <summary>
    /// Shows the user a warning that the content that they are trying to delete is in use.
    /// </summary>
    /// <returns>True if the deletion should be cancelled, false otherwise.</returns>
    private async Task<bool> ShowContentInUseWarningAsync(ILearningContentViewModel item, IEnumerable<(ILearningWorldViewModel world, ILearningElementViewModel el)> matches, DialogOptions options)
    {
        DialogParameters parameters;
        parameters = new DialogParameters
        {
            { nameof(DeleteContentInUseConfirmationDialog.ContentName), item.Name },
            { nameof(DeleteContentInUseConfirmationDialog.WorldElementInUseTuples), matches }
        };
        var warningDialog =
            await DialogService.ShowAsync<DeleteContentInUseConfirmationDialog>(Localizer["WarningDialog.Title"],
                parameters, options);
        var warningResult = await warningDialog.Result;
        return warningResult is { Canceled: true };
    }

    private IEnumerable<(ILearningWorldViewModel, ILearningElementViewModel)> GetUsage(ILearningContentViewModel item)
    {
        var matches = WorkspaceViewModel.LearningWorlds
            .SelectMany(world => world.AllLearningElements
                .Where(element => element.LearningContent.Equals(item))
                .Select(el => (world, el)));
        return matches;
    }

    public async Task RerenderAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    private void OpenContentFilesFolder()
    {
        try
        {
            PresentationLogic.OpenContentFilesFolder();
        }
        catch (InvalidOperationException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.OpenMaterialFolder"], e.Message);
        }
    }

    private void NewElementWithContent(ILearningContentViewModel content)
    {
        PresentationLogic.SetSelectedLearningContentViewModel(content);
        Mediator.RequestOpenNewElementDialog();
        DialogInstance.Close(DialogResult.Ok(true));
    }

    private void OnCheckedChange(ILearningContentViewModel content, bool isChecked)
    {
        _deletionCandidates = isChecked ? _deletionCandidates.Append(content) : _deletionCandidates.Where(c => !c.Equals(content));
    }

    private void OnSelectAll()
    {
        if (_table != null)
        {
            _deletionCandidates = _table.FilteredItems;
        }
    }

    private void OnSelectAllUnused()
    {
        if (_table != null)
        {
            _deletionCandidates = _table.FilteredItems.Where(i => !GetUsage(i).Any());
        }
    }

    private void OnMultipleSelectedChanged()
    {
        switch (MultipleSelected)
        {
            case null:
            case false:
                OnSelectAll();
                break;
            default:
                _deletionCandidates = new List<ILearningContentViewModel>();
                break;
        }
    }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IH5PPlayerPluginManager H5PPlayerPluginManager { get; set; }

    private bool IsNameDisabled(ILearningContentViewModel item)
    {
        if (!DisableUnusableContent) return false;
        if (item is FileContentViewModel file)
        {
            return file.Type == "h5p" &&
                   !(file.H5PState == H5PContentState.Completable || file.H5PState == H5PContentState.Primitive);
        }

        return false;
    }

    private async Task ShowLearningContent(ILearningContentViewModel context)
    {
        if (context is FileContentViewModel fileContentVm && fileContentVm.Type == "h5p")
        {
            var startH5PPlayerTO = new StartH5PPlayerTO();
            startH5PPlayerTO.FileContentVm = fileContentVm;
            startH5PPlayerTO.NavigationManager = Navigation;
            await H5PPlayerPluginManager.StartH5pPlayerToValidateAsync(startH5PPlayerTO);
        }
        else
        {
            await PresentationLogic.ShowLearningContentAsync(context);
        }
    }

    private object SortByH5pState(ILearningContentViewModel context)
    {
        if (context is FileContentViewModel fileContentVm && fileContentVm.Type == "h5p")
        {
            return fileContentVm.H5PState;
        }

        return H5PContentState.Completable; // oder was auch immer als Standard
    }

}