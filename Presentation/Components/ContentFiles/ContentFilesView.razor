@using MudBlazor.Extensions
@using Presentation.Components.Dialogues
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.Mediator
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@inject ISnackbar Snackbar
@using System.Runtime.Serialization

<MudTable T="ILearningContentViewModel" 
          Items="Items" 
          RowClass="bg-white" 
          Class="w-[96%] h-full flex flex-col flex-nowrap mb-2 mx-2 shadow-none bg-adlerbgbright rounded border-adlergrey-100 border-4"
          Virtualize="true" 
          Filter="Filter" 
          Hover="true" 
          HeaderClass="table-head-bordered" 
          CustomHeader="true" 
          FixedHeader="true"
          OnRowMouseEnter="args => { _rowShowingPopover = args.Item; }"
          OnRowMouseLeave=" _ => { if (!_cursorInsidePopover) _rowShowingPopover = null; }" @ref="_table">
    <ToolBarContent>
        <div class="flex flex-row">
            <p class="flex items-center text-sm 2xl:text-base font-bold leading-tight">@Localizer["Header"]</p>
            <MudSpacer />
            <MudTextField @bind-Value="SearchString" Immediate="true" Placeholder="@Localizer["MudTextField.Search.Placeholder"]" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Outlined.Search"/>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <MudTHeadRow Class="header-centered">
            <MudTh Class="cursor-default px-1">
                <div class="flex flex-row items-center">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Class="m-0 px-1 py-0"
                                   Disabled="@(!_deletionCandidates.Any())"
                                   OnClick="() => DeleteSelected()"
                                   Title="@Localizer["Content.MudTd.Delete"]"/>
                    <MudCheckBox T="bool?" TriState="true" Value="@MultipleSelected" CheckedChanged="OnMultipleSelectedChanged" Class="m-2 p-0" Size="Size.Small" Dense="true"></MudCheckBox>
                    <MudMenu Dense="true">
                        <ActivatorContent>
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" Class="p-0 m-0"></MudIconButton>
                        </ActivatorContent>
                        <ChildContent>
                            <MudText Class="text-sm py-2 px-4">@Localizer["Content.Select.Text"]</MudText>
                            <MudDivider></MudDivider>
                            <MudMenuItem OnClick="OnSelectAll">@Localizer["Content.Select.Option.All"]</MudMenuItem>
                            <MudMenuItem OnClick="OnSelectAllUnused">@Localizer["Content.Select.Option.AllUnused"]</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                    <MudText Class="m-0 pl-1 pt-1 text-sm text-adlergrey-500">@_deletionCandidates.Count()</MudText>
                </div>
            </MudTh>
            <MudTh Class="px-2">
                <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                                   SortBy="new Func<ILearningContentViewModel, object>(x => x.Name)">
                    @Localizer["Content.MudTh.Name"]
                </MudTableSortLabel>
            </MudTh>
            <MudTh Class="px-0">
                <MudTableSortLabel SortBy="new Func<ILearningContentViewModel, object>(TypeSortBy)">
                    @Localizer["Content.MudTh.Type"]
                </MudTableSortLabel>
            </MudTh>
            @if (_showFilepath)
            {
                <MudTh>@Localizer["Content.MudTh.FilepathOrLink"]</MudTh>
            }
        </MudTHeadRow>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="py-0 px-2 flex flex-row" DataLabel="Delete">

             @if (GetUsage(context).Any())
                        {
                            <MudMenu ActivationEvent="MouseEvent.MouseOver" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterLeft">
                                <ActivatorContent>
            
                                    <MudBadge Content="@GetUsage(context).Count().ToString()" Class="my-3 p-0" BadgeClass="text-white bg-adlerblue-200" Overlap="false" Origin="Origin.CenterRight">
                                        <MudText></MudText>
                                    </MudBadge>
                                </ActivatorContent>
                                <ChildContent >
                                    <UsedContentFilesDialog LearningContent="@context" Usages="@GetUsage(context)"></UsedContentFilesDialog>
                                </ChildContent>
                            </MudMenu>
                        }
            
            <MudCheckBox T="bool" Checked="_deletionCandidates.Contains(context)" CheckedChanged="b => OnCheckedChange(context, b)" Class="m-0 left-7 py-1.5"></MudCheckBox>
            
        </MudTd>
        <MudTd Class="py-0 pl-2" DataLabel="Name">
            <MudTooltip Text="@context.Name"
                        Arrow="true"
                        Placement="Placement.Top"
                        Class="bg-adlergrey-200 shadow-xl text-adlergrey-800"
                        Duration="Double.Epsilon">
                <p class="pt-2 cursor-default max-w-[8rem] truncate text-ellipsis overflow-hidden">@context.Name</p>
            </MudTooltip>
        </MudTd>

        <MudTd DataLabel="Type" Class="py-0 pl-0 cursor-default">
            @if (context is FileContentViewModel fileContentContext)
            {
                @fileContentContext.Type
            }
            else
            {
                <span>Link</span>
            }
            <MudPopover Open="Equals(_rowShowingPopover, context)" Class="bg-adlerdarkblue flex flex-row"
                        AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterRight"
                        @onmouseover="() => { _cursorInsidePopover = true; }"
                        @onmouseleave="() => { _cursorInsidePopover = false; _rowShowingPopover = null; }">

                <MudIconButton OnClick="() => PresentationLogic.ShowLearningContentAsync(context)"
                               Icon="@Icons.Material.Filled.RemoveRedEye" Class="m-0 p-1 text-white hover:text-adlerbggradientfrom" Title=@Localizer["Content.MudTd.Preview"]>
                </MudIconButton>
                <MudIconButton OnClick="() => NewElementWithContent(context)"
                               Icon="@Icons.Material.Filled.Add" Class="m-0 p-1 text-white hover:text-adlerbggradientfrom" Title=@Localizer["Content.MudTd.NewElement"]>
                </MudIconButton>
                <MudIconButton OnClick="() => Delete(context)"
                               Icon="@Icons.Material.Filled.Delete" Class="m-0 p-1 text-white hover:text-adlerbggradientfrom" Title=@Localizer["Content.MudTd.Delete"]>
                </MudIconButton>
            </MudPopover>
        </MudTd>

        @if (_showFilepath)
        {
            <MudTd Class="py-0" DataLabel="Filepath/Link">
                @switch (context)
                {
                    case FileContentViewModel fileContentContext:
                        @fileContentContext.Filepath
                        break;
                    case LinkContentViewModel linkContentContext:
                        @linkContentContext.Link
                        break;
                }
            </MudTd>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager HideRowsPerPage="true" HorizontalAlignment="HorizontalAlignment.Center" Class="px-0"/>
        <div class="w-full max-h-40% min-h-fit shrink grow flex flex-row items-center mb-2 justify-between">
            <div class="flex justify-center items-center">
                <MudSwitch Class="pl-2 w-12" @bind-Checked="_showFilepath" Color="Color.Info"></MudSwitch>
                <p class="text-xs flex justify-start">@Localizer["PagerContent.Filepath.Text"]</p>
            </div>
            <button @onclick="@OpenContentFilesFolder" class="relative btn-standard p-2 justify-end items-center shadow-lg">
                <MudIcon Icon="@Icons.Material.Filled.FolderOpen"></MudIcon>
                <p class="pl-1 font-bold uppercase">@Localizer["PagerContent.Button.Text"]</p>
            </button>
        </div>

    </PagerContent>
</MudTable>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMediator Mediator { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IAuthoringToolWorkspaceViewModel WorkspaceViewModel { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<ContentFilesView> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IErrorService ErrorService { get; set; }

    private IEnumerable<ILearningContentViewModel> Items => PresentationLogic.GetAllContent();

    internal string? SearchString { get; set; }

    private bool _showFilepath;
    private MudTable<ILearningContentViewModel>? _table;
    private IEnumerable<ILearningContentViewModel> _deletionCandidates = new List<ILearningContentViewModel>();

    private bool? MultipleSelected
    {
        get
        {
            if (_table == null) return null;
            if (!_deletionCandidates.Any()) return false;
            if (_table.Items.Count() == _deletionCandidates.Count()) return true;
            return null;
        }
    }

    private ILearningContentViewModel? _rowShowingPopover = null;
    private bool _cursorInsidePopover = false;

    private object TypeSortBy(ILearningContentViewModel content) =>
        content is FileContentViewModel fc ? fc.Type : "Link";

    private bool Filter(ILearningContentViewModel element) =>
        FilterInternal(element, SearchString);

    private bool FilterInternal(ILearningContentViewModel element, string? searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        searchString = searchString.ToLowerInvariant();
        var elementType = element is FileContentViewModel fileContent ? fileContent.Type : "Link";
        if (element.Name.ToLowerInvariant().Contains(searchString) ||
            elementType.ToLowerInvariant().Contains(searchString))
            return true;
        return $"{element.Name}.{elementType}".ToLowerInvariant().Contains(searchString);
    }

    private async Task Delete(ILearningContentViewModel item)
    {
        //present "Delete/Cancel" dialog
        var parameters = new DialogParameters
        {
            { "SubmitButtonText", Localizer["Dialog.Delete.Button.Text"].ToString()},
            { "SubmitButtonColor", Color.Error },
            {
                "DialogText", Localizer["Dialog.Delete.DialogText", item.Name].ToString()
            },
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
        };
        var dialog = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["TaskDelete.DialogService.Title"], parameters, options);
        var result = await dialog.Result;

        if (result.Canceled) return;
        Snackbar.Add(@Localizer["ContentFilesView.Snackbar.OneMaterialDelete"], Severity.Success);
        
        var matches = WorkspaceViewModel.LearningWorlds
            .SelectMany(world => world.AllLearningElements
                .Where(element => element.LearningContent.Equals(item))
                .Select(el => (world, el)))
            .ToList();
        if (matches.Any())
        {
            if (await ShowContentInUseWarningAsync(item, matches, options)) return;
        }

        //not cancelled, delete content
        try
        {
            PresentationLogic.RemoveContent(item);
        }
        catch (ArgumentOutOfRangeException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (FileNotFoundException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (SerializationException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (IOException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialInUse"], e.Message);
        }
    }

    private async Task DeleteSelected()
    {
        //present "Delete/Cancel" dialog
        var parameters = new DialogParameters
        {
            { "SubmitButtonText", Localizer["Dialog.Delete.Button.Text"].ToString() },
            { "SubmitButtonColor", Color.Error },
            { "DialogText", Localizer["Dialog.DeleteSelected.DialogText"].ToString() },
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
            MaxWidth = MaxWidth.Medium,
        };
        var dialog = await DialogService.ShowAsync<GenericCancellationConfirmationDialog>(Localizer["TaskDelete.DialogService.Title"], parameters, options);
        var result = await dialog.Result;

        if (result.Canceled) return;
        Snackbar.Add(@Localizer["ContentFilesView.Snackbar.MaterialDelete"], Severity.Success);
        
        var contentInUse = GetContentInUseFromDeletionCandidates();

        var doNotFilterForUnused = true;
        if (contentInUse.Any())
        {
            //present "Delete Multiple Contents" dialog
            var parameters2 = new DialogParameters
            {
                { "ContentWorldElementInUseList", contentInUse },
            };
            var dialog2 = await DialogService.ShowAsync<DeleteMultipleContentConfirmationDialog>(Localizer["TaskDelete.DialogService.Title"], parameters2, options);
            var result2 = await dialog2.Result;
            if (result2.Canceled) return;
            doNotFilterForUnused = result2.Data.As<bool>();
        }

        try
        {
            PresentationLogic.RemoveMultipleContents(doNotFilterForUnused ? _deletionCandidates : _deletionCandidates.Where(x => !contentInUse.Any(y => y.Item1.Equals(x))));
        }
        catch (ArgumentOutOfRangeException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (FileNotFoundException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }
        catch (SerializationException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.MaterialDelete"], e.Message);
        }

        _deletionCandidates = _deletionCandidates.Where(x => Items.Contains(x));
    }

    private List<(ILearningContentViewModel, ILearningWorldViewModel, ILearningElementViewModel)> GetContentInUseFromDeletionCandidates()
    {
        var contentInUse = new List<(ILearningContentViewModel, ILearningWorldViewModel, ILearningElementViewModel)>();
        foreach (var candidate in _deletionCandidates)
        {
            var matches = WorkspaceViewModel.LearningWorlds
                .SelectMany(world => world.AllLearningElements
                    .Where(element => element.LearningContent.Equals(candidate))
                    .Select(el => (candidate, world, el)))
                .ToList();
            if (matches.Any())
            {
                contentInUse.AddRange(matches);
            }
        }

        return contentInUse;
    }

    /// <summary>
    /// Shows the user a warning that the content that they are trying to delete is in use.
    /// </summary>
    /// <returns>True if the deletion should be cancelled, false otherwise.</returns>
    private async Task<bool> ShowContentInUseWarningAsync(ILearningContentViewModel item, IEnumerable<(ILearningWorldViewModel world, ILearningElementViewModel el)> matches, DialogOptions options)
    {
        DialogParameters parameters;
        parameters = new DialogParameters
        {
            { nameof(DeleteContentInUseConfirmationDialog.ContentName), item.Name },
            { nameof(DeleteContentInUseConfirmationDialog.WorldElementInUseTuples), matches }
        };
        var warningDialog =
            await DialogService.ShowAsync<DeleteContentInUseConfirmationDialog>(Localizer["WarningDialog.Title"],
                parameters, options);
        var warningResult = await warningDialog.Result;
        return warningResult.Canceled;
    }

    private IEnumerable<(ILearningWorldViewModel, ILearningElementViewModel)> GetUsage(ILearningContentViewModel item)
    {
        var matches = WorkspaceViewModel.LearningWorlds
            .SelectMany(world => world.AllLearningElements
                .Where(element => element.LearningContent.Equals(item))
                .Select(el => (world, el)));
        return matches;
    }

    public async Task RerenderAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    private void OpenContentFilesFolder()
    {
        try
        {
            PresentationLogic.OpenContentFilesFolder();
        }
        catch (InvalidOperationException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesView.ErrorMessage.OpenMaterialFolder"], e.Message);
        }
    }

    private void NewElementWithContent(ILearningContentViewModel content)
    {
        PresentationLogic.SetSelectedLearningContentViewModel(content);
        Mediator.RequestOpenNewElementDialog();
    }

    private void OnCheckedChange(ILearningContentViewModel content, bool isChecked)
    {
        _deletionCandidates = isChecked ? _deletionCandidates.Append(content) : _deletionCandidates.Where(c => !c.Equals(content));
    }

    private void OnSelectAll()
    {
        if (_table != null)
        {
            _deletionCandidates = _table.FilteredItems;
        }
    }

    private void OnSelectAllUnused()
    {
        if (_table != null)
        {
            _deletionCandidates = _table.FilteredItems.Where(i => !GetUsage(i).Any());
        }
    }

    private void OnMultipleSelectedChanged()
    {
        switch (MultipleSelected)
        {
            case null:
            case false:
                OnSelectAll();
                break;
            default:
                _deletionCandidates = new List<ILearningContentViewModel>();
                break;
        }
    }

}