@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Shared
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@using BusinessLogic.Entities.LearningContent
@using Presentation.Components.Forms
@using Presentation.Components.Forms.Content
<header class="m-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-xl text-center font-bold text-adlergrey-500 mx-2">@Localizer["Header.Text"].Value</h2>
    </div>
</header>
<MudDivider DividerType="DividerType.Middle" Class="my-4"></MudDivider>
<MudStack Class="w-full">
    <div class="flex flex-col relative">

        @if (Working)
        {
            <MudProgressCircular Indeterminate="true" Class="z-40 m-auto absolute top-0 bottom-0 left-0 right-0"
                                 Color="Color.Primary" Size="Size.Large"/>
        }

        <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnFilesChanged" Hidden="false"
                       Accept="@AllowedFileEndings.EndingsCommaSeparated"
                       InputClass="absolute w-full h-full opacity-0 z-10 cursor-pointer"
                       @ondragenter="SetDragClass" @ondragleave="ClearDragClass"
                       @ondragend="ClearDragClass">
            <ButtonTemplate>
                <MudPaper Class="@PaperClasses" Outlined="true">
                    <div class="h-32 flex flex-col justify-center items-center">
                        <img class="w-9" src="CustomIcons/drag-and-drop-icon-nobg.png" alt="drag-and-drop">
                        <h1 class="flex text-base justify-center break-word w-[40rem] font-bold text-adlerdarkblue mx-4">@Localizer["FileUpload.ButtonTemplate.Text1"]</h1>
                        <p class="flex justify-center text-sm text-center break-word w-[40rem] mx-4">@Localizer["FileUpload.ButtonTemplate.Text2", AllowedFileEndings.EndingsCommaSeparatedNicely]</p>
                    </div>
                </MudPaper>

            </ButtonTemplate>
        </MudFileUpload>

    </div>
    <Collapsable Title=@Localizer["Collapsable.Title"] Collapsed="true">
        <AddLinkForm/>
    </Collapsable>

</MudStack>

@code {


    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILogger<ContentFilesAdd> Logger { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<ContentFilesAdd> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IErrorService ErrorService { get; set; }

    [CascadingParameter(Name = "RerenderContentContainer")]
    public Func<Task>? RerenderContentFilesContainer { get; set; }


    private string DragClass { get; set; } = "";
    private string PaperClasses => $"h-32 relative border-4 border-dotted border-adlerbggradientfrom bg-buttonbgblue {DragClass}";
    private bool Working { get; set; } = false;

    /// <summary>
    /// Iterates all files, copies them into a new stream and passes said stream to presentation logic
    /// </summary>
    private void OnFilesChanged(InputFileChangeEventArgs obj)
    {
    //PLEASE leave this as a Task.Run, otherwise copying the streams over will block the UI thread
    //indefinitely for no apparent reason
        Task.Run(async () =>
        {
            Logger.LogTrace("Entered OnFilesChanged in ContentFilesAdd");
            ToggleSpinner();
            Logger.LogTrace("Getting up to 10 files from InputFileChangeEventArgs");

            var files = obj.GetMultipleFiles();
            Logger.LogDebug("Got {FileCount} files from InputFileChangeEventArgs", files.Count);

            foreach (var file in files)
            {
                var fileEnding = file.Name.Split(".").Select(s => "." + s).LastOrDefault();
                if (fileEnding is null || !AllowedFileEndings.Endings.Contains(fileEnding.ToLowerInvariant()))
                {
                    await InvokeAsync(async () => await DialogService.ShowMessageBox("Unsupported file ending", $"The supplied file {file.Name} is not supported."));
                    continue;
                }
                await HandleFileAsync(file);
            }

            Logger.LogTrace("Rerendering ContentFilesContainer");
            var rerenderTask = RerenderContentFilesContainer?.Invoke();
            if (rerenderTask is not null)
                await rerenderTask;
            ToggleSpinner();
            ClearDragClass();
        });
    }

    private async Task HandleFileAsync(IBrowserFile file)
    {
        if (file.Size == 0)
        {
            Logger.LogTrace("File size is 0, skipping file {FileName}", file.Name);
    //we must run this on the UI thread, as it is a UI component
            await InvokeAsync(() =>
                DialogService.ShowMessageBox(Localizer["DialogService.MessageBox.Title"], Localizer["DialogService.MessageBox.Text", file.Name])
                );
            return;
        }

        Logger.LogTrace("Opening stream for file {FileName}, Filesize is {FileSize}", file.Name, file.Size);
        Stream stream;
        try
        {
            stream = file.OpenReadStream(1_000_000_000);
            Logger.LogTrace("BrowserFileStream opened");
        }
        catch (IOException)
        {
            ErrorService.SetError(Localizer["FileTooBig.Error.Title"], Localizer["FileTooBig.Error.Text"]);
            return;
        }
        Logger.LogTrace("Copying BrowserFileStream to MemoryStream");
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        await stream.DisposeAsync();

        var fileName = PathHelper.TrimFileName(file.Name);

        Logger.LogTrace("Calling LoadLearningContentViewModel");
    //TODO: report when a file with same content already exists
        try
        {
            PresentationLogic.LoadLearningContentViewModel(fileName, memoryStream);
        }
        catch (IOException e)
        {
            ErrorService.SetError("Error while loading content", e.Message);
        }
        Logger.LogTrace("LoadLearningContentViewModel returned");
    }

    private void ToggleSpinner()
    {
        Working = !Working;
        InvokeAsync(StateHasChanged);
    }

    private void SetDragClass()
    {
        DragClass = "mud-border-dashed mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = "";
    }

}