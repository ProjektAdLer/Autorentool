@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Shared
@inject ISnackbar Snackbar
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms
@using Presentation.Components.Forms.Content
@using System.Diagnostics.CodeAnalysis
@using System.IO.Compression
@using BusinessLogic.Entities.LearningContent
@using BusinessLogic.ErrorManagement.DataAccess
@using H5pPlayer.Api
@using H5pPlayer.BusinessLogic.Api.JavaScript
@using H5pPlayer.BusinessLogic.UseCases.TerminateH5pPlayer
@using H5pPlayer.DataAccess.FileSystem
@using Presentation.Components.Dialogues
@using Shared.Configuration
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

<MudStack Class="w-full h-full border-r-2 border-dotted border-adlergrey-200 bg-adlerbgbright">
    <header class="py-2 bg-adlerbgbright border-y-2 border-adlergrey-100 overflow-hidden flex justify-center">
        <h2 class="text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">@Localizer["ContentFilesAdd.Header"].Value</h2>
    </header>
    <div class="flex flex-col relative px-4">
        <div class="flex justify-end">
            <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                <TooltipContent>
                    <MudText Class="cursor-default text-xs">@Localizer["FileUpload.ButtonTemplate.Text2", AllowedFileEndings.EndingsCommaSeparatedNicely]</MudText>
                </TooltipContent>
                <ChildContent>
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey-500 hover:text-adlerdarkblue"></MudIcon>
                </ChildContent>
            </MudTooltip>
        </div>

        @if (Working)
        {
            <MudProgressCircular Indeterminate="true" Class="z-40 m-auto absolute top-0 bottom-0 left-0 right-0"
                                 Color="Color.Info" Size="Size.Large"/>
        }

        <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnFilesChangedAsync" Hidden="false"
                       Accept="@AllowedFileEndings.EndingsCommaSeparated" @ref="_fileUpload" Class=""
                       InputClass="absolute w-full h-full opacity-0 z-10 cursor-pointer"
                       @ondragenter="SetDragClass" @ondragleave="ClearDragClass"
                       @ondragend="ClearDragClass" @ondrop="ClearDragClass"
                       @onmouseover="SetHoverClass" @onmouseout="ClearHoverClass">
            <ActivatorContent>
                <MudPaper Class="@PaperClasses" Outlined="true">
                    <MudElement Class="h-full w-full grow shrink flex flex-col justify-center items-center">
                        @* ReSharper disable Html.PathError *@
                        <img class="w-6 2xl:w-8" src="CustomIcons/drag-and-drop-icon-nobg.png" alt="drag-and-drop">
                        @* ReSharper restore Html.PathError *@
                        <div class="flex flex-row gap-2">
                            <p class="flex justify-center text-xs 2xl:text-sm text-center break-word w-full mx-2 font-bold text-adlerdarkblue">@Localizer["FileUpload.ButtonTemplate.Text1"]</p>
                        </div>
                    </MudElement>
                </MudPaper>

            </ActivatorContent>
        </MudFileUpload>

    </div>
    <div class="px-4 pt-4">
        <Collapsable Title=@Localizer["Collapsable.Title"] InitiallyCollapsed="false">
            <AddLinkForm/>
        </Collapsable>
    </div>
</MudStack>

@code {


    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILogger<ContentFilesAdd> Logger { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<ContentFilesAdd> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IErrorService ErrorService { get; set; }

    [CascadingParameter(Name = "RerenderContentContainer")]
    public Func<Task>? RerenderContentFilesContainer { get; set; }
    
    private string PaperClasses => $"h-28 relative border-4 border-dotted border-adlerbggradientfrom bg-adlerbggradientto m-0 {DragClass} {HoverClass}";
    private string DragClass { get; set; } = "";
    private string HoverClass { get; set; } = "";
    
    private bool Working { get; set; } = false;

    private MudFileUpload<IReadOnlyList<IBrowserFile>> _fileUpload = null!;

    /// <summary>
    /// Iterates all files, copies them into a new stream and passes said stream to presentation logic
    /// </summary>
    private async Task OnFilesChangedAsync(InputFileChangeEventArgs obj)
    {
        //PLEASE leave this as a Task.Run, otherwise copying the streams over will block the UI thread
        //indefinitely for no apparent reason
        try
        {
            Logger.LogTrace("Entered OnFilesChanged in ContentFilesAdd");
            ToggleSpinner();
            Logger.LogTrace("Getting up to 10 files from InputFileChangeEventArgs");

            var files = obj.GetMultipleFiles();
            Logger.LogDebug("Got {FileCount} files from InputFileChangeEventArgs", files.Count);

            foreach (var file in files)
            {
                var fileEnding = file.Name.Split(".").Skip(1).Select(s => "." + s).LastOrDefault();
                if (fileEnding is not null && fileEnding.ToLowerInvariant() == ".zip")
                {
                    await HandleZipFileAsync(file);
                    continue;
                }

                if (fileEnding is null || !AllowedFileEndings.Endings.Contains(fileEnding.Trim().ToLowerInvariant()))
                {
                    Snackbar.Add(@Localizer["ContentFilesAdd.UnsupportedFileEnding.Snackbar"], Severity.Error);
                    await InvokeAsync(async () => await DialogService.ShowMessageBox(@Localizer["Invocation.MessageBox.Title"], Localizer["Invocation.MessageBox.Message", file.Name]));
                    continue;
                }
                await HandleFileAsync(file);
                
#if DEBUG
                 if (fileEnding.ToLowerInvariant()  == ".h5p")
                 {
                     var h5pZipSourcePath = Path.Combine(ApplicationPaths.ContentFolder , file.Name);
                     var baseUri = new Uri(Navigation.BaseUri); 
                     var unzippedH5ps= new Uri(baseUri, "H5pStandalone/h5p-folder/"); 
                     
                     Logger.LogTrace("Start H5P-Player with: " + 
                                     "h5pZipSourcePath: " + h5pZipSourcePath + Environment.NewLine +
                                      "unzippedH5psPath: " + unzippedH5ps.AbsoluteUri );
                      
                      OpenH5pPlayerDialog(h5pZipSourcePath, unzippedH5ps.AbsoluteUri);
                 }
#endif
            }

            Logger.LogTrace("Rerendering ContentFilesContainer");
            var rerenderTask = RerenderContentFilesContainer?.Invoke();
            if (rerenderTask is not null)
                await rerenderTask;
        }
        finally
        {
            ToggleSpinner();
            ClearDragClass();
            await _fileUpload.ResetAsync();
        }

    }
   
    private async Task HandleZipFileAsync(IBrowserFile zipFile)
    {
        var zipStream = zipFile.OpenReadStream(1_000_000_000);
        using var mS = new MemoryStream();
        await zipStream.CopyToAsync(mS);
        await zipStream.DisposeAsync();
        mS.Position = 0;
        using var archive = new ZipArchive(mS, ZipArchiveMode.Read);

        if (!archive.Entries.Any() || archive.Entries.All(entry => entry.Length == 0))
        {
            Snackbar.Add(@Localizer["ContentFilesAdd.EmptyFile.Snackbar"], Severity.Error);
            await InvokeAsync(() => DialogService.ShowMessageBox(@Localizer["ContentFilesAdd.EmptyFile.Title"], @Localizer["ContentFilesAdd.EmptyFile.Text"]));
            return; 
        }
        
        var successfulFiles = new List<string>();
        var unsupportedFiles = new List<string>();
        var errorFiles = new List<string>();
        var duplicateFiles = new List<string>();
       
        foreach (var entry in archive.Entries)
        {
            if (entry.Length == 0) continue;
            var fileName = PathHelper.TrimFileName(entry.Name);
            var fileEnding = string.Concat(entry.Name.Split(".").Skip(1).Last().Prepend('.'));
            fileEnding = fileEnding.Trim().ToLowerInvariant();
            if (!AllowedFileEndings.Endings.Contains(fileEnding))
            {
                
                unsupportedFiles.Add(entry.FullName);
                continue;
            }
   
                
            using var memoryStream = new MemoryStream();
            await entry.Open().CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            try
            {
                await PresentationLogic.LoadLearningContentViewModelAsync(fileName, memoryStream);
                successfulFiles.Add(entry.FullName);
            }
            catch (IOException e)
            {
                ErrorService.SetError(Localizer["DialogService.MessageBox.Import.ErrorMessage"], e.Message);
                Snackbar.Add(@Localizer["ContentFilesAdd.FileLoadingError.Snackbar"], Severity.Error);
                errorFiles.Add(entry.FullName);
            }
            catch (HashExistsException)
            {
                Snackbar.Add(@Localizer["ContentFilesAdd.DuplicatedFile.Snackbar"], Severity.Warning);
                duplicateFiles.Add(entry.FullName);
            }
        }
        
        if (unsupportedFiles.Count > 0)
        {
            Snackbar.Add(@Localizer["ContentFilesAdd.UnsupportedFileEnding.Snackbar"], Severity.Error);
        }
        
        if (successfulFiles.Count > 0)
        {
            Snackbar.Add(@Localizer["ContentFilesAdd.AddedMaterial.Success"]);
        }

        var parameters = new DialogParameters
        {
            { nameof(ImportZipDialog.FileName), zipFile.Name },
            { nameof(ImportZipDialog.SuccessfulFiles), successfulFiles },
            { nameof(ImportZipDialog.DuplicateFiles), duplicateFiles },
            { nameof(ImportZipDialog.UnsupportedFiles), unsupportedFiles },
            { nameof(ImportZipDialog.ErrorFiles), errorFiles }
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
            BackdropClick = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
        };
        var dialog = await DialogService.ShowAsync<ImportZipDialog>(Localizer["DialogService.MessageBox.Import.Title"], parameters, options);
        await dialog.Result;
    }

    private async Task HandleFileAsync(IBrowserFile file)
    {
        if (file.Size == 0)
        {
            Logger.LogTrace("File size is 0, skipping file {FileName}", file.Name);
            Snackbar.Add(@Localizer["ContentFilesAdd.EmptyFile.Snackbar"], Severity.Error);
            //we must run this on the UI thread, as it is a UI component
            await InvokeAsync(() => DialogService.ShowMessageBox(Localizer["DialogService.MessageBox.Title"], Localizer["DialogService.MessageBox.Text", file.Name]));
            return;
        }

        Logger.LogTrace("Opening stream for file {FileName}, Filesize is {FileSize}", file.Name, file.Size);
        Stream stream;
        try
        {
            stream = file.OpenReadStream(1_000_000_000);
            Logger.LogTrace("BrowserFileStream opened");
        }
        catch (IOException)
        {
            Snackbar.Add(@Localizer["ContentFilesAdd.LargeFile.Snackbar"], Severity.Error);
            ErrorService.SetError(Localizer["FileTooBig.Error.Title"], Localizer["FileTooBig.Error.Text"]);
            return;
        }

        Logger.LogTrace("Copying BrowserFileStream to MemoryStream");
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        await stream.DisposeAsync();

        var fileName = PathHelper.TrimFileName(file.Name);

        Logger.LogTrace("Calling LoadLearningContentViewModel");
        try
        {
            await PresentationLogic.LoadLearningContentViewModelAsync(fileName, memoryStream);
            Snackbar.Add(@Localizer["ContentFilesAdd.AddedMaterial.Success"]);
        }
        catch (IOException e)
        {
            ErrorService.SetError(@Localizer["ContentFilesAdd.ErrorMessage.LoadingMaterial"], e.Message);
        }
        catch (HashExistsException)
        {
            await InvokeAsync(() => { DialogService.ShowMessageBox(Localizer["DialogService.MessageBox.Duplicate.Title"], Localizer["DialogService.MessageBox.Duplicate.Text", file.Name]);});
            Snackbar.Add(@Localizer["ContentFilesAdd.DuplicatedFile.Snackbar"], Severity.Warning);
        }
        
        Logger.LogTrace("LoadLearningContentViewModel returned");
    }

    private async void OpenH5pPlayerDialog(string h5pZipSourcePath, string unzippedH5psPath)
    {
        
       
        var options = new DialogOptions
        {
            BackdropClick = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };
        var parameters = new DialogParameters()
        {
            {"H5pZipSourcePath", h5pZipSourcePath},
            {"UnzippedH5psPath", unzippedH5psPath}
        };
        
        var dialog = await DialogService.ShowAsync<PlayerH5p>("H5P-Player", parameters, options);

        // Warten, bis der Dialog geschlossen wird
        var result = await dialog.Result;
        var javaScriptAdapter = new CallJavaScriptAdapter(JsRuntime);
        var dataAccess = new FileSystemDataAccess();
        ITerminateH5pPlayerUcPort terminateH5pPlayer = new TerminateH5pPlayerUc(javaScriptAdapter, dataAccess);
        // Überprüfen, ob der Dialog abgebrochen oder mit einem Ergebnis geschlossen wurde
        if(result == null) return;
        if (result.Canceled)
        {
            // Der Benutzer hat den Dialog abgebrochen oder geschlossen (z.B. durch das Schließen-X)
            Logger.LogInformation("Der Dialog wurde abgebrochen oder geschlossen.");
            
            await terminateH5pPlayer.TerminateH5pPlayer();
            dialog.Close();
            try
            {
                 await JsRuntime.InvokeVoidAsync("terminateH5pStandalone");

            }
            catch (JSException ex)
            {
                Logger.LogError("JSException: Could not call 'terminateH5pStandalone': {Message}", ex.Message);
            }
        }
        else
        {
            // Der Dialog wurde mit einem Ergebnis geschlossen, hier können Sie das Ergebnis verarbeiten
            var dialogData = result.Data;
            Logger.LogInformation($"Dialog wurde mit Ergebnis geschlossen: {dialogData}");
            await terminateH5pPlayer.TerminateH5pPlayer();
            dialog.Close();
           
            try
            {
                await JsRuntime.InvokeVoidAsync("terminateH5pStandalone");

            }
            catch (JSException ex)
            {
                Logger.LogError("JSException: Could not call 'terminateH5pStandalone': {Message}", ex.Message);
            }
        }
        await InvokeAsync(StateHasChanged);
    }
    

    
    private void ToggleSpinner()
    {
        Working = !Working;
        InvokeAsync(StateHasChanged);
    }

    private void SetDragClass()
    {
        DragClass = "bg-adlerblue-200 border-4 border-dotted border-adlerblue-500";
    }
    
    private void ClearDragClass()
    {
        DragClass = "";
    }

    private void SetHoverClass()
    {
        HoverClass = "bg-adlerblue-200 border-4 border-dotted border-adlerblue-500";
    }
    
    private void ClearHoverClass()
    {
        HoverClass = "";
    }

}