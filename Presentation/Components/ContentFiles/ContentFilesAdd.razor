@using Presentation.Components.Forms.Content
@using Presentation.Components.Forms
@using Presentation.PresentationLogic.API
<MudStack Class="w-full">
    <div class="flex flex-col">
        <header class="m-2 rounded-lg">
            <div class="flex justify-center p-2">
                <h2 class="text-xl text-center font-bold text-adlergrey-500 mx-2">Import of all files</h2>
            </div>
        </header>
        @if (Working)
        {
            <div class="w-full h-full bg-adlergrey-100 bg-opacity-25 z-40">
            </div>
            <MudProgressCircular Indeterminate="true" Class="z-50 m-auto"
                                 Color="Color.Primary" Size="Size.Large"/>
        }
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnFilesChanged" Hidden="false"
                       InputClass="opacity-0 z-10"
                       @ondragenter="SetDragClass" @ondragleave="ClearDragClass"
                       @ondragend="ClearDragClass">
            <ButtonTemplate>
                <MudPaper Class="@PaperClasses" Outlined="true">
                    <MudText Typo="Typo.body1">Drag and drop files here or click to add them.</MudText>
                </MudPaper>
            </ButtonTemplate>
        </MudFileUpload>
    </div>
    <Collapsable Title="Add Link" Collapsed="true">
        <AddLinkForm/>
    </Collapsable>

</MudStack>

@code {

    [Inject]
    private IPresentationLogic PresentationLogic { get; set; }

    [Inject]
    private ILogger<ContentFilesAdd> Logger { get; set; }

    [CascadingParameter]
    public ContentFilesContainer ContentFilesContainer { get; set; }

    private string DragClass { get; set; } = "";
    private string PaperClasses => $"h-32 flex items-center justify-center relative {DragClass}";
    private bool Working { get; set; } = false;

    //iterates all files, copies them into a new stream and passes said stream to presentation logic
    private void OnFilesChanged(InputFileChangeEventArgs obj)
    {
        Task.Run(async () =>
        {
            Logger.LogTrace("Entered OnFilesChanged in ContentFilesAdd");
            ToggleSpinner();
            Logger.LogTrace("Entered OnFilesChanged in ContentFilesAdd");
            Logger.LogTrace("Getting up to 10 files from InputFileChangeEventArgs");

            var files = obj.GetMultipleFiles(10);
            Logger.LogDebug("Got {FileCount} files from InputFileChangeEventArgs", files.Count);

            foreach (var file in files)
            {
                Logger.LogTrace("Opening stream for file {FileName}, Filesize is {FileSize}", file.Name, file.Size);
                await using var stream = file.OpenReadStream(1_000_000_000);
                Logger.LogTrace("BrowserFileStream opened");

                Logger.LogTrace("Copying BrowserFileStream to MemoryStream");
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);

                Logger.LogTrace("Calling LoadLearningContentViewModel");
    //TODO: report when a file with same content already exists
                PresentationLogic.LoadLearningContentViewModel(file.Name, memoryStream);
                Logger.LogTrace("LoadLearningContentViewModel returned");
            }

            Logger.LogTrace("Rerendering ContentFilesContainer");
            await ContentFilesContainer.RerenderAsync();
            ToggleSpinner();
        });
    }

    private void ToggleSpinner()
    {
        Working = !Working;
        InvokeAsync(StateHasChanged);
    }

    private void SetDragClass()
    {
        DragClass = "mud-border-dashed mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = "";
    }

}