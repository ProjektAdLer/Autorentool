@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using MudBlazor.Utilities
<section class="flex flex-row justify-center h-12">
    <div dir="ltr" class="flex justify-center items-center">
        <button title=@Localizer["Localizer.German.Short.Text.Hover"]
                class="@GermanButtonClass.Build()"
                @onclick="() => SetCulture(_supportedCultures[0])">
            <p class="@GermanPClass.Build()">
                @Localizer["Localizer.German.Short.Text"]
            </p>
        </button>
        @* ReSharper disable Html.PathError *@
        <img src="CustomIcons/HeaderBar/german-flag.png" alt="german-flag-icon"
             class="@GermanImageClass.Build()">
        @* ReSharper restore Html.PathError *@
    </div>
    <div dir="rtl" class="flex justify-center items-center">
        <button title=@Localizer["Localizer.English.Short.Text.Hover"]
                class="@EnglishButtonClass.Build()"
                @onclick="() => SetCulture(_supportedCultures[1])">
            <p class="@EnglishPClass.Build()">
                @Localizer["Localizer.English.Short.Text"]
            </p>
        </button>
        @* ReSharper disable Html.PathError *@
        <img src="CustomIcons/HeaderBar/great-britain-flag.png" alt="great-britain-flag-icon"
             class="@EnglishImageClass.Build()">
        @* ReSharper restore Html.PathError *@
    </div>
</section>

@code
{

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public INavigationManagerWrapper Navigation { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public IStringLocalizer<CultureSelector> Localizer { get; set; }


    private CultureInfo[] _supportedCultures =
    {
        new("de-DE"),
        new("en-DE")
    };

    protected override void OnInitialized()
    {
        Culture = CultureInfo.CurrentCulture;
    }

    /// <summary>
    /// Gets or sets the current culture of the application.
    /// </summary>
    private CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (Equals(CultureInfo.CurrentCulture, value)) return;
            var uri = new Uri(Navigation.Uri)
                .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
            var cultureEscaped = Uri.EscapeDataString(value.Name);
            var uriEscaped = Uri.EscapeDataString(uri);

            Navigation.NavigateTo(
                $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
                forceLoad: true);
        }
    }

    private void SetCulture(CultureInfo culture)
    {
        Culture = culture;
    }

    private bool GermanSelected => Equals(Culture, _supportedCultures[0]);
    private bool EnglishSelected => Equals(Culture, _supportedCultures[1]);

    private CssBuilder ButtonBaseClass => new("text-white bg-adlerdarkblue py-1 px-2");
    private CssBuilder PBaseClass => new("z-10 text-white font-bold");
    private CssBuilder ImageBaseClass => new("z-0 pointer-events-none absolute rounded-full bg-white w-6 h-6");

    private CssBuilder GermanButtonClass =>
        ButtonBaseClass
            .AddClass("rounded-l-[28px] german")
            .AddClass("bg-adlerbggradientto", !GermanSelected);

    private CssBuilder GermanPClass =>
        PBaseClass
            .AddClass("german")
            .AddClass("text-adlerbggradientto", !GermanSelected);

    private CssBuilder GermanImageClass =>
        ImageBaseClass
            .AddClass("german")
            .AddClass("opacity-20", !GermanSelected)
            .AddClass("opacity-90", GermanSelected);

    private CssBuilder EnglishButtonClass =>
        ButtonBaseClass
            .AddClass("rounded-r-[28px] english")
            .AddClass("bg-adlerbggradientto", !EnglishSelected);

    private CssBuilder EnglishPClass =>
        PBaseClass
            .AddClass("english")
            .AddClass("text-adlerbggradientto", !EnglishSelected);

    private CssBuilder EnglishImageClass =>
        ImageBaseClass
            .AddClass("english")
            .AddClass("opacity-20", !EnglishSelected)
            .AddClass("opacity-90", EnglishSelected);

}