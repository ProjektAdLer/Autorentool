@using System.Globalization
@using Microsoft.Extensions.Localization
@inject NavigationManager Navigation
@inject IStringLocalizer<CultureSelector> Localizer

<div class="flex flex-row justify-center">
    <button @onclick="() => SetCulture(supportedCultures[0])" class="my-2 mx-4 @(Equals(Culture, supportedCultures[0]) ? "hidden" : "")">
        <img class="w-12 rounded-lg" src="CustomIcons/german-flag-long.png" alt="german">
    </button>
    <button @onclick="() => SetCulture(supportedCultures[1])" class="my-2 mx-4 @(Equals(Culture, supportedCultures[1]) ? "hidden" : "")">
        <img class="w-12 rounded-lg" src="CustomIcons/great-britain-flag.png" alt="english">
    </button>
</div>

@code
{
    private CultureInfo[] supportedCultures = 
    {
        new("de-DE"),
        new("en-DE")
    };

    protected override void OnInitialized()
    {
        Culture = CultureInfo.CurrentCulture;
    }

    /// <summary>
    /// Gets or sets the current culture of the application.
    /// </summary>
    private CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (Equals(CultureInfo.CurrentCulture, value)) return;
            var uri = new Uri(Navigation.Uri)
                .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
            var cultureEscaped = Uri.EscapeDataString(value.Name);
            var uriEscaped = Uri.EscapeDataString(uri);

            Navigation.NavigateTo(
                $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
                forceLoad: true);
        }
    }

    private void SetCulture(CultureInfo culture)
    {
        Culture = culture;
    }
}