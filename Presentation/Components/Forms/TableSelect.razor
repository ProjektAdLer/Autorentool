@typeparam T
@inherits MudBaseInput<T>
<MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" @ref="_mudTable"
          RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent" T="@T"
          Filter="Filter">
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Outlined.Search"/>
    </ToolBarContent>
    <HeaderContent>
        @HeaderContent
    </HeaderContent>
    <RowTemplate>
        @RowTemplate.Invoke(context)
    </RowTemplate>
</MudTable>

@code {

    [Parameter, EditorRequired]
    public IEnumerable<T> Elements { get; set; }

    [Parameter, EditorRequired]
    public Func<T, string?, bool>? FilterFunc { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment HeaderContent { get; set; }
    
    [Parameter, EditorRequired]
    public RenderFragment<T> RowTemplate { get; set; }


    private MudTable<T>? _mudTable;
    private string? _searchString;

    private void RowClickEvent(TableRowClickEventArgs<T> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs.Item.Equals(Value))
        {
            DeselectRow();
        }
        else
        {
            SelectRow(tableRowClickEventArgs);
        }
    }

    private void DeselectRow()
    {
    // we have to suppress the nullability warning here as we specifically want to set the value to null
    // if T is a reference type, but the compiler believes that the type T is not nullable
    // The behaviour is basically set to null if T is a reference type, otherwise set to default(T),
    // that way, enums and structs are also supported
        SetValueAsync(default!);
    }

    private void SelectRow(TableRowClickEventArgs<T> tableRowClickEventArgs)
    {
        SetValueAsync(tableRowClickEventArgs.Item);
        InvokeAsync(StateHasChanged);
    }

    private string SelectedRowClassFunc(T element, int rowNumber)
    {
        if (element == null) return string.Empty;
        return element.Equals(Value) ? "bg-adlergrey-600" : string.Empty;
    }

    private bool Filter(T element) =>
        FilterInternal(element, _searchString);

    private bool FilterInternal(T element, string? searchString) => FilterFunc(element, searchString);

}