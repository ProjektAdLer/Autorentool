<MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
    <MudText Color="@((bool)IsLeftSelected! ? Color.Info : Color.Dark)">@LeftLabel</MudText>
    @if (IconIsSvg(LeftLabelIconSvg))
    {
        <MudIcon Class="w-5 h-5 drop-shadow opacity-60" Icon="@LeftLabelIconSvg"/>
    }
    <MudSwitch Value="@((bool)IsRightSelected!)"
               ValueChanged="@(async (bool v) => await OnValueChanged(v))"
               Color="Color.Info"
               UnCheckedColor="Color.Dark"
               Style="margin-right: 0; margin-left: 2px"/>
    @if (IconIsSvg(RightLabelIconSvg))
    {
        <MudIcon Class="w-5 h-5 drop-shadow opacity-60" Icon="@RightLabelIconSvg"/>
    }
    <MudText Color="@((bool)IsRightSelected! ? Color.Info : Color.Dark)">@RightLabel</MudText>
</MudStack>


@code {

    [Parameter, EditorRequired] public bool? IsLeftSelected { get; set; } = null!;
    [Parameter] public EventCallback<bool> IsLeftSelectedChanged { get; set; }
    [Parameter, EditorRequired] public bool? IsRightSelected { get; set; } = null!;
    [Parameter] public EventCallback<bool> IsRightSelectedChanged { get; set; }
    [Parameter] public string LeftLabel { get; set; } = string.Empty;
    [Parameter] public string LeftLabelIconSvg { get; set; } = string.Empty;
    [Parameter] public string RightLabel { get; set; } = string.Empty;
    [Parameter] public string RightLabelIconSvg { get; set; } = string.Empty;


    protected override void OnParametersSet()
    {
        if (IsLeftSelected == null && IsRightSelected == null)
        {
            throw new ArgumentException("At least one of IsLeftSelected or IsRightSelected must be set.");
        }

        if (IsLeftSelected == null)
        {
            IsLeftSelected = !IsRightSelected;
            return;
        }

        if (IsRightSelected == null)
        {
            IsRightSelected = !IsLeftSelected;
            return;
        }

        if (IsLeftSelected != IsRightSelected) return;
        IsLeftSelected = !IsRightSelected;
    }

    private async Task OnValueChanged(bool newValue)
    {
        if (IsRightSelected != newValue)
        {
            IsLeftSelected = !newValue;
            IsRightSelected = newValue;
            await IsLeftSelectedChanged.InvokeAsync((bool)IsLeftSelected);
            await IsRightSelectedChanged.InvokeAsync((bool)IsRightSelected);
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool IconIsSvg(string iconSvg)
    {
        return iconSvg != string.Empty && iconSvg.StartsWith("<svg", StringComparison.OrdinalIgnoreCase) && iconSvg.EndsWith("</svg>", StringComparison.OrdinalIgnoreCase);
    }

}