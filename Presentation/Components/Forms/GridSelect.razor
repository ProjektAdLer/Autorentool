@typeparam T where T : notnull
@using System.Diagnostics.CodeAnalysis
@using MudBlazor.Utilities
@inherits MudBaseInput<T>

<div class="flex flex-col w-[100%] h-52 bg-adlerbgbright border-adlergrey-100 border-4 rounded">
    @if (FilterFuncSearchableStrings is not null)
    {
        <div class="w-full h-1/3 flex flex-row justify-between">
            <div>
                <MudTextField T="string"
                              Class="fixed w-1/3 px-2 mt-0"
                              Immediate="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Outlined.Search"
                              @bind-Value="_searchString"/>
            </div>
            <div>
                @if (Error)
                    {
                        <MudText Class="text-formerror px-2 text-sm">@ErrorText</MudText>
                    }
            </div>
        </div>
    }
    
    <div class="h-2/3 w-full overflow-auto">
        <div class="z-50 py-2 grid grid-cols-7 2xl:grid-cols-5 gap-4 items-start justify-start justify-items-center place-items-center p-0 h-32 text-xs font-bold break-all leading-none text-adlertextgrey">
            @for (var i = 0; i < FilteredElements.Count(); i++)
            {
                var element = FilteredElements.ElementAt(i);
                <div onclick="@(() => SelectAsync(element))" class="@GetCssBuilder(element, i)">
                    @ElementTemplate(element)
                </div>
            }
        </div>
    </div>
</div>

@code {

    [Parameter, EditorRequired, AllowNull] public IEnumerable<T> Elements { get; set; }

    [Parameter, EditorRequired, AllowNull] public RenderFragment<T> ElementTemplate { get; set; }

    [Parameter] public Func<T, IEnumerable<string>>? FilterFuncSearchableStrings { get; set; }
    
    [Parameter]
    public bool AllowDeselect { get; set; } = true;

    private IEnumerable<T> FilteredElements => FilterFuncSearchableStrings is null || string.IsNullOrWhiteSpace(_searchString) ? Elements : Elements.Where(ele => FilterFuncSearchableStrings(ele).Any(str => str.ToLower().Contains(_searchString.ToLower())));

    private string? _searchString = "";

    private string GetCssBuilder(T element, int i) => new CssBuilder("cursor-pointer")
        .AddClass($"element-{i}")
        .Build();

    private async Task SelectAsync(T element)
    {
        if (element.Equals(Value))
        {
            if (AllowDeselect)
            {
                await SetValueAsync(default!);
            }
        }
        else
        {
            await SetValueAsync(element);
        }
    }

}