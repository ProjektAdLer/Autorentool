@using Presentation.PresentationLogic.LearningWorld
@using Shared
@using AutoMapper
@using BusinessLogic.Entities
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningElement
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Adaptivity.Dialogues
@using Presentation.Components.Forms.Buttons
@using Presentation.PresentationLogic.LearningContent.Story
@using Shared.Observer
<header class="m-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-base 2xl:text-xl text-center font-bold text-adlergrey-500 mx-2">@(GetHeaderText())</h2>
    </div>
</header>
<MudDivider DividerType="DividerType.Middle" Class="mt-4 mb-2"></MudDivider>
<MudText Class="text-adlergrey-200 w-4/4 px-4 text-xs">@Localizer["EditElementForm.Text"]</MudText>
<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement"
          OnValidSubmit="OnValidSubmit" OnValidFieldChange="OnValidFieldChange"
          SnackbarMessage="@GetSnackbarMessage()"
          FormDataContainer="FormDataContainer">
    <HeaderButtons>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Class="btn-standard"
                   OnClick="async () => await OnNewButtonClicked.InvokeAsync()">
            @Localizer["EditElementForm.NewButton.Text"]
        </MudButton>
    </HeaderButtons>
    <Fields>
        <div class="px-4">
            <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.General.Title"]     @bind-Collapsed="_collapsedGeneral">
                <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  DebounceInterval="DebounceInterval"
                                  Label=@Localizer["EditElementForm.Fields.Collapsable.General.Field.Name.Text"]
                                  Class="pb-4"/>
                    @if (ElementMode != ElementMode.Story)
                    {
                        <MudText Typo="Typo.caption">@Localizer["EditElementForm.Fields.Collapsable.General.Field.Points.Text"]</MudText>
                        <MudNumericField @bind-Value="FormDataContainer.FormModel.Points"
                                         Min="1"
                                         Max="1000"
                                         For="@(() => FormModel.Points)"
                                         DebounceInterval="DebounceInterval"
                                         Variant="Variant.Outlined"
                                         Margin="Margin.Dense"
                                         Class="pb-4"/>

                        <MudText Typo="Typo.caption">@Localizer["EditElementForm.Fields.Collapsable.General.Field.Workload.Text"]</MudText>
                        <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                         Min="0"
                                         Max="1000"
                                         For="@(() => FormModel.Workload)"
                                         DebounceInterval="DebounceInterval"
                                         Variant="Variant.Outlined"
                                         Margin="Margin.Dense"
                                         Class="pb-6"/>
                    }

                    @if (ElementMode == ElementMode.Normal)
                    {
                        <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                                   Immediate="false"
                                   Label="@Localizer["EditElementForm.Fields.Collapsable.General.Field.Difficulty.Text"]"
                                   For="@(() => FormModel.Difficulty)"
                                   Variant="Variant.Outlined">
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonEasy"></MudIcon>
                                    <p class="pt-1">@Localizer["EditElementForm.Difficulty.Easy"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonMedium"></MudIcon>
                                    <p class="pt-1">@Localizer["EditElementForm.Difficulty.Medium"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonHard"></MudIcon>
                                    <p class="pt-1">@Localizer["EditElementForm.Difficulty.Hard"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.None)">@Localizer["EditElementForm.Difficulty.None"]</MudSelectItem>
                        </MudSelect>
                    }
                </div>
            </Collapsable>
        </div>

        @switch (ElementMode)
        {
            case ElementMode.Normal:
                <div class="px-4">
                    <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Title"]     @bind-Collapsed="_collapsedContent">
                        <p class="text-xs pl-6">@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Text"]</p>
                        <TableSelect
                            T="ILearningContentFormModel"
                            @bind-Value="FormDataContainer.FormModel.LearningContent"
                            OnPropertyChangingWithValue="OnContentChanging"
                            For="@(() => FormModel.LearningContent!)"
                            Elements="WorldPresenter.GetAllContent().Select(vm => Mapper.Map<ILearningContentFormModel>(vm))"
                            FilterFuncSearchableStrings="ILearningContentFormModel.GetSearchableStrings">
                            <HeaderContent>
                                <MudTh></MudTh>
                                <MudTh Class="p-0">@Localizer["EditElementForm.Fields.Collapse.LearningContent.Name"]</MudTh>
                                <MudTh Class="p-0">@Localizer["EditElementForm.Fields.Collapse.LearningContent.Type"]</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd Class="p-0">
                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                                                   OnClick="() => PresentationLogic.ShowLearningContentAsync(context)"
                                                   Class="show-content-preview py-2"/>
                                </MudTd>
                                <MudTd Class="p-0" DataLabel="Name">
                                    <MudTooltip Text="@context.Name"
                                                Arrow="true"
                                                Placement="Placement.Right"
                                                Class="bg-adlergrey-200 shadow-xl text-adlergrey-800"
                                                Duration="Double.Epsilon">
                                        <p class="pt-2 cursor-pointer max-w-[5rem] truncate text-ellipsis overflow-hidden">@context.Name</p>
                                    </MudTooltip>
                                </MudTd>
                                <MudTd Class="py-0 pl-0 cursor-default" DataLabel="Type">
                                    @switch (context)
                                    {
                                        case FileContentFormModel fileContentContext:
                                            <span>@fileContentContext.Type</span>
                                            break;
                                        case LinkContentFormModel:
                                            <span>Link</span>
                                            break;
                                        default:
                                            <span>???</span>
                                            break;
                                    }
                                </MudTd>
                            </RowTemplate>
                        </TableSelect>
                    </Collapsable>
                </div>
                break;
            case ElementMode.Adaptivity:
                <div class="px-4">
                    <Collapsable Title=@Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Title"]     @bind-Collapsed="_collapsedTasks">
                        <p class="text-xs pl-6">@Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Text"]</p>
                        <div class="flex flex-col items-center justify-center">
                            <MudButton Class="w-44 2xl:w-3/5 btn-standard add-tasks" OnClick="OpenAdaptivityContentDialog">
                                @Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Text"]
                            </MudButton>
                        </div>
                    </Collapsable>
                </div>
                break;
            case ElementMode.Story:
                <div class="px-4">
                    <Collapsable Title="@Localizer["CreateStoryElementForm.Fields.Collapsable.Story.Title"]" @bind-Collapsed="_collapsedStory">
                        <PseudoFormFieldGrouping
                            For="() => FormModel.LearningContent"
                            @ref="_pseudoGroupStoryContent">
                            <p class="text-xs pl-6">@Localizer["CreateStoryElementForm.Fields.Collapsable.StoryText.Text"]</p>
                            @if (StoryContentModel != null)
                            {
                                @for (var i = 0; i < StoryContentModel.StoryText.Count; i++)
                                {
                                    var x = i;
                                    <div class="flex flex-col">
                                        <div class="flex flex-row">
                                            <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                                           OnClick="@(() => StoryContentModel.StoryText.RemoveAt(x))"/>
                                            <MudTextField T="string" Label="@Localizer["CreateStoryElementForm.Fields.Collapsable.StoryText.Text"]"
                                                          Variant="Variant.Outlined" Lines="5"
                                                          @bind-Value="@(StoryContentModel.StoryText[x])"
                                                          DebounceInterval="DebounceInterval"/>
                                        </div>
                                        <p>@($"{StoryContentModel.StoryText[x].Length}/550")</p>
                                    </div>
                                }

                                <MudIconButton Icon="@Icons.Material.Outlined.Add"
                                               OnClick="@(() => StoryContentModel.StoryText.Add(""))">
                                    ADD CELL
                                </MudIconButton>
                            }
                        </PseudoFormFieldGrouping>
                    </Collapsable>
                </div>
                break;
            default:
                throw new InvalidOperationException($"{nameof(ElementMode)} is out of range");
        }

        <div class="px-4">
            <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Title"]     @bind-Collapsed="_collapsedElementModel">
                <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                    <ElementModelGridSelect @bind-Value="FormDataContainer.FormModel.ElementModel"
                                            For="@(() => FormModel.ElementModel)"
                                            Label="@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.3DRepresentation.Text"]"
                                            Elements="GetElementModels()">
                    </ElementModelGridSelect>
                </div>
            </Collapsable>
        </div>

        <div class="px-4">
            <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.Goals.Title"]     @bind-Collapsed="_collapsedGoals">
                <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                    <MudText Typo="Typo.caption">@Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Description.Text"]</MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-4 mt-0"/>
                    <MudText Typo="Typo.caption">@Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Goals.Text"]</MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                  For="@(() => FormModel.Goals)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-2 mt-0"/>
                </div>
            </Collapsable>
        </div>

    </Fields>
    <FooterButtons>
        <SubmitThenRemapButton RemapAction="MapIntoContainer"/>
        @if (ElementMode == ElementMode.Normal)
        {
            <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                           Class="btn-standard rounded-lg shadow-lg"
                           OnClick="ShowSelectedElementContentAsync"
                           title=@Localizer["EditElementForm.Button.ShowLearningElement.Title"].Value>

            </MudIconButton>
        }
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IElementModelHandler ElementModelHandler { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<EditElementForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningElementViewModel ElementToEdit { get; set; }

    [Parameter, EditorRequired] public EventCallback OnNewButtonClicked { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;

    [Parameter] public ElementMode ElementMode { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    internal Action? TriggerMasterLayoutStateHasChanged { get; set; }


    private LearningElementFormModel FormModel => FormDataContainer.FormModel;
    private StoryContentFormModel? StoryContentModel => FormDataContainer.FormModel.LearningContent as StoryContentFormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedContent = false;
    private bool _collapsedTasks = false;
    private bool _collapsedStory = false;
    private bool _collapsedElementModel = true;
    private bool _collapsedGoals = true;

    private PseudoFormFieldGrouping<ILearningContentFormModel?>? _pseudoGroupStoryContent;

    private void OnValidSubmit(LearningElementFormModel model)
    {
        WorldPresenter.EditLearningElementFromFormModel(ElementToEdit.Parent, ElementToEdit, model);
        // WorldPresenter.EditLearningElement(ElementToEdit.Parent, ElementToEdit, model.Name, model.Description,
        //     //ignore null warning here because validation ensures that LearningContent is not null - m.ho
        //     model.Goals, model.Difficulty, model.ElementModel, model.Workload, model.Points, content);
        TriggerMasterLayoutStateHasChanged?.Invoke();
        //batch command: EditElement + EditStoryContent
        //execute batch command
    }

    private void OnValidFieldChange(LearningElementFormModel model) => OnValidSubmit(model);

    private async Task MapIntoContainer()
    {
        //this is a hacky workaround. we need to reset the container because when we switch between elements, the container still contains the old element before this component is disposed.
        //this is because in ElementFormContainer all element modes use the same component (this one). so when we switch between elements, the component is not disposed and the container is not reset before the new element is mapped into it.
        //TODO: fix this during our 3.0 refactoring - n.stich
        Mapper.Map(ElementToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
    }

    private async Task ShowSelectedElementContentAsync()
    {
        await WorldPresenter.ShowSelectedElementContentAsync(ElementToEdit);
    }

    private void PreviewOnClick(ILearningContentViewModel context)
    {
        PresentationLogic.ShowLearningContentAsync(context);
    }

    private async void OpenAdaptivityContentDialog()
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };
        var parameters = new DialogParameters
        {
            { nameof(AdaptivityContentDialog.MyContent), FormDataContainer.FormModel.LearningContent }
        };
        var dialog = await DialogService.ShowAsync<AdaptivityContentDialog>(Localizer["EditElementForm.AdaptivityContent.Dialog.Title"], parameters, options);
        _ = await dialog.Result;
        StateHasChanged();
    }

    private string GetSnackbarMessage()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["EditElementForm.SnackbarMessage"],
            ElementMode.Adaptivity => Localizer["EditAdaptivityElementForm.SnackbarMessage"],
            ElementMode.Story => Localizer["EditStoryElementForm.SnackbarMessage"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private string GetHeaderText()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["EditElementForm.Header.Text"],
            ElementMode.Adaptivity => Localizer["EditAdaptivityElementForm.Header.Text"],
            ElementMode.Story => Localizer["EditStoryElementForm.Header.Text"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private IEnumerable<ElementModel> GetElementModels()
    {
        var elementModelContentType = ElementMode switch
        {
            ElementMode.Normal when FormModel.LearningContent is FileContentFormModel => ElementModelContentType.File,
            ElementMode.Normal when FormModel.LearningContent is LinkContentFormModel => ElementModelContentType.Link,
            ElementMode.Adaptivity => ElementModelContentType.Adaptivity,
            ElementMode.Story => ElementModelContentType.Story,
            _ => throw new ArgumentOutOfRangeException()
        };
        var fileType = elementModelContentType is ElementModelContentType.File ? ((FileContentFormModel)FormModel.LearningContent!).Type : "";
        return ElementModelHandler.GetElementModels(elementModelContentType, fileType,
            ElementToEdit.Parent?.Theme,
            ElementMode is ElementMode.Adaptivity or ElementMode.Story);
    }

    private void OnContentChanging(PropertyChangingWithValueEventArgs<ILearningContentFormModel> e)
    {
        switch (e.OldValue)
        {
            case LinkContentFormModel when e.NewValue is LinkContentFormModel:
            case FileContentFormModel lC when e.NewValue is FileContentFormModel vC && lC.Type == vC.Type:
            case StoryContentFormModel when e.NewValue is StoryContentFormModel:
            case AdaptivityContentFormModel when e.NewValue is AdaptivityContentFormModel:
                return;
            default:
                FormModel.ElementModel = ElementModelHandler.GetElementModelRandom();
                break;
        }
    }

}