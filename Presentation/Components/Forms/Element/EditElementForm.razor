@using System.Diagnostics.CodeAnalysis
@using AutoMapper
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using Presentation.Components.Adaptivity.Dialogues
@using Presentation.Components.Dialogues
@using Presentation.Components.Forms.Buttons
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Shared
@using Shared.Observer
<header class="py-2 2xl:py-3 bg-adlerbgbright border-b-2 border-adlergrey-100">
    <div class="flex justify-center py-2 2xl:py-3">
        <h2 class="text-base 2xl:text-xl text-center font-bold text-adlerdarkblue-800 mx-2">@(GetHeaderText())</h2>
    </div>
</header>

<div class="flex justify-between items-start p-2">
    <MudText Class="text-adlergrey-200 w-4/4 p-4 text-xs">@Localizer["EditElementForm.Text"]</MudText>

    <MudTooltip Placement="Placement.Bottom" Delay="150" Duration="250" Arrow="true" Class="w-[700px] p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="ErklÃ¤rung">
        <ChildContent>
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-blacktrans-300 hover:text-adlerdarkblue"></MudIcon>
        </ChildContent>
        <TooltipContent>
            <div class="flex flex-row gap-4">
                <div class="flex flex-col gap-4">
                    <div class="flex flex-row gap-4">
                        <p>@((MarkupString)Localizer["EditElementForm.Tooltip.ExplanationLearningElement"].ToString())</p>
                        <p>@((MarkupString)Localizer["EditElementForm.Tooltip.ExplanationAdaptivityElement"].ToString())</p>
                        <p>@((MarkupString)Localizer["EditElementForm.Tooltip.ExplanationLearnAdaptElementPart1"].ToString())</p>
                    </div>

                    <img src="/CustomIcons/PositionFloorPlan.png" alt="@Localizer["EditElementForm.Tooltip.Image.Alt"]"/>
                </div>
                <div class="flex flex-col gap-4">
                    <p>@((MarkupString)Localizer["EditElementForm.Tooltip.ExplanationLearnAdaptElementPart2"].ToString())</p>
                    <p>@((MarkupString)Localizer["EditElementForm.Tooltip.ExplanationStoryElement"].ToString())</p>
                </div>
            </div>
        </TooltipContent>
    </MudTooltip>
</div>


<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement" @ref="_form"
          OnValidSubmit="OnValidSubmit" OnValidFieldChange="OnValidFieldChange"
          SnackbarMessage="@GetSnackbarMessage()"
          FormDataContainer="FormDataContainer">
<HeaderButtons>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Class="btn-standard"
               OnClick="async () => await OnNewButtonClicked.InvokeAsync()">
        @Localizer["EditElementForm.NewButton.Text"]
    </MudButton>
</HeaderButtons>
<Fields>
<div class="px-4">
    <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.General.Title"] InitiallyCollapsed="false">
        <div class="rounded-lg w-4/4 px-2 2xl:px-4">
            <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                          For="@(() => FormModel.Name)"
                          @ref="_nameField"
                          DebounceInterval="DebounceInterval"
                          Label=@Localizer["EditElementForm.Fields.Collapsable.General.Field.Name.Text"]
                          Class="pb-4"/>
            @if (ElementMode != ElementMode.Story)
            {
                <div class="flex flex-row justify-between py-6 gap-2">
                    <div class="flex-initial items-center gap-2">
                        <MudText
                            Typo="Typo.caption">
                            @Localizer["EditElementForm.Fields.Collapsable.General.Field.Points.Text"]
                        </MudText>
                        <MudNumericField @bind-Value="FormDataContainer.FormModel.Points"
                                         Min="1"
                                         Max="1000"
                                         For="@(() => FormModel.Points)"
                                         DebounceInterval="DebounceInterval"
                                         Variant="Variant.Outlined"
                                         Margin="Margin.Dense"/>
                    </div>
                    <MudDivider Style="border-style: dashed; border-color: rgb(230,230,230)" Vertical="true"
                                FlexItem="true">
                    </MudDivider>

                    <div class="flex-initial items-center gap-2">
                        <MudText
                            Typo="Typo.caption">
                            @Localizer["EditElementForm.Fields.Collapsable.General.Field.Workload.Text"]
                        </MudText>
                        <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                         Min="0"
                                         Max="1000"
                                         For="@(() => FormModel.Workload)"
                                         DebounceInterval="DebounceInterval"
                                         Variant="Variant.Outlined"
                                         Margin="Margin.Dense"/>
                    </div>
                </div>
            }

            @if (ElementMode == ElementMode.Normal)
            {
                <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                           Immediate="false"
                           Label="@Localizer["EditElementForm.Fields.Collapsable.General.Field.Difficulty.Text"]"
                           For="@(() => FormModel.Difficulty)"
                           Variant="Variant.Outlined">
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)">
                        <div class="flex items-center gap-2">
                            <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonEasy"></MudIcon>
                            <p class="pt-1">@Localizer["EditElementForm.Difficulty.Easy"]</p>
                        </div>
                    </MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)">
                        <div class="flex items-center gap-2">
                            <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonMedium"></MudIcon>
                            <p class="pt-1">@Localizer["EditElementForm.Difficulty.Medium"]</p>
                        </div>
                    </MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)">
                        <div class="flex items-center gap-2">
                            <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonHard"></MudIcon>
                            <p class="pt-1">@Localizer["EditElementForm.Difficulty.Hard"]</p>
                        </div>
                    </MudSelectItem>
                    <MudSelectItem
                        Value="@(LearningElementDifficultyEnum.None)">
                        @Localizer["EditElementForm.Difficulty.None"]
                    </MudSelectItem>
                </MudSelect>
            }
        </div>
    </Collapsable>
</div>

@switch (ElementMode)
{
    case ElementMode.Normal:
        <div class="px-4">
            <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Title"] InitiallyCollapsed="false">
                <p class="text-xs pl-6">@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Text"]</p>
                <TableSelect
                    T="ILearningContentFormModel"
                    @bind-Value="FormDataContainer.FormModel.LearningContent"
                    OnPropertyChangingWithValue="OnContentChanging"
                    For="@(() => FormModel.LearningContent!)"
                    Elements="WorldPresenter.GetAllContent().Select(vm => Mapper.Map<ILearningContentFormModel>(vm))"
                    FilterFuncSearchableStrings="ILearningContentFormModel.GetSearchableStrings">
                    <HeaderContent>
                        <MudTh></MudTh>
                        <MudTh Class="p-0">@Localizer["EditElementForm.Fields.Collapse.LearningContent.Name"]</MudTh>
                        <MudTh Class="p-0">@Localizer["EditElementForm.Fields.Collapse.LearningContent.Type"]</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Class="p-0">
                            <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                                           OnClick="() => PresentationLogic.ShowLearningContentAsync(context)"
                                           Class="show-content-preview py-2"/>
                        </MudTd>
                        <MudTd Class="p-0" DataLabel="Name">
                            <MudTooltip Text="@context.Name"
                                        Arrow="true"
                                        Placement="Placement.Right"
                                        Class="bg-adlergrey-200 shadow-xl text-adlergrey-800"
                                        Duration="Double.Epsilon">
                                <p class="pt-2 cursor-pointer max-w-[5rem] truncate text-ellipsis overflow-hidden">@context.Name</p>
                            </MudTooltip>
                        </MudTd>
                        <MudTd Class="py-0 pl-0 cursor-default" DataLabel="Type">
                            @switch (context)
                            {
                                case FileContentFormModel fileContentContext:
                                    <span>@fileContentContext.Type</span>
                                    break;
                                case LinkContentFormModel:
                                    <span>Link</span>
                                    break;
                                default:
                                    <span>???</span>
                                    break;
                            }
                        </MudTd>
                    </RowTemplate>
                </TableSelect>
                @if (FormModel.LearningContent is FileContentFormModel { Type: "h5p" } fc)
                {
                    <div class="flex flex-col">
                        @* PrimitiveH5P is not yet implemented in Backend, so this option should not yet be selectable in the authoring tool. *@
                        <MudCheckBox @bind-Value="@(fc.PrimitiveH5P)" Disabled="true">
                            @Localizer["EditElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Text"]
                            <MudTooltip>
                                <ChildContent>
                                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                                   Class="text-adlergrey-200 hover:text-adlerdarkblue"
                                                   OnClick="ShowH5PInfoDialog"/>
                                </ChildContent>
                                <TooltipContent>
                                    @Localizer["EditElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Tooltip.Text"]
                                </TooltipContent>
                            </MudTooltip>
                        </MudCheckBox>
                    </div>
                }
            </Collapsable>
        </div>
        break;
    case ElementMode.Adaptivity:
        <div class="px-4">
            <Collapsable Title=@Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Title"] InitiallyCollapsed="false">
                <p class="text-xs pl-6">@Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Text"]</p>
                <div class="flex flex-col items-center justify-center">
                    <MudButton Class="w-44 2xl:w-3/5 btn-standard add-tasks" OnClick="OpenAdaptivityContentDialog">
                        @Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Text"]
                    </MudButton>
                </div>
            </Collapsable>
        </div>
        break;
    case ElementMode.Story:
        <div class="px-4">
            <Collapsable Title="@Localizer["EditStoryElementForm.Fields.Collapsable.Story.Title"]" InitiallyCollapsed="false">
                <PseudoFormFieldGrouping
                    For="() => FormModel.LearningContent"
                    @ref="_pseudoGroupStoryContent">

                    <div class="flex flex-row items-center gap-1 py-2">
                        <p class="text-xs pl-6">@Localizer["EditStoryElementForm.Fields.Collapsable.StoryText.Text"]</p>
                        <MudTooltip Placement="Placement.Right"
                                    Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                            <TooltipContent>
                                <MudText
                                    Class="text-xs">
                                    @((MarkupString)Localizer["EditElementForm.Story.Tooltip"].ToString())
                                </MudText>
                            </TooltipContent>
                            <ChildContent>
                                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                         Class="text-adlergrey hover:text-adlerdarkblue">
                                </MudIcon>
                            </ChildContent>
                        </MudTooltip>
                    </div>

                    @if (StoryContentModel != null)
                    {
                        @for (var i = 0; i < StoryContentModel.StoryText.Count; i++)
                        {
                            <p class="text-xs pl-4 pt-4 font-bold text-adlertextgrey">@Localizer["EditStoryElementForm.Fields.Collapsable.StoryText.Slide"]@(i + 1)</p>
                            var x = i;
                            <div class="flex flex-col">
                                <div class="flex flex-row items-center">
                                    <MudTextField T="string"
                                                  Variant="Variant.Outlined" Lines="5"
                                                  @bind-Value="@(StoryContentModel.StoryText[x])"
                                                  DebounceInterval="DebounceInterval"
                                                  Class="pl-4"/>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   OnClick="@(() => StoryContentModel.StoryText.RemoveAt(x))"
                                                   Title=@Localizer["EditStoryElementForm.Fields.Collapsable.Story.DeleteStory"]
                                                   Class="w-8 h-8">
                                    </MudIconButton>
                                </div>
                                <p class="pl-4 text-adlergrey-500">@($"{StoryContentModel.StoryText[x].Length}/550")</p>
                            </div>
                        }

                        <div class="flex justify-center items-center">
                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                           OnClick="@(() => StoryContentModel.StoryText.Add(""))"
                                           Class="w-9 h-9"
                                           Title=@Localizer["EditStoryElementForm.Fields.Collapsable.Story.AddStory"]>
                            </MudIconButton>
                        </div>
                    }
                </PseudoFormFieldGrouping>
            </Collapsable>
        </div>
        break;
    default:
        throw new InvalidOperationException($"{nameof(ElementMode)} is out of range");
}

<div class="px-4">
    <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Title"] InitiallyCollapsed="true">
        <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
            <ElementModelGridSelect @bind-Value="FormDataContainer.FormModel.ElementModel"
                                    For="@(() => FormModel.ElementModel)"
                                    Label="@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.3DRepresentation.Text"]"
                                    Elements="GetElementModels()">
            </ElementModelGridSelect>
        </div>
    </Collapsable>
</div>

@if (ElementMode != ElementMode.Story)
{
    <div class="px-4">
        <Collapsable
            Title=@Localizer["EditElementForm.Fields.Collapsable.Goals.Title"]  InitiallyCollapsed="true">
            <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                <MudText
                    Typo="Typo.caption">
                    @Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Goals.Text"]
                </MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                              For="@(() => FormModel.Goals)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"
                              Class="pb-2 mt-0"/>
            </div>
        </Collapsable>
    </div>

    <div class="px-4">
        <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.Description.Title"] InitiallyCollapsed="true">
            <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                <MudText
                    Typo="Typo.caption">
                    @Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Description.Text"]
                </MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                              For="@(() => FormModel.Description)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"
                              Class="pb-4 mt-0"/>
            </div>
        </Collapsable>
    </div>
}

</Fields>
<FooterButtons>
    <SubmitThenRemapButton RemapAction="MapIntoContainer"/>
    @if (ElementMode == ElementMode.Normal)
    {
        <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                       Class="btn-standard rounded-lg shadow-lg"
                       OnClick="ShowSelectedElementContentAsync"
                       title=@Localizer["EditElementForm.Button.ShowLearningElement.Title"].Value>

        </MudIconButton>
    }
</FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IElementModelHandler ElementModelHandler { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<EditElementForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningElementViewModel ElementToEdit { get; set; }

    [Parameter, EditorRequired] public EventCallback OnNewButtonClicked { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;

    [Parameter] public ElementMode ElementMode { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    internal Action? TriggerMasterLayoutStateHasChanged { get; set; }


    private LearningElementFormModel FormModel => FormDataContainer.FormModel;
    private StoryContentFormModel? StoryContentModel => FormDataContainer.FormModel.LearningContent as StoryContentFormModel;

    private PseudoFormFieldGrouping<ILearningContentFormModel?>? _pseudoGroupStoryContent;

    private BaseForm<LearningElementFormModel, LearningElement> _form = null!;
    private MudTextField<string> _nameField = null!;
    private bool _focusCalled = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!_focusCalled)
        {
            _focusCalled = true;
            await _form.FocusField(_nameField);
        }
    }

    private void OnValidSubmit(LearningElementFormModel model)
    {
        WorldPresenter.EditLearningElementFromFormModel(ElementToEdit.Parent, ElementToEdit, model);
        //TriggerMasterLayoutStateHasChanged?.Invoke();
    }

    private void OnValidFieldChange(LearningElementFormModel model) => OnValidSubmit(model);

    private async Task MapIntoContainer()
    {
        Mapper.Map(ElementToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
        _focusCalled = false;
    }

    private async Task ShowSelectedElementContentAsync()
    {
        await WorldPresenter.ShowSelectedElementContentAsync(ElementToEdit);
    }

    private void PreviewOnClick(ILearningContentViewModel context)
    {
        PresentationLogic.ShowLearningContentAsync(context);
    }

    private async void OpenAdaptivityContentDialog()
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };
        var parameters = new DialogParameters
        {
            { nameof(AdaptivityContentDialog.MyContent), FormDataContainer.FormModel.LearningContent }
        };
        var dialog = await DialogService.ShowAsync<AdaptivityContentDialog>(Localizer["EditElementForm.AdaptivityContent.Dialog.Title"], parameters, options);
        _ = await dialog.Result;
        StateHasChanged();
    }

    private string GetSnackbarMessage()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["EditElementForm.SnackbarMessage"],
            ElementMode.Adaptivity => Localizer["EditAdaptivityElementForm.SnackbarMessage"],
            ElementMode.Story => Localizer["EditStoryElementForm.SnackbarMessage"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private string GetHeaderText()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["EditElementForm.Header.Text"],
            ElementMode.Adaptivity => Localizer["EditAdaptivityElementForm.Header.Text"],
            ElementMode.Story => Localizer["EditStoryElementForm.Header.Text"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private IEnumerable<ElementModel> GetElementModels()
    {
        var elementModelContentType = ElementMode switch
        {
            ElementMode.Normal when FormModel.LearningContent is FileContentFormModel => ElementModelContentType.File,
            ElementMode.Normal when FormModel.LearningContent is LinkContentFormModel => ElementModelContentType.Link,
            ElementMode.Adaptivity => ElementModelContentType.Adaptivity,
            ElementMode.Story => ElementModelContentType.Story,
            _ => ElementModelContentType.Any
        };
        var fileType = elementModelContentType is ElementModelContentType.File ? ((FileContentFormModel)FormModel.LearningContent!).Type : "";
        return ElementModelHandler.GetElementModels(elementModelContentType, fileType,
            ElementToEdit.Parent?.Theme);
    }

    private void OnContentChanging(PropertyChangingWithValueEventArgs<ILearningContentFormModel> e)
    {
        switch (e.OldValue)
        {
            case LinkContentFormModel when e.NewValue is LinkContentFormModel:
            case FileContentFormModel lC when e.NewValue is FileContentFormModel vC && lC.Type == vC.Type:
            case StoryContentFormModel when e.NewValue is StoryContentFormModel:
            case AdaptivityContentFormModel when e.NewValue is AdaptivityContentFormModel:
                return;
            default:
                FormModel.ElementModel = ElementModelHandler.GetElementModelRandom();
                break;
        }
    }

    private async Task ShowH5PInfoDialog()
    {
        var dialogParams = new DialogParameters()
        {
            { nameof(GenericInfoDialog.DialogText), (MarkupString)Localizer["EditElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Info.Text"].Value },
        };
        await DialogService.ShowAsync<GenericInfoDialog>("H5P Info", dialogParams);
    }

}