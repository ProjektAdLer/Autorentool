@using System.Diagnostics.CodeAnalysis
@using AutoMapper
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using Presentation.Components.Adaptivity.Dialogues
@using Presentation.Components.Dialogues
@using Presentation.Components.Forms.Buttons
@using Presentation.Components.Forms.Content
@using Presentation.Components.Forms.Models
@using Presentation.Components.LabelledSwitch
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Shared
@using Shared.Observer

<div class="absolute w-full z-30 cursor-default">
    <header class="py-2 2xl:py-3 bg-adlerbgbright border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
        <h2 class="text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">@(GetHeaderText())</h2>
    </header>
    <div class="flex flex-row w-full justify-between">
        <MudText Class="text-adlergrey-200 p-2 text-xs">@Localizer["EditElementForm.Text"]</MudText>
        <button
            class="rounded-bl-lg h-8 truncate text-adlerdarkblue bg-adlerblue-200 p-4 font-bold drop-shadow transform ease-in-out duration-75 active:drop-shadow-none hover:bg-adlerdarkblue hover:text-buttonbgblue"
            @onclick="async () => await OnNewButtonClicked.InvokeAsync()">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="border-b-lg m-0"></MudIcon>
            <p>@Localizer["EditElementForm.NewButton.Text"]</p>
        </button>
    </div>
</div>

<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement" @ref="_form"
          OnValidSubmit="OnValidSubmit" OnValidFieldChange="OnValidFieldChange"
          SnackbarMessage="@GetSnackbarMessage()"
          FormDataContainer="FormDataContainer">

    <Fields>
        <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.General.Title"]
                     InitiallyCollapsed="false">
            <div class="w-4/4 px-6">
                <p class="font-bold text-xs text-adlertitledarkblue cursor-default pt-2">@Localizer["EditElementForm.Fields.Collapsable.General.Subtitle"]</p>
                
                @if (ElementMode == ElementMode.Normal)
                {
                <p class="text-xs cursor-default">@Localizer["EditElementForm.Fields.Collapsable.General.LearningElement.Text"]</p>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                              For="@(() => FormModel.Name)"
                              @ref="_nameField"
                              DebounceInterval="DebounceInterval"
                              Label=@Localizer["EditElementForm.Fields.Collapsable.General.Field.Name.Text"]
                              Margin="Margin.Dense"
                              Typo="Typo.subtitle2"
                              Variant="Variant.Outlined"
                              Placeholder="@Localizer["EditElementForm.Fields.Collapsable.General.LearningElement.Placeholder"]"/>
               
                    <div class="flex items-center justify-center gap-2 bg-adlerbggradientto rounded my-2 py-1">
                        <LabelledSwitch @bind-State="IsRequired"
                                        LeftLabel="@Localizer["EditElementForm.Fields.Collapsable.Element.Mandatory"]"
                                        RightLabel="@Localizer["EditElementForm.Fields.Collapsable.Element.Optional"]"/>
                    </div>

                    <div class="flex flex-row gap-2 w-full">
                        <div class="flex-initial items-center gap-1">
                            <p class="text-xs cursor-default">
                                @Localizer["EditElementForm.Fields.Collapsable.General.Field.Workload.Text"]
                            </p>
                            <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                             Min="0"
                                             Max="1000"
                                             For="@(() => FormModel.Workload)"
                                             DebounceInterval="DebounceInterval"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense"
                                             Typo="Typo.subtitle2"/>
                        </div>
                        <div class="flex-initial items-center gap-1 w-full">
                            <p class="text-xs cursor-default">
                                @Localizer["EditElementForm.Fields.Collapsable.General.Field.Difficulty.Text"]
                            </p>
                            <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                                       Immediate="false"
                                       For="@(() => FormModel.Difficulty)"
                                       Variant="Variant.Outlined"
                                       Margin="Margin.Dense"
                                       Typo="Typo.subtitle2">
                                <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)">
                                    <div class="flex items-center gap-2">
                                        <MudIcon Class="drop-shadow w-4 h-4"
                                                 Icon="@CustomIcons.DifficultyPolygonEasy"></MudIcon>
                                        <p>@Localizer["EditElementForm.Difficulty.Easy"]</p>
                                    </div>
                                </MudSelectItem>
                                <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)">
                                    <div class="flex items-center gap-2">
                                        <MudIcon Class="drop-shadow w-4 h-4"
                                                 Icon="@CustomIcons.DifficultyPolygonMedium"></MudIcon>
                                        <p>@Localizer["EditElementForm.Difficulty.Medium"]</p>
                                    </div>
                                </MudSelectItem>
                                <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)">
                                    <div class="flex items-center gap-2">
                                        <MudIcon Class="drop-shadow w-4 h-4"
                                                 Icon="@CustomIcons.DifficultyPolygonHard"></MudIcon>
                                        <p>@Localizer["EditElementForm.Difficulty.Hard"]</p>
                                    </div>
                                </MudSelectItem>
                                <MudSelectItem
                                    Value="@(LearningElementDifficultyEnum.None)">
                                    @Localizer["EditElementForm.Difficulty.None"]
                                </MudSelectItem>
                            </MudSelect>
                        </div>
                    </div>
                }

                @if (ElementMode == ElementMode.Adaptivity)
                {
                    <p class="text-xs cursor-default">@Localizer["EditElementForm.Fields.Collapsable.General.AdaptivityElement.Text"]</p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  @ref="_nameField"
                                  DebounceInterval="DebounceInterval"
                                  Label=@Localizer["EditElementForm.Fields.Collapsable.General.Field.Name.Text"]
                                  Margin="Margin.Dense"
                                  Typo="Typo.subtitle2"
                                  Variant="Variant.Outlined"
                                  Placeholder="@Localizer["EditElementForm.Fields.Collapsable.General.Field.AdaptivityElement.Placeholder"]"/>
                    <div class="flex-initial items-center gap-1">
                        <p class="text-xs pt-2 cursor-default">
                            @Localizer["EditElementForm.Fields.Collapsable.General.Field.Workload.Text"]
                        </p>
                        <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                         Min="0"
                                         Max="1000"
                                         For="@(() => FormModel.Workload)"
                                         DebounceInterval="DebounceInterval"
                                         Variant="Variant.Outlined"
                                         Margin="Margin.Dense"
                                         Typo="Typo.subtitle2"/>
                    </div>
                }
                @if (ElementMode == ElementMode.Story)
                {
                    <p class="text-xs cursor-default">@Localizer["EditElementForm.Fields.Collapsable.General.StoryElement.Text"]</p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  @ref="_nameField"
                                  DebounceInterval="DebounceInterval"
                                  Label=@Localizer["EditElementForm.Fields.Collapsable.General.Field.Name.Text"]
                                  Margin="Margin.Dense"
                                  Typo="Typo.subtitle2"
                                  Variant="Variant.Outlined"
                                  Placeholder="@Localizer["EditElementForm.Fields.Collapsable.General.Field.StoryElement.Placeholder"]"/>
                }
            </div>
        </Collapsable>

        <Collapsable Title="@Localizer["EditElementForm.Fields.Collapsable.Content.Title"]" 
                     InitiallyCollapsed="@(ElementMode != ElementMode.Story)">
            <div class="w-4/4 px-6">
                @if (ElementMode == ElementMode.Normal)
                {
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["EditElementForm.Fields.Collapsable.Description.Title"]</p>
                    <p class="text-xs cursor-default">
                        @Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Description.Text"]
                    </p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Placeholder="@Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Description.Placeholder"]"
                                  Typo="Typo.subtitle2"/>
                    
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["EditElementForm.Fields.Collapsable.Goals.Title"]</p>
                    <p class="text-xs cursor-default">
                        @Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Goals.Text"]
                    </p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                  For="@(() => FormModel.Goals)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Placeholder="@Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Goals.Placeholder"]"
                                  Typo="Typo.subtitle2"/>
                }
                @if (ElementMode == ElementMode.Adaptivity)
                {
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["EditElementForm.Fields.Collapsable.Description.Title"]</p>
                    <p class="text-xs cursor-default">
                        @Localizer["EditElementForm.Fields.Collapsable.Description.AdaptivityElement.Text"]
                    </p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Placeholder="@Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Description.AdaptivityElement.Text"]"
                                  Typo="Typo.subtitle2"/>
                    
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["EditElementForm.Fields.Collapsable.Goals.Title"]</p>
                    <p class="text-xs cursor-default">
                        @Localizer["EditElementForm.Fields.Collapsable.Goals.AdaptivityElement.Text"]
                    </p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                  For="@(() => FormModel.Goals)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Placeholder="@Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Goals.Placeholder"]"
                                  Typo="Typo.subtitle2"/>
                }
                @if (ElementMode == ElementMode.Story)
                {
                    <PseudoFormFieldGrouping
                        For="() => FormModel.LearningContent"
                        @ref="_pseudoGroupStoryContent">
                        
                        <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["EditStoryElementForm.Fields.Collapsable.Story.Title"]</p>
                        <p class="text-xs cursor-default">@Localizer["EditStoryElementForm.Fields.Collapsable.StoryText.Text"]
                            <MudTooltip Placement="Placement.Right"
                                        Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                                <TooltipContent>
                                    <MudText Class="text-xs">
                                        @((MarkupString)Localizer["EditElementForm.Story.Tooltip"].ToString())
                                    </MudText>
                                </TooltipContent>
                                <ChildContent>
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                             Class="text-adlergrey hover:text-adlerdarkblue">
                                    </MudIcon>
                                </ChildContent>
                            </MudTooltip>
                        </p>
                      

                        @if (StoryContentModel != null)
                        {
                            @for (var i = 0; i < StoryContentModel.StoryText.Count; i++)
                            {
                                var x = i;
                                <div class="flex flex-row items-center justify-between">
                                    <p class="text-xs pt-2 font-bold cursor-default text-adlertitledarkblue">@Localizer["EditStoryElementForm.Fields.Collapsable.StoryText.Slide"]@(i + 1)</p>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   OnClick="@(() => StoryContentModel.StoryText.RemoveAt(x))"
                                                   title=@Localizer["EditStoryElementForm.Fields.Collapsable.Story.DeleteStory"]
                                                   Size="Size.Small">
                                    </MudIconButton>
                                </div>
                                <div class="flex flex-col">
                                    <MudTextField T="string"
                                                  Variant="Variant.Outlined"
                                                  Lines="5"
                                                  @bind-Value="@(StoryContentModel.StoryText[x])"
                                                  Placeholder="@Localizer["EditStoryElementForm.Fields.Collapsable.Story.Placeholder"]"
                                                  DebounceInterval="DebounceInterval"
                                                  Typo="Typo.subtitle2"/>
                                    <div class="flex flex-row items-center justify-between">
                                        <p class="text-xs text-adlergrey-500 cursor-default">@($"{StoryContentModel.StoryText[x].Length}/400") @Localizer["EditStoryElementForm.Collapsable.Story.Length"]</p>
                                    </div>
                                </div>
                            }

                            <MudButton StartIcon="@Icons.Material.Filled.Add"
                                       OnClick="@(() => StoryContentModel.StoryText.Add(""))"
                                       IconSize="Size.Small"
                                       Class="add-story-block-button normal-case text-adlergrey-500 text-xs mx-6"
                                       title=@Localizer["EditStoryElementForm.Fields.Collapsable.Story.AddStory"]>
                                @Localizer["EditStoryElementForm.Fields.Collapsable.Story.AddStory"]
                            </MudButton>
                        }
                    </PseudoFormFieldGrouping> 
                }
            </div>
        </Collapsable>

        <Collapsable Title="@Localizer["EditElementForm.Fields.Collapsable.Design.Title"]"
                     InitiallyCollapsed="true">
            <div class="w-4/4 px-6">
                    @switch (ElementMode)
                    {
                        case ElementMode.Story:
                            <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">
                                @Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Title"]
                            </p>
                            <p class="text-xs cursor-default">
                                @Localizer["EditElementForm.Fields.Collapsable.Story.NPC.Text"]
                            </p>
                            break;
                        case ElementMode.Adaptivity:
                            <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">
                                @Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Robot.Title"]
                            </p>
                            <p class="text-xs cursor-default">
                                @Localizer["EditElementForm.Fields.Collapsable.Adaptivity.Robot.Text"]
                            </p>
                            break;
                        case ElementMode.Normal:
                            <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">
                                @Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Furniture.Title"]
                            </p>
                            <p class="text-xs cursor-default">
                                @Localizer["EditElementForm.Fields.Collapsable.Learning.Object.Text"]
                            </p>
                            break;
                    }
                
                <div class="@(ElementMode != ElementMode.Adaptivity ? "overflow-y-scroll h-52 border-adlergrey-200 border rounded" : "")">

                    <ElementModelGridSelect @bind-Value="FormDataContainer.FormModel.ElementModel"
                                            For="@(() => FormModel.ElementModel)"
                                            Label="@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.3DRepresentation.Text"]"
                                            Elements="GetElementModels()">
                    </ElementModelGridSelect>
                </div>
                @if (ElementMode == ElementMode.Story && StoryContentModel != null)
                {
                    <p class="text-xs font-bold pt-2 cursor-default text-adlertitledarkblue">
                        @Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.NpcName.Title"]
                    </p>
                    <MudTextField @bind-Value="StoryContentModel.NpcName"
                                  For="@(() => StoryContentModel.NpcName)"
                                  Variant="Variant.Outlined"
                                  Typo="Typo.subtitle2"
                                  Margin="Margin.Dense"
                                  Placeholder="@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.NpcName.Placeholder"]"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.NpcName.Text"]"/>
                    <NpcMoodSelect @bind-Value="@(StoryContentModel.NpcMood)"
                                   ElementModel="FormDataContainer.FormModel.ElementModel"
                                   Label="@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.NpcMood.Text"]">
                    </NpcMoodSelect>

                }
            </div>
        </Collapsable>
        
        <Collapsable Title="@Localizer["EditElementForm.Fields.Collapsable.Interaction.Title"]"
                     InitiallyCollapsed="@(ElementMode == ElementMode.Story)">
            <div class="w-4/4 px-6">
            @switch (ElementMode)
            {
                case ElementMode.Normal:
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Title"]</p>
                    <p class="text-xs cursor-default">@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Text"]</p>
                    <p class="text-xs text-adlergrey-500 pt-1">@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Text.SelectedLearningMaterial"]</p>

                    <div class="flex flex-row items-center w-[100%] overflow-hidden">
                        <div class="flex items-center justify-start cursor-default rounded border border-adlergrey-200 bg-adlerbgbright w-full">
                            <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                                           Disabled="@(FormDataContainer.FormModel.LearningContent == null)"
                                           OnClick="() => PresentationLogic.ShowLearningContentAsync(FormDataContainer.FormModel.LearningContent!)"
                                           Class="show-content-preview"
                                           title="@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Preview"]"/>

                                <div class="w-[100%] truncate">
                                    <MudTooltip Text="@LearningContentName"
                                                Arrow="true"
                                                Placement="Placement.Right"
                                                Class="bg-adlergrey-200 shadow-xl text-adlergrey-800"
                                                Duration="Double.Epsilon"
                                                Delay="DebounceInterval">

                                    <MudTextField
                                        T="ILearningContentFormModel"
                                        @bind-Value="FormDataContainer.FormModel.LearningContent"
                                        @bind-Text="@LearningContentName"
                                        Variant="Variant.Text"
                                        For="@(() => FormModel.LearningContent!)"
                                        ReadOnly="true"
                                        Disabled="true"
                                        UnderLine="false"
                                        Style="color: rgb(69,160,229); margin-top: 6px;"
                                        Margin="Margin.Dense"
                                        Typo="Typo.subtitle2"
                                        Class="w-96">
                                    </MudTextField>
                                </MudTooltip>
                            </div>

                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           OnClick="OpenLearningContentDialog"
                                           title="@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Edit"]">
                            </MudIconButton>
                        </div>
                    </div>
                    

                        @if(FormModel.LearningContent is FileContentFormModel { Type: "h5p" } fc)
                {
                    <div class="flex flex-row items-center justify-start px-3">
                        <MudCheckBox @bind-Value="@(fc.PrimitiveH5P)">
                            <p class="text-adlertextgrey text-xs 2xl:text-sm cursor-default">
                                @Localizer["EditElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Text"]
                                <MudTooltip Class="bg-adlerdarkblue-200 shadow-xl">
                                    <ChildContent>
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                                       Class="text-adlergrey-200 hover:text-adlerdarkblue"
                                                       OnClick="ShowH5PInfoDialog"/>
                                    </ChildContent>
                                    <TooltipContent>
                                        @Localizer["EditElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Tooltip.Text"]
                                    </TooltipContent>
                                </MudTooltip>
                            </p>
                        </MudCheckBox>
                    </div>
                }
                    break;

                case ElementMode.Adaptivity:
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Title"]</p>
                    <p class="text-xs cursor-default">@Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Text"]</p>
                    <div class="flex flex-col items-center justify-center">
                        <MudButton Class="w-44 2xl:w-3/5 btn-standard add-tasks"
                                   OnClick="OpenAdaptivityContentDialog">
                            @Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Text"]
                        </MudButton>
                    </div>
                    
                    @if (FormDataContainer.FormModel.LearningContent is AdaptivityContentFormModel)
                        {
                            <div>
                                <p class="text-xs pt-2 cursor-default">
                                <span class="text-adlergrey-800">
                                    @Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Subtitle"]
                                </span>
                                </p>

                                @{
                                    var content = (AdaptivityContentFormModel?)FormDataContainer.FormModel.LearningContent;
                                    var tasks = content?.Tasks ?? new List<IAdaptivityTaskViewModel>();
                                    var count = tasks.Count;
                                    var mandatoryCount = tasks.Count(x => x.MinimumRequiredDifficulty != null);

                                    string aufgabenLabel = count == 1
                                        ? Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Task.One"]
                                        : Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Task.More"];
                                }

                                <p class="text-xs text-adlerblue-600 cursor-default">
                                    @count
                                    <span class="text-adlergrey-800">
                                    @aufgabenLabel
                                </span>
                                    <span class="text-adlergrey-800">
                                    (@Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Task.Mandatory"]: @mandatoryCount)
                                </span>
                                </p>

                                @if (count > 0)
                                {
                                    <ul class="pl-2 py-2 mt-0 border border-adlergrey-300 rounded w-full list-disc list-inside cursor-default max-h-40 overflow-y-auto">
                                        @foreach (var task in tasks)
                                        {
                                            var isMandatory = task.MinimumRequiredDifficulty != null;
                                            <li class="text-sm">
                                                @task.Name
                                                <span
                                                    class="ml-1 @(isMandatory ? "text-adlergrey-800" : "italic text-adlergrey-300")">
                                                (@(isMandatory ? @Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Task.Mandatory"] : "optional"))
                                            </span>
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <div class="pl-2 py-2 mt-0 border border-adlergrey-300 rounded w-full">
                                        <p class="text-sm italic text-adlergrey-600 cursor-default">
                                            @Localizer["EditAdaptivityElementForm.Fields.Collapsable.Tasks.Button.NoTask"]
                                    </p>
                                </div>
                            }
                        </div>
                    }
                    break;
                    
                case ElementMode.Story:
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.ExitAfterStorySequence.Title"]</p>
                    <p class="text-xs cursor-default">@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.ExitAfterStorySequence.Text"]</p>
                    <div class="bg-adlerbggradientto rounded my-1 px-1 py-4">
                        <LabelledSwitch @bind-State="ExitAfterStorySequenceState"
                                        LeftLabel="@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.ExitAfterStorySequence.Stay"]"
                                        LeftLabelIconSvg="@CustomIcons.SpaceStay"
                                        RightLabel="@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.ExitAfterStorySequence.Leave"]"
                                        RightLabelIconSvg="@CustomIcons.SpaceLeave"/>
                    </div>
                    break;
                default:
                    throw new InvalidOperationException($"{nameof(ElementMode)} is out of range");
            }
            </div>
        </Collapsable>
    </Fields>

    <FooterButtons>
        <div class="flex flex-row justify-end absolute left-0 bottom-0 border-t-2 border-adlergrey-100 bg-adlerbgbright w-full">
            @if (ElementMode == ElementMode.Normal)
            {
                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                               Class="btn-standard rounded-lg shadow-lg"
                               OnClick="ShowSelectedElementContentAsync"
                               title=@Localizer["EditElementForm.Button.ShowLearningElement.Title"].Value>

                </MudIconButton>
            }
            <SubmitThenRemapButton RemapAction="MapIntoContainer"/>
        </div>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IElementModelHandler ElementModelHandler { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<EditElementForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningElementViewModel ElementToEdit { get; set; }

    [Parameter, EditorRequired] public EventCallback OnNewButtonClicked { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;

    [Parameter] public ElementMode ElementMode { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    internal Action? TriggerMasterLayoutStateHasChanged { get; set; }

    private LearningElementFormModel FormModel => FormDataContainer.FormModel;

    private StoryContentFormModel? StoryContentModel => FormDataContainer.FormModel.LearningContent as StoryContentFormModel;

    private PseudoFormFieldGrouping<ILearningContentFormModel?>? _pseudoGroupStoryContent;

    private BaseForm<LearningElementFormModel, LearningElement> _form = null!;
    private MudTextField<string> _nameField = null!;
    private bool _focusCalled = false;

    private LabelledSwitchState IsRequired
    {
        get => FormModel.Points == 1 ? LabelledSwitchState.Left : LabelledSwitchState.Right;
        set => FormModel.Points = value == LabelledSwitchState.Left ? 1 : 0;
    }

    private LabelledSwitchState ExitAfterStorySequenceState
    {
        get => StoryContentModel!.ExitAfterStorySequence ? LabelledSwitchState.Right : LabelledSwitchState.Left;
        set => StoryContentModel!.ExitAfterStorySequence = value == LabelledSwitchState.Right;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!_focusCalled)
        {
            _focusCalled = true;
            await _form.FocusField(_nameField);
        }
    }

    private void OnValidSubmit(LearningElementFormModel model)
    {
        FormModel.Points = model.LearningContent switch
        {
            AdaptivityContentFormModel adaptivityContentFormModel => adaptivityContentFormModel.Tasks.Any(x => x.MinimumRequiredDifficulty != null) ? 1 : 0,
            _ => FormModel.Points
        };
        WorldPresenter.EditLearningElementFromFormModel(ElementToEdit.Parent, ElementToEdit, model);
    }

    private void OnValidFieldChange(LearningElementFormModel model) => OnValidSubmit(model);

    private async Task MapIntoContainer()
    {
        Mapper.Map(ElementToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
        _focusCalled = false;
    }

    private async Task ShowSelectedElementContentAsync()
    {
        await WorldPresenter.ShowSelectedElementContentAsync(ElementToEdit);
    }

    private void PreviewOnClick(ILearningContentViewModel context)
    {
        PresentationLogic.ShowLearningContentAsync(context);
    }

    private async void OpenAdaptivityContentDialog()
    {
        var hasRequiredTasks = ((AdaptivityContentFormModel)FormDataContainer.FormModel.LearningContent!)
            .Tasks.Any(x => x.MinimumRequiredDifficulty != null);

        var options = new DialogOptions
        {
            BackdropClick = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };
        var parameters = new DialogParameters
        {
            { nameof(AdaptivityContentDialog.MyContent), FormDataContainer.FormModel.LearningContent },
            { nameof(AdaptivityContentDialog.ContentToEdit), ElementToEdit.LearningContent }
        };
        var dialog = await DialogService.ShowAsync<AdaptivityContentDialog>(Localizer["EditElementForm.AdaptivityContent.Dialog.Title"], parameters, options);
        _ = await dialog.Result;

        if (((AdaptivityContentFormModel)FormDataContainer.FormModel.LearningContent!).Tasks.Any(x => x.MinimumRequiredDifficulty != null) != hasRequiredTasks)
        {
            OnValidSubmit(FormDataContainer.FormModel);
        }

        StateHasChanged();
    }

    private async void OpenLearningContentDialog()
    {
        var options = new DialogOptions
        {
            BackdropClick = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };

        var parameters = new DialogParameters
        {
            { nameof(LearningContentDialog.LearningContent), FormDataContainer.FormModel.LearningContent }
        };
        var dialog = await DialogService.ShowAsync<LearningContentDialog>(Localizer["EditElementForm.LearningMaterial.Dialog.Title"], parameters, options);
        _ = await dialog.Result;
        if (dialog.Result.Result == null || dialog.Result.Result.Canceled)
            return;

        if (FormModel.LearningContent != null && !Equals(FormModel.LearningContent, dialog.Result.Result.Data) && dialog.Result.Result.Data != null)
        {
            var dialogResult = (ILearningContentFormModel)dialog.Result.Result.Data;
            var propertyChangedEventArgs = new PropertyChangingWithValueEventArgs<ILearningContentFormModel>(nameof(FormModel.LearningContent), FormModel.LearningContent, dialogResult);
            OnContentChanging(propertyChangedEventArgs);
            FormModel.LearningContent = dialogResult;
            OnValidFieldChange(FormModel);
        }

        StateHasChanged();
    }

    private string GetSnackbarMessage()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["EditElementForm.SnackbarMessage"],
            ElementMode.Adaptivity => Localizer["EditAdaptivityElementForm.SnackbarMessage"],
            ElementMode.Story => Localizer["EditStoryElementForm.SnackbarMessage"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private string GetHeaderText()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["EditElementForm.Header.Text"],
            ElementMode.Adaptivity => Localizer["EditAdaptivityElementForm.Header.Text"],
            ElementMode.Story => Localizer["EditStoryElementForm.Header.Text"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private IEnumerable<ElementModel> GetElementModels()
    {
        var elementModelContentType = ElementMode switch
        {
            ElementMode.Normal when FormModel.LearningContent is FileContentFormModel => ElementModelContentType.File,
            ElementMode.Normal when FormModel.LearningContent is LinkContentFormModel => ElementModelContentType.Link,
            ElementMode.Adaptivity => ElementModelContentType.Adaptivity,
            ElementMode.Story => ElementModelContentType.Story,
            _ => ElementModelContentType.Any
        };
        var fileType = elementModelContentType is ElementModelContentType.File ? ((FileContentFormModel)FormModel.LearningContent!).Type : "";
        return ElementModelHandler.GetElementModels(elementModelContentType, fileType,
            WorldPresenter.LearningWorldVm?.WorldTheme);
    }

    private void OnContentChanging(PropertyChangingWithValueEventArgs<ILearningContentFormModel> e)
    {
        switch (e.OldValue)
        {
            case LinkContentFormModel when e.NewValue is LinkContentFormModel:
            case FileContentFormModel lC when e.NewValue is FileContentFormModel vC && lC.Type == vC.Type:
            case StoryContentFormModel when e.NewValue is StoryContentFormModel:
            case AdaptivityContentFormModel when e.NewValue is AdaptivityContentFormModel:
                return;
            default:
                FormModel.ElementModel = ElementModelHandler.GetElementModelRandom();
                break;
        }
    }

    private async Task ShowH5PInfoDialog()
    {
        var dialogParams = new DialogParameters()
        {
            { nameof(GenericInfoDialog.DialogText), (MarkupString)Localizer["EditElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Info.Text"].Value },
        };
        await DialogService.ShowAsync<GenericInfoDialog>("H5P Info", dialogParams);
    }

    private string LearningContentName
    {
        get => FormDataContainer.FormModel.LearningContent?.Name ?? String.Empty;
        set { }
    }

}