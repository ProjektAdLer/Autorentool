@using Presentation.PresentationLogic.LearningWorld
@using Shared
@using AutoMapper
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.LearningElement
@using Presentation.Components.Forms.Buttons
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
<header class="m-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-xl text-center font-bold text-adlergrey-500 mx-2">@Localizer["EditElementForm.Header.Text"]</h2>
    </div>
</header>
<MudDivider DividerType="DividerType.Middle" Class="my-4"></MudDivider>

<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement"
          OnValidSubmit="OnValidSubmit" SnackbarMessage=@Localizer["EditElementForm.SnackbarMessage"] FormDataContainer="FormDataContainer">
    <HeaderButtons>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Class="btn-standard"
                   OnClick="async () => await OnNewButtonClicked.InvokeAsync()">
            @Localizer["EditElementForm.NewButton.Text"]
        </MudButton>
    </HeaderButtons>
    <Fields>

        <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.General.Title"] @bind-Collapsed="_collapsedGeneral">
            <div class="rounded-lg w-4/4 px-4 pb-2">
                <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                              For="@(() => FormModel.Name)"
                              DebounceInterval="DebounceInterval"
                              Label=@Localizer["EditElementForm.Fields.Collapsable.General.Field.Name.Text"]
                              Class="pb-4"/>

                <MudText Typo="Typo.caption">@Localizer["EditElementForm.Fields.Collapsable.General.Field.Points.Text"]</MudText>
                <MudNumericField @bind-Value="FormDataContainer.FormModel.Points"
                                 Min="1"
                                 Max="1000"
                                 For="@(() => FormModel.Points)"
                                 DebounceInterval="DebounceInterval"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Class="pb-4"/>

                <MudText Typo="Typo.caption">@Localizer["EditElementForm.Fields.Collapsable.General.Field.Workload.Text"]</MudText>
                <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                 Min="0"
                                 Max="1000"
                                 For="@(() => FormModel.Workload)"
                                 DebounceInterval="DebounceInterval"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Class="pb-4"/>

                <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                           Label=@Localizer["EditElementForm.Fields.Collapsable.General.Field.Difficulty.Text"]
                           For="@(() => FormModel.Difficulty)">
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)">@Localizer["EditElementForm.Difficulty.Easy"]</MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)">@Localizer["EditElementForm.Difficulty.Medium"]</MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)">@Localizer["EditElementForm.Difficulty.Hard"]</MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.None)">@Localizer["EditElementForm.Difficulty.None"]</MudSelectItem>
                </MudSelect>


            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.LearningContent.Title"] @bind-Collapsed="_collapsedContent">
            <TableSelect
                @bind-Value="FormDataContainer.FormModel.LearningContent"
                For="@(() => FormModel.LearningContent)"
                Elements="WorldPresenter.GetAllContent()"
                FilterFuncSearchableStrings="ILearningContentViewModel.GetSearchableStrings">
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Type</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="px-1.5">
                        <MudIconButton Icon="@Icons.Material.Filled.Preview"
                                       OnClick="() => PresentationLogic.ShowLearningContentAsync(context)"/>
                    </MudTd>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Type">
                        @if (context is FileContentViewModel fileContentContext)
                        {
                            @fileContentContext.Type
                        }
                        else
                        {
                            <span>Link</span>
                        }
                    </MudTd>
                </RowTemplate>
            </TableSelect>
        </Collapsable>

        <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Title"] @bind-Collapsed="_collapsedElementModel">
            <div class="rounded-lg w-4/4 px-4 pb-4">
                <MudText Class="break-words" Typo="Typo.caption">@Localizer["EditElementForm.Fields.Collapsable.3DRepresentation.Field.3DRepresentation.Text"]</MudText>
                <MudSelect @bind-Value="FormDataContainer.FormModel.ElementModel" AnchorOrigin="Origin.BottomCenter"
                           Text="@FormDataContainer.FormModel.ElementModel.ToString()"
                           For="@(() => FormModel.ElementModel)"
                           Variant="Variant.Outlined">
                    @foreach (var theme in ElementModelHandler.GetElementModels(FormDataContainer.FormModel.LearningContent))
                    {
                        <MudSelectItem Value="@(theme)" Style="white-space: nowrap">
                            <img src="@ElementModelHandler.GetIconForElementModel(theme)" alt="" width="38" class="mr-1"/>@*@theme*@
                        </MudSelectItem>
                    }
                </MudSelect>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["EditElementForm.Fields.Collapsable.Goals.Title"] @bind-Collapsed="_collapsedGoals">
            <div class="rounded-lg w-4/4 px-4">
                <MudText Typo="Typo.caption">@Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Description.Text"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                              For="@(() => FormModel.Description)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"
                              Class="pb-4 mt-0"/>
                <MudText Typo="Typo.caption">@Localizer["EditElementForm.Fields.Collapsable.Goals.Field.Goals.Text"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                              For="@(() => FormModel.Goals)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"
                              Class="pb-2 mt-0"/>
            </div>
        </Collapsable>

    </Fields>
    <FooterButtons>
        <SubmitThenRemapButton RemapAction="MapIntoContainer"/>
        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Autorenew"
                       Class="btn-standard text-adlergrey rounded bg-adlerdeactivated hover:bg-adlerdarkblue hover:text-buttonbgblue reset-form"
                       OnClick="OnResetAsync"></MudIconButton>
    </FooterButtons>
</BaseForm>

@code {
#pragma warning disable CS8618
    [Inject]
    internal ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject]
    internal IMapper Mapper { get; set; }

    [Inject]
    internal IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Inject]
    internal IElementModelHandler ElementModelHandler { get; set; }

    [Inject]
    internal IStringLocalizer<EditElementForm> Localizer { get; set; }

    [Inject]
    internal IPresentationLogic PresentationLogic { get; set; }

    [Parameter, EditorRequired]
    public ILearningElementViewModel ElementToEdit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnNewButtonClicked { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    internal Action TriggerMasterLayoutStateHasChanged { get; set; }
#pragma warning restore CS8618

    private LearningElementFormModel FormModel => FormDataContainer.FormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedContent = false;
    private bool _collapsedGoals = true;
    private bool _collapsedElementModel = true;

    private void OnValidSubmit(LearningElementFormModel model)
    {
        WorldPresenter.EditLearningElement(ElementToEdit.Parent, ElementToEdit, model.Name, model.Description,
    //ignore null warning here because validation ensures that LearningContent is not null - m.ho
            model.Goals, model.Difficulty, model.ElementModel, model.Workload, model.Points, model.LearningContent!);
        TriggerMasterLayoutStateHasChanged();
    }

    private async Task MapIntoContainer()
    {
        Mapper.Map(ElementToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
    }

    private async Task OnResetAsync()
    {
        await MapIntoContainer();
    }

}