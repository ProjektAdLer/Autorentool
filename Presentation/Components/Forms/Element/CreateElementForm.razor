@using System.Diagnostics.CodeAnalysis
@using AutoMapper
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using Presentation.Components.Adaptivity.Dialogues
@using Presentation.Components.Dialogues
@using Presentation.Components.Forms.Buttons
@using Presentation.Components.Forms.Content
@using Presentation.Components.Forms.Models
@using Presentation.Components.LabelledSwitch
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Size = MudBlazor.Size

<div class="absolute w-full z-30 cursor-default">
    <header class="py-2 2xl:py-3 bg-adlerbgbright border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
        <h2 class="text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">@(GetHeaderText())</h2>
    </header>
    <div class="flex justify-between items-start">
        <MudText Class="text-adlergrey-200 text-xs p-2">@Localizer["CreateElementForm.Text"]</MudText>
    </div>
</div>

<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement" @ref="_form"
          OnValidSubmit="OnValidSubmit"
          SnackbarMessage="@GetSnackbarMessage()"
          FormDataContainer="FormDataContainer">
    <Fields>
        <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.General.Title"]
                         InitiallyCollapsed="false">
            <div class="w-4/4 px-6">
                <p class="font-bold text-xs text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateElementForm.Fields.Collapsable.General.Subtitle"]</p>
                
                @if (ElementMode == ElementMode.Normal)
                {
                <p class="text-xs cursor-default">@Localizer["CreateElementForm.Fields.Collapsable.General.LearningElement.Text"]</p>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                              For="@(() => FormModel.Name)"
                              @ref="_nameField"
                              DebounceInterval="DebounceInterval"
                              OnKeyUp="HandleKeyEvent"
                              Label=@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Name.Text"]
                              Margin="Margin.Dense"
                              Typo="Typo.subtitle2"
                              Variant="Variant.Outlined"
                              Placeholder="@Localizer["CreateElementForm.Fields.Collapsable.General.LearningElement.Placeholder"]"/>

                <div class="flex items-center justify-center gap-2 bg-adlerbggradientto rounded my-2 py-1">
                    <LabelledSwitch @bind-State="IsRequired"
                                    LeftLabel="@Localizer["CreateElementForm.Fields.Collapsable.Element.Mandatory"]"
                                    RightLabel="@Localizer["CreateElementForm.Fields.Collapsable.Element.Optional"]"/>
                </div>

                <div class="flex flex-row gap-2 w-full">
                    <div class="flex-initial items-center gap-1">
                        <p class="text-xs cursor-default">
                            @Localizer["CreateElementForm.Fields.Collapsable.General.Field.Workload.Text"]
                        </p>
                        <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                         Min="0"
                                         Max="1000"
                                         For="@(() => FormModel.Workload)"
                                         DebounceInterval="DebounceInterval"
                                         OnKeyUp="HandleKeyEvent"
                                         Variant="Variant.Outlined"
                                         Margin="Margin.Dense"
                                         Typo="Typo.subtitle2"/>
                    </div>

                    <div class="flex-initial items-center gap-1 w-full">
                        <p class="text-xs cursor-default">
                            @Localizer["CreateElementForm.Fields.Collapsable.General.Field.Difficulty.Text"]
                        </p>
                        <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                                   Immediate="false"
                                   For="@(() => FormModel.Difficulty)"
                                   OnKeyUp="HandleKeyEvent"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   Typo="Typo.subtitle2">
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow w-4 h-4"
                                             Icon="@CustomIcons.DifficultyPolygonEasy"></MudIcon>
                                    <p class="text-sm">@Localizer["CreateElementForm.Difficulty.Easy"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow w-4 h-4"
                                             Icon="@CustomIcons.DifficultyPolygonMedium"></MudIcon>
                                    <p class="text-sm">@Localizer["CreateElementForm.Difficulty.Medium"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow w-4 h-4"
                                             Icon="@CustomIcons.DifficultyPolygonHard"></MudIcon>
                                    <p class="text-sm">@Localizer["CreateElementForm.Difficulty.Hard"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.None)">
                                <p class="text-sm">@Localizer["CreateElementForm.Difficulty.None"]</p>
                            </MudSelectItem>
                        </MudSelect>
                    </div>
                </div>
                }

                @if (ElementMode == ElementMode.Adaptivity)
                {
                    <p class="text-xs cursor-default">@Localizer["CreateElementForm.Fields.Collapsable.General.AdaptivityElement.Text"]</p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  @ref="_nameField"
                                  DebounceInterval="DebounceInterval"
                                  OnKeyUp="HandleKeyEvent"
                                  Label=@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Name.Text"]
                                  Margin="Margin.Dense"
                                  Typo="Typo.subtitle2"
                                  Variant="Variant.Outlined"
                                  Placeholder="@Localizer["CreateElementForm.Fields.Collapsable.General.Field.AdaptivityElement.Placeholder"]"/>
                    <div class="flex-initial items-center gap-1">
                        <p class="text-xs pt-2 cursor-default">
                            @Localizer["CreateElementForm.Fields.Collapsable.General.Field.Workload.Text"]
                        </p>
                        <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                         Min="0"
                                         Max="1000"
                                         For="@(() => FormModel.Workload)"
                                         DebounceInterval="DebounceInterval"
                                         OnKeyUp="HandleKeyEvent"
                                         Variant="Variant.Outlined"
                                         Margin="Margin.Dense"
                                         Typo="Typo.subtitle2"/>
                    </div>
                }
                @if (ElementMode == ElementMode.Story)
                {
                    <p class="text-xs cursor-default">@Localizer["CreateElementForm.Fields.Collapsable.General.StoryElement.Text"]</p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  @ref="_nameField"
                                  DebounceInterval="DebounceInterval"
                                  OnKeyUp="HandleKeyEvent"
                                  Label=@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Name.Text"]
                                  Margin="Margin.Dense"
                                  Typo="Typo.subtitle2"
                                  Variant="Variant.Outlined"
                                  Placeholder="@Localizer["CreateElementForm.Fields.Collapsable.General.Field.StoryElement.Placeholder"]"/>
                }
            </div>
        </Collapsable>
        
        <Collapsable Title="@Localizer["CreateElementForm.Fields.Collapsable.Content.Title"]" 
                     InitiallyCollapsed="@(ElementMode != ElementMode.Story)">
            <div class="w-4/4 px-6">
                @if (ElementMode == ElementMode.Normal)
                {
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateElementForm.Fields.Collapsable.Description.Title"]</p>
                    <p class="text-xs cursor-default">
                        @Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Description.Text"]
                    </p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Typo="Typo.subtitle2"
                                  Placeholder="@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Description.Placeholder"]"/>
                    
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateElementForm.Fields.Collapsable.Goals.Title"]</p>
                    <p class="text-xs cursor-default">
                        @Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Goals.Text"]
                    </p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                  For="@(() => FormModel.Goals)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Placeholder="@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Goals.Placeholder"]"
                                  Typo="Typo.subtitle2"/>
                }
                @if (ElementMode == ElementMode.Adaptivity)
                {
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateElementForm.Fields.Collapsable.Description.Title"]</p>
                    <p class="text-xs cursor-default">
                        @Localizer["CreateElementForm.Fields.Collapsable.Description.AdaptivityElement.Text"]
                    </p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Typo="Typo.subtitle2"
                                  Placeholder="@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Description.AdaptivityElement.Text"]"/>
                    
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateElementForm.Fields.Collapsable.Goals.Title"]</p>
                    <p class="text-xs cursor-default">
                        @Localizer["CreateElementForm.Fields.Collapsable.Goals.AdaptivityElement.Text"]
                    </p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                  For="@(() => FormModel.Goals)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Placeholder="@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Goals.Placeholder"]"
                                  Typo="Typo.subtitle2"/>
                }
                @if (ElementMode == ElementMode.Story)
                {
                    <PseudoFormFieldGrouping
                        For="() => FormModel.LearningContent"
                        @ref="_pseudoGroupStoryContent">

                        <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateStoryElementForm.Fields.Collapsable.Story.Title"]</p>
                        <p class="text-xs cursor-default">@Localizer["CreateStoryElementForm.Fields.Collapsable.StoryText.Text"]
                            <MudTooltip Placement="Placement.Right"
                                        Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                                <TooltipContent>
                                    <MudText
                                        Class="text-xs">
                                        @((MarkupString)Localizer["CreateElementForm.Story.Tooltip"].ToString())
                                    </MudText>
                                </TooltipContent>
                                <ChildContent>
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                             Class="text-adlergrey-200 hover:text-adlerdarkblue">
                                    </MudIcon>
                                </ChildContent>
                            </MudTooltip>
                        </p>

                        @if (StoryContentModel != null)
                        {
                            @for (var i = 0; i < StoryContentModel.StoryText.Count; i++)
                            {
                                var x = i;
                                <div class="flex flex-row items-center justify-between">
                                    <p class="text-xs pt-2 font-bold cursor-default text-adlertitledarkblue">@Localizer["CreateStoryElementForm.Fields.Collapsable.StoryText.Slide"]@(i + 1)</p>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   OnClick="@(() => StoryContentModel.StoryText.RemoveAt(x))"
                                                   title=@Localizer["CreateStoryElementForm.Fields.Collapsable.Story.DeleteStory"]
                                                   Size="Size.Small">
                                    </MudIconButton>
                                </div>

                                <div class="flex flex-col">
                                    <MudTextField T="string"
                                                  Variant="Variant.Outlined"
                                                  Lines="5"
                                                  @bind-Value="@(StoryContentModel.StoryText[x])"
                                                  DebounceInterval="DebounceInterval"
                                                  Placeholder="@Localizer["CreateStoryElementForm.Fields.Collapsable.Story.Placeholder"]"
                                                  Typo="Typo.subtitle2"/>
                                    <div class="flex items-center justify-start">
                                        <p class="text-adlergrey-500 text-xs cursor-default">@($"{StoryContentModel.StoryText[x].Length}/400") @Localizer["CreateStoryElementForm.Collapsable.Story.Length"]</p>
                                    </div>
                                </div>
                            }

                            <MudButton StartIcon="@Icons.Material.Filled.Add"
                                       Class="add-story-block-button normal-case text-adlergrey-500 text-xs mx-6"
                                       OnClick="@(() => StoryContentModel.StoryText.Add(""))"
                                       title=@Localizer["CreateStoryElementForm.Fields.Collapsable.Story.AddStory"]
                                       IconSize="Size.Small">
                                @Localizer["CreateStoryElementForm.Fields.Collapsable.Story.AddStory"]
                            </MudButton>
                        }
                    </PseudoFormFieldGrouping>
                }
            </div>
        </Collapsable>

        <Collapsable Title="@Localizer["CreateElementForm.Fields.Collapsable.Design.Title"]"
                     InitiallyCollapsed="true">
            <div class="w-4/4 px-6">
                    @switch (ElementMode)
                    {
                        case ElementMode.Story:
                            <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">
                                @Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Title"]
                            </p>
                            <p class="text-xs cursor-default">
                                @Localizer["CreateElementForm.Fields.Collapsable.Story.NPC.Text"]
                            </p>
                            break;
                        case ElementMode.Adaptivity:
                            <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">
                                @Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Robot.Title"]
                            </p>
                            <p class="text-xs cursor-default">
                                @Localizer["CreateElementForm.Fields.Collapsable.Adaptivity.Robot.Text"]
                            </p>
                            break;
                        case ElementMode.Normal:
                            <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">
                                @Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Furniture.Title"]
                            </p>
                            <p class="text-xs cursor-default">
                                @Localizer["CreateElementForm.Fields.Collapsable.Learning.Object.Text"]
                            </p>
                            break;
                    }
                    
                <div
                    class="@(ElementMode != ElementMode.Adaptivity ? "overflow-y-scroll h-52 border-adlergrey-200 border rounded" : "")">
                    <ElementModelGridSelect @bind-Value="FormDataContainer.FormModel.ElementModel"
                                            For="@(() => FormModel.ElementModel)"
                                            Label="@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.3DRepresentation.Text"]"
                                            Elements="GetElementModels()">
                    </ElementModelGridSelect>
                </div>

                @if (ElementMode == ElementMode.Story && StoryContentModel != null)
                {
                    <p class="text-xs font-bold pt-2 cursor-default text-adlertitledarkblue">
                        @Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.NpcName.Title"]
                    </p>
                    <MudTextField @bind-Value="StoryContentModel.NpcName"
                                  For="@(() => StoryContentModel.NpcName)"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.NpcName.Text"]"
                                  Typo="Typo.subtitle2"
                                  Margin="Margin.Dense"
                                  Placeholder="@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.NpcName.Placeholder"]"/>
                    <NpcMoodSelect @bind-Value="@(StoryContentModel.NpcMood)"
                                   ElementModel="FormDataContainer.FormModel.ElementModel"
                                   Label="@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.NpcMood.Text"]">
                    </NpcMoodSelect>
                }
            </div>
        </Collapsable>
        
        <Collapsable Title="@Localizer["CreateElementForm.Fields.Collapsable.Interaction.Title"]"
                     InitiallyCollapsed="@(ElementMode == ElementMode.Story)">
            <div class="w-4/4 px-6">
                @switch (ElementMode)
                {
                    case ElementMode.Normal:
                        <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Title"]</p>
                        <p class="cursor-default text-xs">@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Text"]</p>
                        @if (!WorldPresenter.GetAllContent().Any())
                        {
                            <NoContentWarning ContentFilesChanged="OnFilesChanged"
                                              For="@(() => FormModel.LearningContent!)"/>
                        }
                        else
                        {
                            <div class="flex flex-col gap-1">
                                <p class="text-xs text-adlergrey-500 pt-1">@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Text.SelectedLearningMaterial"]</p>
                                <div
                                    class="flex items-center cursor-default rounded border border-adlergrey-200 bg-adlerdeactivated">
                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                                                   Disabled="@(FormDataContainer.FormModel.LearningContent == null)"
                                                   OnClick="() => PresentationLogic.ShowLearningContentAsync(FormDataContainer.FormModel.LearningContent!)"
                                                   Class="show-content-preview py-2"
                                                   title="@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Preview"]"/>

                                    <MudTextField
                                        T="ILearningContentFormModel"
                                        @ref="_contentTextField"
                                        @bind-Value="FormDataContainer.FormModel.LearningContent"
                                        @bind-Text="@LearningContentName"
                                        Variant="Variant.Text"
                                        For="@(() => FormModel.LearningContent!)"
                                        ReadOnly="true"
                                        Typo="Typo.subtitle2"
                                        Disabled="true"
                                        Underline="false"
                                        Style="color: rgb(69,160,229); margin-top: 6px;"
                                        Margin="Margin.Dense"
                                        Class="w-96">
                                    </MudTextField>

                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   OnClick="OpenLearningContentDialog"
                                                   title="@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Edit"]">
                                    </MudIconButton>
                                </div>
                            </div>

                            @if (FormModel.LearningContent is FileContentFormModel { Type: "h5p" } fc)
                            {
                                <div class="flex flex-col">
                                    <MudCheckBox @bind-Value="@(fc.PrimitiveH5P)">
                                        @Localizer["CreateElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Text"]
                                        <MudTooltip Class="bg-adlerdarkblue-200 shadow-xl">
                                            <ChildContent>
                                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                                               Class="text-adlergrey-200 hover:text-adlerdarkblue"
                                                               OnClick="ShowH5PInfoDialog"/>
                                            </ChildContent>
                                            <TooltipContent>
                                                @Localizer["CreateElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Tooltip.Text"]
                                            </TooltipContent>
                                        </MudTooltip>
                                    </MudCheckBox>
                                </div>
                            }
                        }
                        break;
                
                    case ElementMode.Adaptivity:
                        <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Title"]</p>
                        <p class="text-xs cursor-default">@Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Text"]</p>
                        <div class="flex flex-col items-center justify-center">
                            <MudButton Class="w-44 2xl:w-3/5 add-tasks btn-standard"
                                       OnClick="OpenAdaptivityContentDialog">
                                @Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Text"]
                            </MudButton>
                        </div>
                        <div>
                            <p class="text-xs pt-2 cursor-default">
                                <span class="text-adlergrey-800">
                                    @Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Subtitle"]
                                </span>
                            </p>

                            @{
                                var content = (AdaptivityContentFormModel?)FormDataContainer.FormModel.LearningContent;
                                var tasks = content?.Tasks ?? new List<IAdaptivityTaskViewModel>();
                                var count = tasks.Count;
                                var mandatoryCount = tasks.Count(x => x.MinimumRequiredDifficulty != null);

                                string aufgabenLabel = count == 1
                                    ? Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Task.One"]
                                    : Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Task.More"];
                            }

                            <p class="text-xs text-adlerblue-600 cursor-default">
                                @count
                                <span class="text-adlergrey-800">
                                    @aufgabenLabel
                                </span>
                                <span class="text-adlergrey-800">
                                    (@Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Task.Mandatory"]: @mandatoryCount)
                                </span>
                            </p>
                            
                            @if (count > 0)
                            {
                                <ul class="pl-2 py-2 mt-0 border border-adlergrey-300 rounded w-full list-disc list-inside cursor-default max-h-40 overflow-y-auto">
                                    @foreach (var task in tasks)
                                    {
                                        var isMandatory = task.MinimumRequiredDifficulty != null;
                                        <li class="text-sm">
                                            @task.Name
                                            <span class="ml-1 @(isMandatory ? "text-adlergrey-800" : "italic text-adlergrey-300")">
                                                (@(isMandatory ? @Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Task.Mandatory"] : "optional"))
                                            </span>
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <div class="pl-2 py-2 mt-0 border border-adlergrey-300 rounded w-full">
                                    <p class="text-sm italic text-adlergrey-600 cursor-default">
                                        @Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Button.NoTask"]
                                    </p>
                                </div>
                            }
                        </div>

                        break;
                
                    case ElementMode.Story:
                        <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.ExitAfterStorySequence.Title"]</p>
                        <p class="text-xs cursor-default">@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.ExitAfterStorySequence.Text"]</p>
                        <div class="bg-adlerbggradientto rounded my-1 px-1 py-4">
                            <LabelledSwitch @bind-State="ExitAfterStorySequenceState"
                                            LeftLabel="@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.ExitAfterStorySequence.Stay"]"
                                            LeftLabelIconSvg="@CustomIcons.SpaceStay"
                                            RightLabel="@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.ExitAfterStorySequence.Leave"]"
                                            RightLabelIconSvg="@CustomIcons.SpaceLeave"/>
                        </div>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(ElementMode));
                }
            </div>
        </Collapsable>
    </Fields>

    <FooterButtons>
        <div
            class="flex flex-row justify-end absolute left-0 bottom-0 border-t-2 border-adlergrey-100 bg-adlerbgbright w-full">
            <DefaultSubmitButton/>
        </div>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningSpacePresenter SpacePresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IElementModelHandler ElementModelHandler { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<CreateElementForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] internal IMapper Mapper { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;

    [Parameter] public ElementMode ElementMode { get; set; }

    private LearningElementFormModel FormModel => FormDataContainer.FormModel;
    private StoryContentFormModel? StoryContentModel => (StoryContentFormModel?)FormDataContainer.FormModel.LearningContent;

    private PseudoFormFieldGrouping<ILearningContentFormModel?>? _pseudoGroupStoryContent;

    private BaseForm<LearningElementFormModel, LearningElement> _form = null!;
    private MudTextField<string> _nameField = null!;
    private MudTextField<ILearningContentFormModel>? _contentTextField;

    private LabelledSwitchState IsRequired
    {
        get => FormModel.Points == 1 ? LabelledSwitchState.Left : LabelledSwitchState.Right;
        set => FormModel.Points = value == LabelledSwitchState.Left ? 1 : 0;
    }

    private LabelledSwitchState ExitAfterStorySequenceState
    {
        get => StoryContentModel!.ExitAfterStorySequence ? LabelledSwitchState.Right : LabelledSwitchState.Left;
        set => StoryContentModel!.ExitAfterStorySequence = value == LabelledSwitchState.Right;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await _form.FocusField(_nameField);
        }
    }

    private void OnValidSubmit(LearningElementFormModel model)
    {
        //check content for not null again even though validation ensures that LearningContent is not null
        //because of a non-reproducible bug where an element without content was able to be created - m.ho, n.stich
        if (model.LearningContent == null)
            throw new InvalidOperationException("No learning content selected - validation let no content pass");

        FormModel.Points = model.LearningContent switch
        {
            AdaptivityContentFormModel adaptivityContentFormModel => adaptivityContentFormModel.Tasks.Any(x => x.MinimumRequiredDifficulty != null) ? 1 : 0,
            _ => FormModel.Points
        };

        if (SelectedViewModelsProvider.ActiveElementSlotInSpace != -1 && ElementMode is not ElementMode.Story)
            SpacePresenter.CreateLearningElementInSlotFromFormModel(model);
        else if (SelectedViewModelsProvider.ActiveStorySlotInSpace != -1 && ElementMode is ElementMode.Story)
            SpacePresenter.CreateStoryElementInSlotFromFormModel(model);
        else
            WorldPresenter.CreateUnplacedLearningElementFromFormModel(model);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        switch (ElementMode)
        {
            case ElementMode.Adaptivity:
                FormDataContainer.FormModel.LearningContent = new AdaptivityContentFormModel();
                FormDataContainer.FormModel.ElementModel = ElementModelHandler.GetElementModels(ElementModelContentType.Adaptivity, theme: WorldPresenter.LearningWorldVm?.WorldTheme).First();
                break;
            case ElementMode.Story:
                var storyContentFormModel = new StoryContentFormModel();
                storyContentFormModel.StoryText.Add("");
                FormDataContainer.FormModel.LearningContent = storyContentFormModel;
                FormDataContainer.FormModel.ElementModel = ElementModelHandler.GetElementModels(ElementModelContentType.Story, theme: WorldPresenter.LearningWorldVm?.WorldTheme).First();
                break;
            case ElementMode.Normal:
                if (SelectedViewModelsProvider.LearningContent == null) return;
                FormDataContainer.FormModel.LearningContent = Mapper.Map<ILearningContentFormModel>(SelectedViewModelsProvider.LearningContent);
                SelectedViewModelsProvider.SetLearningContent(null, null);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async void OpenAdaptivityContentDialog()
    {
        var options = new DialogOptions
        {
            BackdropClick = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };
        var parameters = new DialogParameters
        {
            { nameof(AdaptivityContentDialog.MyContent), FormDataContainer.FormModel.LearningContent }
        };
        var dialog = await DialogService.ShowAsync<AdaptivityContentDialog>(Localizer["CreateElementForm.AdaptivityContent.Dialog.Title"], parameters, options);
        _ = await dialog.Result;
        StateHasChanged();
    }

    private async void OpenLearningContentDialog()
    {
        var options = new DialogOptions
        {
            BackdropClick = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };

        var parameters = new DialogParameters
        {
            { nameof(LearningContentDialog.LearningContent), FormDataContainer.FormModel.LearningContent }
        };
        var dialog = await DialogService.ShowAsync<LearningContentDialog>(Localizer["CreateElementForm.LearningMaterial.Dialog.Title"], parameters, options);
        _ = await dialog.Result;
        if (dialog.Result.Result == null) return;
        if (dialog.Result.Result.Canceled)
            return;

        if (!Equals(FormModel.LearningContent, dialog.Result.Result.Data) && dialog.Result.Result.Data != null)
        {
            var dialogResult = (ILearningContentFormModel)dialog.Result.Result.Data;
            FormModel.LearningContent = dialogResult;
            _contentTextField?.ResetValidation();
        }

        StateHasChanged();
    }

    private void OnFilesChanged()
    {
        StateHasChanged();
    }

    private async Task HandleKeyEvent(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            await _form.SubmitAsync();
        }
    }

    private string GetSnackbarMessage()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["CreateElementForm.SnackbarMessage"],
            ElementMode.Adaptivity => Localizer["CreateAdaptivityElementForm.SnackbarMessage"],
            ElementMode.Story => Localizer["CreateStoryElementForm.SnackbarMessage"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private string GetHeaderText()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["CreateElementForm.Header.Text"],
            ElementMode.Adaptivity => Localizer["CreateAdaptivityElementForm.Header.Text"],
            ElementMode.Story => Localizer["CreateStoryElementForm.Header.Text"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private IEnumerable<ElementModel> GetElementModels()
    {
        var elementModelContentType = ElementMode switch
        {
            ElementMode.Normal when FormModel.LearningContent is FileContentFormModel => ElementModelContentType.File,
            ElementMode.Normal when FormModel.LearningContent is LinkContentFormModel => ElementModelContentType.Link,
            ElementMode.Normal => ElementModelContentType.Any,
            ElementMode.Adaptivity => ElementModelContentType.Adaptivity,
            ElementMode.Story => ElementModelContentType.Story,
            _ => throw new ArgumentOutOfRangeException()
        };
        var fileType = elementModelContentType is ElementModelContentType.File ? ((FileContentFormModel)FormModel.LearningContent!).Type : "";
        return ElementModelHandler.GetElementModels(elementModelContentType, fileType,
            SelectedViewModelsProvider.LearningObjectInPathWay is LearningSpaceViewModel space ? WorldPresenter.LearningWorldVm?.WorldTheme : null);
    }
    
    private async Task ShowH5PInfoDialog()
    {
        var dialogParams = new DialogParameters()
        {
            { nameof(GenericInfoDialog.DialogText), (MarkupString)Localizer["CreateElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Info.Text"].Value },
        };
        await DialogService.ShowAsync<GenericInfoDialog>("H5P Info", dialogParams);
    }
    
    private string LearningContentName
    {
        get => FormDataContainer.FormModel.LearningContent?.Name ?? String.Empty;
        set { }
    }

}