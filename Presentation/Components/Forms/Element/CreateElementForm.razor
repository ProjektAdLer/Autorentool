@implements IDisposable
@implements IAsyncDisposable
@using Presentation.PresentationLogic.LearningWorld
@using Shared
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.Components.Forms.Models
@using BusinessLogic.Entities
@using System.ComponentModel
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms.Buttons
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.SelectedViewModels
@using Presentation.View

<header class="m-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-xl text-center font-bold text-adlergrey-500 mx-2">@Localizer["CreateElementForm.Header.Text"]</h2>
    </div>
</header>
<MudDivider DividerType="DividerType.Middle" Class="my-4"></MudDivider>
<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement"
          OnValidSubmit="OnValidSubmit"
          SnackbarMessage=@Localizer["CreateElementForm.SnackbarMessage"]
          FormDataContainer="FormDataContainer">
    <Fields>

        <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.General.Title"]
                     @bind-Collapsed="_collapsedGeneral">
            <div class="rounded-lg w-4/4 px-4 pb-2">
                <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                              For="@(() => FormModel.Name)"
                              Immediate="true"
                              DebounceInterval="300"
                              Label=@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Name.Text"]
                              Class="pb-4"/>

                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Points.Text"]</MudText>
                <MudNumericField @bind-Value="FormDataContainer.FormModel.Points"
                                 Min="1"
                                 Max="1000"
                                 For="@(() => FormModel.Points)"
                                 Immediate="true"
                                 DebounceInterval="300"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Class="pb-4"/>

                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Workload.Text"]</MudText>
                <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                 Min="0"
                                 Max="1000"
                                 For="@(() => FormModel.Workload)"
                                 Immediate="true"
                                 DebounceInterval="300"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Class="pb-4"/>

                <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                           Label=@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Difficulty.Text"]
                           For="@(() => FormModel.Difficulty)">
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)">@Localizer["CreateElementForm.Difficulty.Easy"]</MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)">@Localizer["CreateElementForm.Difficulty.Medium"]</MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)">@Localizer["CreateElementForm.Difficulty.Hard"]</MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.None)">@Localizer["CreateElementForm.Difficulty.None"]</MudSelectItem>
                </MudSelect>

            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Title"] @bind-Collapsed="_collapsedContent">
            <div class="rounded-lg max-w-2xl px-4 pb-2">
                <MudSelect @bind-Value="FormDataContainer.FormModel.LearningContent" AnchorOrigin="Origin.BottomCenter"
                           Label=@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Field.LearningContent.Text"]
                           For="@(() => FormModel.LearningContent)"
                           >
                    @foreach (var learningContent in WorldPresenter.GetAllContent())
                    {
                        <MudSelectItem Value="@(learningContent)"/>
                    }
                </MudSelect>
            </div>
        </Collapsable>
        
        <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Title"] @bind-Collapsed="_collapsedElementModel">
            <div class="rounded-lg w-4/4 px-4 pb-4">
                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.3DRepresentation.Text"]</MudText>
                <MudSelect @bind-Value="FormDataContainer.FormModel.ElementModel"
                           AnchorOrigin="Origin.BottomCenter"
                           For="@(() => FormModel.ElementModel)"
                           Variant="Variant.Outlined">
                    @foreach (var theme in ElementModelHandler.GetElementModels(FormDataContainer.FormModel.LearningContent))
                    {
                        <MudSelectItem Value="@(theme)" Style="white-space: nowrap">
                            <img src="@ElementModelHandler.GetIconForElementModel(theme)" alt="" width="38" class="mr-1"/>@*@theme*@
                        </MudSelectItem>
                    }
                </MudSelect>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.Goals.Title"] @bind-Collapsed="_collapsedGoals">
            <div class="rounded-lg w-4/4 px-4">
                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Description.Text"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                              For="@(() => FormModel.Description)"
                              Immediate="true"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="300"
                              Class="pb-4 mt-0"/>
                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Goals.Text"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                              For="@(() => FormModel.Goals)"
                              Immediate="true"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="300"
                              Class="pb-2 mt-0"/>
            </div>
        </Collapsable>

    </Fields>
    <FooterButtons>
        <DefaultSubmitButton/>
        <DefaultResetButton/>
    </FooterButtons>
</BaseForm>

@code {
#pragma warning disable CS8618 - injected by framework
    [Inject]
    private ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject]
    private ILearningSpacePresenter SpacePresenter { get; set; }

    [Inject]
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject]
    private IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Inject]
    private IElementModelHandler ElementModelHandler { get; set; }
    
    [Inject]
    private IStringLocalizer<CreateElementForm> Localizer { get; set; }

    [Parameter]
#pragma warning restore CS8618
        public EventCallback OnSubmitted { get; set; }

    private LearningElementFormModel FormModel => FormDataContainer.FormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedContent = false;
    private bool _collapsedGoals = true;
    private bool _collapsedElementModel = true;

    private void OnValidSubmit(LearningElementFormModel model)
    {
        if (SelectedViewModelsProvider.LearningWorld == null)
            throw new InvalidOperationException("No learning world selected.");
        //check content for not null again even though validation ensures that LearningContent is not null
        //because of a non-reproducible bug where an element without content was able to be created - m.ho, n.stich
        if (model.LearningContent == null)
            throw new InvalidOperationException("No learning content selected - validation let no content pass");

        if (SelectedViewModelsProvider.ActiveSlotInSpace == -1)
            WorldPresenter.CreateUnplacedLearningElement(
                model.Name, model.LearningContent, model.Description, model.Goals, model.Difficulty, model.ElementModel,
                model.Workload, model.Points);
        else
        {
            SpacePresenter.CreateLearningElementInSlot(
                model.Name, model.LearningContent, model.Description, model.Goals, model.Difficulty, model.ElementModel,
                model.Workload, model.Points);
        }
        OnSubmitted.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        SelectedViewModelsProvider.PropertyChanged += MediatorOnPropertyChanged;
        base.OnInitialized();
        if (SelectedViewModelsProvider.LearningContent == null) return;
        FormDataContainer.FormModel.LearningContent = SelectedViewModelsProvider.LearningContent;
        SelectedViewModelsProvider.SetLearningContent(null, null);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private async void MediatorOnPropertyChanged(object? sender, PropertyChangedEventArgs propertyChangedEventArgs)
    {
        await InvokeAsync(StateHasChanged);
    }

    public ValueTask DisposeAsync()
    {
        Dispose();
        return ValueTask.CompletedTask;
    }

    public void Dispose()
    {
        SelectedViewModelsProvider.PropertyChanged -= MediatorOnPropertyChanged;
    }

}