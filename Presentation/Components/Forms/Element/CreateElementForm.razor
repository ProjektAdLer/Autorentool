@implements IDisposable
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.Components.Forms.Models
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using Presentation.Components.Forms.Buttons
@implements IAsyncDisposable

<header class="m-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-xl text-center font-bold text-adlergrey-500 mx-2">@Localizer["Header.Text"]</h2>
    </div>
</header>
<MudDivider DividerType="DividerType.Middle" Class="my-4"></MudDivider>
<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement"
          OnValidSubmit="OnValidSubmit" SnackbarMessage=@Localizer["Form.Message.Alert.Text"] FormDataContainer="FormDataContainer">
    <Fields>
        
        <Collapsable Title=@Localizer["Form.Fields.Collapsable.Title.General"] @bind-Collapsed="_collapsedGeneral">
            <div class="rounded-lg w-4/4 px-4 pb-2">
                <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                              For="@(() => FormModel.Name)"
                              Immediate="true"
                              DebounceInterval="300"
                              Label="@nameof(FormDataContainer.FormModel.Name)"/>

                <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                 For="@(() => FormModel.Workload)"
                                 Immediate="true"
                                 DebounceInterval="300"
                                 Label=@Localizer["Form.Fields.Collapsable.Field.Workload.Title"]/>
                <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                           Label="@nameof(FormDataContainer.FormModel.Difficulty)"
                           For="@(() => FormModel.Difficulty)">
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)"> @Localizer["Difficulty.Easy"] </MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)"> @Localizer["Difficulty.Medium"] </MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)"> @Localizer["Difficulty.Hard"] </MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.None)"> @Localizer["Difficulty.None"] </MudSelectItem>
                </MudSelect>
                <MudNumericField @bind-Value="FormDataContainer.FormModel.Points"
                                 For="@(() => FormModel.Points)"
                                 Immediate="true"
                                 DebounceInterval="300"
                                 Label="@nameof(FormDataContainer.FormModel.Points)"/>
            </div>
            </Collapsable>
        
        <Collapsable Title=@Localizer["Form.Fields.Collapsable.Title.LearningContent"] @bind-Collapsed="_collapsedContent">
            <div class="rounded-lg max-w-2xl px-4 pb-2">
            <MudSelect @bind-Value="FormDataContainer.FormModel.LearningContent" AnchorOrigin="Origin.BottomCenter"
                       Label="@nameof(FormDataContainer.FormModel.LearningContent)"
                       Text="@FormDataContainer.FormModel.LearningContent?.Name"
                       For="@(() => FormModel.LearningContent)">
                @foreach (var learningContent in WorldPresenter.GetAllContent())
                {
                    <MudSelectItem Value="@(learningContent)">@learningContent.Name</MudSelectItem>
                }
            </MudSelect>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["Form.Fields.Collapsable.Title.Goals"] @bind-Collapsed="_collapsedGoals">
            <div class="rounded-lg w-4/4 px-4">
                <MudText Typo="Typo.caption">@Localizer["Form.Fields.Collapsable.Goals.Text.Description"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                              For="@(() => FormModel.Description)"
                              Immediate="true"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="300"
                              Class="pb-2 mt-0"/>
                <MudText Typo="Typo.caption">@Localizer["Form.Fields.Collapsable.Goals.Field.Goals.Title"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                              For="@(() => FormModel.Goals)"
                              Immediate="true"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="300"
                              Class="pb-2 mt-0"/>
        </div>
        </Collapsable>
        
    </Fields>
    <FooterButtons>
        <DefaultSubmitButton/>
        <DefaultResetButton/>
    </FooterButtons>
</BaseForm>

@code {
#pragma warning disable CS8618 - injected by framework
    [Inject]
    private ILearningWorldPresenter WorldPresenter { get; set; }
    
    [Inject]
    private ILearningSpacePresenter SpacePresenter { get; set; }

    [Inject]
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject]
    private IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }
    
    [Inject]
    private StringLocalizer<CreateElementForm> Localizer { get; set; }

    [Parameter]
#pragma warning restore CS8618
        public EventCallback OnSubmitted { get; set; }

    private LearningElementFormModel FormModel => FormDataContainer.FormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedContent = false;
    private bool _collapsedGoals = true;

    private void OnValidSubmit(LearningElementFormModel model)
    {
        if (SelectedViewModelsProvider.LearningWorld == null)
            throw new InvalidOperationException("No learning world selected.");
        
        if(SpacePresenter.ActiveSlot == -1)
            WorldPresenter.CreateUnplacedLearningElement(
                //ignore null warning here because validation ensures that LearningContent is not null - m.ho
                model.Name, model.LearningContent!, model.Description, model.Goals, model.Difficulty,
                model.Workload, model.Points);
        else
        {
            SpacePresenter.CreateLearningElementInSlot(
                //ignore null warning here because validation ensures that LearningContent is not null - m.ho
                model.Name, model.LearningContent!, model.Description, model.Goals, model.Difficulty,
                model.Workload, model.Points);
        }
        OnSubmitted.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        SelectedViewModelsProvider.PropertyChanged += MediatorOnPropertyChanged;
        base.OnInitialized();
        if (SelectedViewModelsProvider.LearningContent == null) return;
        FormDataContainer.FormModel.LearningContent = SelectedViewModelsProvider.LearningContent;
        SelectedViewModelsProvider.SetLearningContent(null, null);
    }

    private async void MediatorOnPropertyChanged(object? sender, PropertyChangedEventArgs propertyChangedEventArgs)
    {
        await InvokeAsync(StateHasChanged);
    }

    public ValueTask DisposeAsync()
    {
        Dispose();
        return ValueTask.CompletedTask;
    }

    public void Dispose()
    {
        SelectedViewModelsProvider.PropertyChanged -= MediatorOnPropertyChanged;
    }

}