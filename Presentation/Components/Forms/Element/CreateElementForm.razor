@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.FileContent
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms.Buttons
@using System.Diagnostics.CodeAnalysis
@using System.Drawing
@using AutoMapper
@using BusinessLogic.Entities.LearningContent.Story
@using Presentation.Components.Adaptivity.Dialogues
@using Presentation.PresentationLogic.LearningContent.Story
<header class="py-2 2xl:py-3 bg-adlerbgbright border-b-2 border-adlergrey-100">
    <div class="flex justify-center py-2 2xl:py-3">
        <h2 class="text-base 2xl:text-xl text-center font-bold text-adlerdarkblue-800 mx-2">
            @(GetHeaderText())
        </h2>
    </div>
</header>
<MudText Class="text-adlergrey-200 w-4/4 p-4 text-xs">@Localizer["CreateElementForm.Text"]</MudText>

<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement" @ref="_form"
          OnValidSubmit="OnValidSubmit"
          SnackbarMessage="@GetSnackbarMessage()"
          FormDataContainer="FormDataContainer">
    <Fields>
        <div class="px-4">
            <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.General.Title"]        @bind-Collapsed="_collapsedGeneral">
                <div class="rounded-lg w-4/4 px-2 2xl:px-4">
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  @ref="_nameField"
                                  DebounceInterval="DebounceInterval"
                                  OnKeyUp="HandleKeyEvent"
                                  Label=@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Name.Text"]/>
                    @if (ElementMode != ElementMode.Story)
                    {
                    <div class="flex flex-row justify-between py-6 gap-2">
                        <div class="flex-initial items-center gap-2">
                            <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Points.Text"]</MudText>
                            <MudNumericField @bind-Value="FormDataContainer.FormModel.Points"
                                             Min="1"
                                             Max="1000"
                                             For="@(() => FormModel.Points)"
                                             DebounceInterval="DebounceInterval"
                                             OnKeyUp="HandleKeyEvent"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense"/>
                        </div>

                        <MudDivider Style="border-style: dashed; border-color: rgb(230,230,230)" Vertical="true" FlexItem="true"></MudDivider>

                        <div class="flex-initial items-center gap-2">
                            <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Workload.Text"]</MudText>
                            <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                             Min="0"
                                             Max="1000"
                                             For="@(() => FormModel.Workload)"
                                             DebounceInterval="DebounceInterval"
                                             OnKeyUp="HandleKeyEvent"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense"/>
                        </div>
                    </div>
                    }

                    @if (ElementMode == ElementMode.Normal)
                    {
                        <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                                   Immediate="false"
                                   Label="@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Difficulty.Text"]"
                                   For="@(() => FormModel.Difficulty)"
                                   OnKeyUp="HandleKeyEvent"
                                   Variant="Variant.Outlined">
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonEasy"></MudIcon>
                                    <p class="pt-1">@Localizer["CreateElementForm.Difficulty.Easy"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonMedium"></MudIcon>
                                    <p class="pt-1">@Localizer["CreateElementForm.Difficulty.Medium"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonHard"></MudIcon>
                                    <p class="pt-1">@Localizer["CreateElementForm.Difficulty.Hard"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.None)">@Localizer["CreateElementForm.Difficulty.None"]</MudSelectItem>
                        </MudSelect>
                    }
                    else
                    {
                    }
                </div>
            </Collapsable>
        </div>

        @switch (ElementMode)
        {
            case ElementMode.Normal:
                <div class="px-4">
                    <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Title"]        @bind-Collapsed="_collapsedContent">
                        <p class="text-xs pl-6">@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Text"]</p>
                        @if (!WorldPresenter.GetAllContent().Any())
                        {
                            <NoContentWarning For="@(() => FormModel.LearningContent!)"/>
                        }
                        else
                        {
                            <TableSelect
                                T="ILearningContentFormModel"
                                @bind-Value="FormDataContainer.FormModel.LearningContent"
                                For="@(() => FormModel.LearningContent!)"
                                Elements="WorldPresenter.GetAllContent().Select(vm => Mapper.Map<ILearningContentFormModel>(vm))"
                                OnKeyUp="HandleKeyEvent"
                                FilterFuncSearchableStrings="ILearningContentFormModel.GetSearchableStrings">
                                <HeaderContent>
                                    <MudTh></MudTh>
                                    <MudTh Class="p-0">@Localizer["CreateElementForm.Fields.Collapse.LearningContent.Name"]</MudTh>
                                    <MudTh Class="p-0">@Localizer["CreateElementForm.Fields.Collapse.LearningContent.Type"]</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd Class="p-0">
                                        <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                                                       OnClick="() => PresentationLogic.ShowLearningContentAsync(context)"
                                                       Class="show-content-preview py-2"/>
                                    </MudTd>
                                    <MudTd Class="p-0" DataLabel="Name">
                                        <MudTooltip Text="@context.Name"
                                                    Arrow="true"
                                                    Placement="Placement.Right"
                                                    Class="bg-adlergrey-200 shadow-xl text-adlergrey-800"
                                                    Duration="Double.Epsilon">
                                            <p class="pt-2 cursor-pointer max-w-[5rem] truncate text-ellipsis overflow-hidden">@context.Name</p>
                                        </MudTooltip>
                                    </MudTd>
                                    <MudTd Class="py-0 pl-0 cursor-default" DataLabel="Type">
                                        @if (context is FileContentFormModel fileContentContext)
                                        {
                                            @fileContentContext.Type
                                        }
                                        else
                                        {
                                            <span>Link</span>
                                        }
                                    </MudTd>
                                </RowTemplate>
                            </TableSelect>
                        }
                    </Collapsable>
                </div>
                break;
            case ElementMode.Adaptivity:
                <div class="px-4">
                    <Collapsable Title=@Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Title"]        @bind-Collapsed="_collapsedTasks">
                        <p class="text-xs pl-6">@Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Text"]</p>
                        <div class="flex flex-col items-center justify-center">
                            <MudButton Class="w-44 2xl:w-3/5 add-tasks btn-standard" OnClick="OpenAdaptivityContentDialog">
                                @Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Text"]
                            </MudButton>
                        </div>
                    </Collapsable>
                </div>
                break;
            case ElementMode.Story:
                <div class="px-4">
                    <Collapsable Title="@Localizer["CreateStoryElementForm.Fields.Collapsable.Story.Title"]" @bind-Collapsed="_collapsedStory">
                        <PseudoFormFieldGrouping
                            For="() => FormModel.LearningContent"
                            @ref="_pseudoGroupStoryContent">
                            <p class="text-xs pl-6">@Localizer["CreateStoryElementForm.Fields.Collapsable.StoryText.Text"]</p>
                            @if (StoryContentModel != null)
                            {
                                @for (var i = 0; i < StoryContentModel.StoryText.Count; i++)
                                {
                                    var x = i;
                                    <div class="flex flex-col">
                                        <div class="flex flex-row">
                                            <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                                           OnClick="@(() => StoryContentModel.StoryText.RemoveAt(x))"/>
                                            <MudTextField T="string" Label="@Localizer["CreateStoryElementForm.Fields.Collapsable.StoryText.Text"]"
                                                          Variant="Variant.Outlined" Lines="5"
                                                          @bind-Value="@(StoryContentModel.StoryText[x])"
                                                          DebounceInterval="DebounceInterval"/>
                                        </div>
                                        <p>@($"{StoryContentModel.StoryText[x].Length}/550")</p>
                                    </div>
                                }

                                <MudIconButton Icon="@Icons.Material.Outlined.Add"
                                               OnClick="@(() => StoryContentModel.StoryText.Add(""))"/>
                            }
                        </PseudoFormFieldGrouping>
                    </Collapsable>
                </div>
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(ElementMode));
        }

        <div class="px-4">
            <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Title"]        @bind-Collapsed="_collapsedElementModel">
                <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                    <ElementModelGridSelect @bind-Value="FormDataContainer.FormModel.ElementModel"
                                            For="@(() => FormModel.ElementModel)"
                                            Label="@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.3DRepresentation.Text"]"
                                            Elements="GetElementModels()">
                    </ElementModelGridSelect>
                </div>
            </Collapsable>
        </div>

        @if (ElementMode != ElementMode.Story)
        {
            <div class="px-4">
                <Collapsable
                    Title=@Localizer["CreateElementForm.Fields.Collapsable.Goals.Title"]     @bind-Collapsed="_collapsedGoals">
                    <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                        <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Description.Text"]</MudText>
                        <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                      For="@(() => FormModel.Description)"
                                      Lines="3"
                                      Variant="Variant.Outlined"
                                      DebounceInterval="DebounceInterval"
                                      Class="pb-4 mt-0"/>
                        <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Goals.Text"]</MudText>
                        <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                      For="@(() => FormModel.Goals)"
                                      Lines="3"
                                      Variant="Variant.Outlined"
                                      DebounceInterval="DebounceInterval"
                                      Class="pb-2 mt-0"/>
                    </div>
                </Collapsable>
            </div>
        }
    </Fields>
    
    <FooterButtons>
        <DefaultSubmitButton/>
    </FooterButtons>

</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningSpacePresenter SpacePresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IElementModelHandler ElementModelHandler { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<CreateElementForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] internal IMapper Mapper { get; set; }

    [Parameter] public EventCallback OnSubmitted { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;

    [Parameter] public ElementMode ElementMode { get; set; }


    private LearningElementFormModel FormModel => FormDataContainer.FormModel;
    private StoryContentFormModel? StoryContentModel => (StoryContentFormModel?)FormDataContainer.FormModel.LearningContent;

    private bool _collapsedGeneral = false;
    private bool _collapsedContent = false;
    private bool _collapsedTasks = false;
    private bool _collapsedStory = false;
    private bool _collapsedElementModel = true;
    private bool _collapsedGoals = true;

    private PseudoFormFieldGrouping<ILearningContentFormModel?>? _pseudoGroupStoryContent;

    private BaseForm<LearningElementFormModel, LearningElement> _form = null!;
    private MudTextField<string> _nameField = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await _form.FocusField(_nameField);
        }
    }

    private void OnValidSubmit(LearningElementFormModel model)
    {
        //check content for not null again even though validation ensures that LearningContent is not null
        //because of a non-reproducible bug where an element without content was able to be created - m.ho, n.stich
        if (model.LearningContent == null)
            throw new InvalidOperationException("No learning content selected - validation let no content pass");

        if (SelectedViewModelsProvider.ActiveElementSlotInSpace != -1 && ElementMode is not ElementMode.Story)
            SpacePresenter.CreateLearningElementInSlotFromFormModel(model);
        else if (SelectedViewModelsProvider.ActiveStorySlotInSpace != -1 && ElementMode is ElementMode.Story)
            SpacePresenter.CreateStoryElementInSlotFromFormModel(model);
        else
            WorldPresenter.CreateUnplacedLearningElementFromFormModel(model);

        OnSubmitted.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        switch (ElementMode)
        {
            case ElementMode.Adaptivity:
                FormDataContainer.FormModel.LearningContent = new AdaptivityContentFormModel();
                break;
            case ElementMode.Story:
                FormDataContainer.FormModel.LearningContent = new StoryContentFormModel();
                FormDataContainer.FormModel.ElementModel = ElementModelHandler.GetElementModels(ElementModelContentType.Story, theme: SpacePresenter.LearningSpaceVm?.Theme).First();
                break;
            case ElementMode.Normal:
                if (SelectedViewModelsProvider.LearningContent == null) return;
                FormDataContainer.FormModel.LearningContent = Mapper.Map<ILearningContentFormModel>(SelectedViewModelsProvider.LearningContent);
                SelectedViewModelsProvider.SetLearningContent(null, null);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async void OpenAdaptivityContentDialog()
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };
        var parameters = new DialogParameters
        {
            { nameof(AdaptivityContentDialog.MyContent), FormDataContainer.FormModel.LearningContent }
        };
        var dialog = await DialogService.ShowAsync<AdaptivityContentDialog>(Localizer["CreateElementForm.AdaptivityContent.Dialog.Title"], parameters, options);
        _ = await dialog.Result;
        StateHasChanged();
    }

    private async Task HandleKeyEvent(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            await _form.SubmitAsync();
        }
    }

    private string GetSnackbarMessage()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["CreateElementForm.SnackbarMessage"],
            ElementMode.Adaptivity => Localizer["CreateAdaptivityElementForm.SnackbarMessage"],
            ElementMode.Story => Localizer["CreateStoryElementForm.SnackbarMessage"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private string GetHeaderText()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["CreateElementForm.Header.Text"],
            ElementMode.Adaptivity => Localizer["CreateAdaptivityElementForm.Header.Text"],
            ElementMode.Story => Localizer["CreateStoryElementForm.Header.Text"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private IEnumerable<ElementModel> GetElementModels()
    {
        var elementModelContentType = ElementMode switch
        {
            ElementMode.Normal when FormModel.LearningContent is FileContentFormModel => ElementModelContentType.File,
            ElementMode.Normal when FormModel.LearningContent is LinkContentFormModel => ElementModelContentType.Link,
            ElementMode.Normal => ElementModelContentType.Any,
            ElementMode.Adaptivity => ElementModelContentType.Adaptivity,
            ElementMode.Story => ElementModelContentType.Story,
            _ => throw new ArgumentOutOfRangeException()
        };
        var fileType = elementModelContentType is ElementModelContentType.File ? ((FileContentFormModel)FormModel.LearningContent!).Type : "";
        return ElementModelHandler.GetElementModels(elementModelContentType, fileType,
            SelectedViewModelsProvider.LearningObjectInPathWay is LearningSpaceViewModel space ? space.Theme : null);
    }


}