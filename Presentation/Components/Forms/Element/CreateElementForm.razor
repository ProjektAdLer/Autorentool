@using System.Diagnostics.CodeAnalysis
@using AutoMapper
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using Presentation.Components.Adaptivity.Dialogues
@using Presentation.Components.Dialogues
@using Presentation.Components.Forms.Buttons
@using Presentation.Components.Forms.Content
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Size = MudBlazor.Size

<div class="absolute w-full z-30 h-24">
    <header class="py-4 bg-adlerbgbright border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
            <h2 class="text-base 2xl:text-xl text-center font-bold text-adlerdarkblue-800 mx-2">@(GetHeaderText())</h2>
    </header>
    <div class="flex justify-between items-start">
        <MudText Class="text-adlergrey-200 text-xs p-2">@Localizer["CreateElementForm.Text"]</MudText>
    </div>
</div>

<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement" @ref="_form"
          OnValidSubmit="OnValidSubmit"
          SnackbarMessage="@GetSnackbarMessage()"
          FormDataContainer="FormDataContainer">
    <Fields>
         <div class="px-2 overflow-y-scroll top-28 h-[70%] absolute flex flex-col w-[96%] mx-2 border-t border-dotted">
            <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.General.Title"] InitiallyCollapsed="false">
                <div class="rounded-lg w-4/4 px-2 2xl:px-4">
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  @ref="_nameField"
                                  DebounceInterval="DebounceInterval"
                                  OnKeyUp="HandleKeyEvent"
                                  Label=@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Name.Text"]/>
                    @if (ElementMode != ElementMode.Story)
                    {
                        <div class="flex flex-row justify-between py-6 gap-2">
                            <div class="flex-initial items-center gap-2">
                                <MudText
                                    Typo="Typo.caption">
                                    @Localizer["CreateElementForm.Fields.Collapsable.General.Field.Points.Text"]
                                </MudText>
                                <MudNumericField @bind-Value="FormDataContainer.FormModel.Points"
                                                 Min="1"
                                                 Max="1000"
                                                 For="@(() => FormModel.Points)"
                                                 DebounceInterval="DebounceInterval"
                                                 OnKeyUp="HandleKeyEvent"
                                                 Variant="Variant.Outlined"
                                                 Margin="Margin.Dense"/>
                            </div>

                            <MudDivider Style="border-style: dashed; border-color: rgb(230,230,230)" Vertical="true"
                                        FlexItem="true">
                            </MudDivider>

                            <div class="flex-initial items-center gap-2">
                                <MudText
                                    Typo="Typo.caption">
                                    @Localizer["CreateElementForm.Fields.Collapsable.General.Field.Workload.Text"]
                                </MudText>
                                <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                                 Min="0"
                                                 Max="1000"
                                                 For="@(() => FormModel.Workload)"
                                                 DebounceInterval="DebounceInterval"
                                                 OnKeyUp="HandleKeyEvent"
                                                 Variant="Variant.Outlined"
                                                 Margin="Margin.Dense"/>
                            </div>
                        </div>
                    }

                    @if (ElementMode == ElementMode.Normal)
                    {
                        <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                                   Immediate="false"
                                   Label="@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Difficulty.Text"]"
                                   For="@(() => FormModel.Difficulty)"
                                   OnKeyUp="HandleKeyEvent"
                                   Variant="Variant.Outlined"
                                   Dense="true"
                                   Margin="Margin.Dense"
                                   Class="text-xs">
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonEasy"></MudIcon>
                                    <p class="pt-1">@Localizer["CreateElementForm.Difficulty.Easy"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonMedium"></MudIcon>
                                    <p class="pt-1">@Localizer["CreateElementForm.Difficulty.Medium"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)">
                                <div class="flex items-center gap-2">
                                    <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonHard"></MudIcon>
                                    <p class="pt-1">@Localizer["CreateElementForm.Difficulty.Hard"]</p>
                                </div>
                            </MudSelectItem>
                            <MudSelectItem
                                Value="@(LearningElementDifficultyEnum.None)">
                                @Localizer["CreateElementForm.Difficulty.None"]
                            </MudSelectItem>
                        </MudSelect>
                    }
                </div>
            </Collapsable>

        @switch (ElementMode)
        {
            case ElementMode.Normal:
                    <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Title"] InitiallyCollapsed="false">
                        <p class="text-xs pl-2 pt-1">@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Text"]</p>
                        @if (!WorldPresenter.GetAllContent().Any())
                        {
                            <NoContentWarning For="@(() => FormModel.LearningContent!)"/>
                        }
                        else
                        {
                            <div class="flex flex-col gap-1 p-2">
                                <MudText Class="text-xs font-bold">@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Text.SelectedLearningMaterial"]</MudText>
                                <div class="flex items-center cursor-default rounded border-2 border-adlergrey-200 bg-adlerdeactivated">
                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                                                   Disabled="@(FormDataContainer.FormModel.LearningContent == null)"
                                                   OnClick="() => PresentationLogic.ShowLearningContentAsync(FormDataContainer.FormModel.LearningContent!)"
                                                   Class="show-content-preview py-2"
                                                   Title="@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Preview"]"/>
                                                    
                                    <MudTextField
                                        T="ILearningContentFormModel"
                                        @ref="_contentTextField"
                                        @bind-Value="FormDataContainer.FormModel.LearningContent"
                                        @bind-Text="@LearningContentName"
                                        Variant="Variant.Text"
                                        For="@(() => FormModel.LearningContent!)"
                                        ReadOnly="true"
                                        Disabled="true"
                                        DisableUnderLine="true"
                                        Style="color: rgb(69,160,229);"
                                        Margin="Margin.Dense"
                                        Class="pb-3 px-1">
                                    </MudTextField>
                                    
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="OpenLearningContentDialog" Title="@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Edit"]">
                                    </MudIconButton>
                                </div>
                            </div>
                            
                            @if (FormModel.LearningContent is FileContentFormModel { Type: "h5p" } fc)
                            {
                                <div class="flex flex-col">
                                    <MudCheckBox @bind-Value="@(fc.PrimitiveH5P)">
                                        @Localizer["CreateElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Text"]
                                        <MudTooltip>
                                            <ChildContent>
                                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                                               Class="text-adlergrey-200 hover:text-adlerdarkblue"
                                                               OnClick="ShowH5PInfoDialog"/>
                                            </ChildContent>
                                            <TooltipContent>
                                                @Localizer["CreateElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Tooltip.Text"]
                                            </TooltipContent>
                                        </MudTooltip>
                                    </MudCheckBox>
                                </div>
                            }
                        }
                    </Collapsable>
         
                break;
            case ElementMode.Adaptivity:
                    <Collapsable Title=@Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Title"] InitiallyCollapsed="false">
                        <p class="text-xs pl-2 pt-1">@Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Text"]</p>
                        <div class="flex flex-col items-center justify-center">
                            <MudButton Class="w-44 2xl:w-3/5 add-tasks btn-standard" OnClick="OpenAdaptivityContentDialog">
                                @Localizer["CreateAdaptivityElementForm.Fields.Collapsable.Tasks.Button.Text"]
                            </MudButton>
                        </div>
                    </Collapsable>
              
                break;
            case ElementMode.Story:
                    <Collapsable Title="@Localizer["CreateStoryElementForm.Fields.Collapsable.Story.Title"]" InitiallyCollapsed="false">
                        <PseudoFormFieldGrouping
                            For="() => FormModel.LearningContent"
                            @ref="_pseudoGroupStoryContent">

                            <div class="flex flex-row items-center gap-1 py-2">
                                <p class="text-xs pl-2 pt-1">@Localizer["CreateStoryElementForm.Fields.Collapsable.StoryText.Text"]
                                    <MudTooltip Placement="Placement.Right"
                                                Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                                        <TooltipContent>
                                            <MudText
                                                Class="text-xs">
                                                @((MarkupString)Localizer["CreateElementForm.Story.Tooltip"].ToString())
                                            </MudText>
                                        </TooltipContent>
                                        <ChildContent>
                                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                                     Class="text-adlergrey hover:text-adlerdarkblue">
                                            </MudIcon>
                                        </ChildContent>
                                    </MudTooltip>
                                </p>
                            </div>
                            
                            @if (StoryContentModel != null)
                            {
                                @for (var i = 0; i < StoryContentModel.StoryText.Count; i++)
                                {
                                    <p class="text-xs pl-2 pt-4 font-bold text-adlertextgrey">@Localizer["CreateStoryElementForm.Fields.Collapsable.StoryText.Slide"]@(i + 1)</p>
                                    var x = i;
                                    <div class="flex flex-col">
                                        <div class="flex flex-row items-center">
                                            <MudTextField T="string"
                                                          Variant="Variant.Outlined" Lines="5"
                                                          @bind-Value="@(StoryContentModel.StoryText[x])"
                                                          DebounceInterval="DebounceInterval"
                                                          Class="pl-2"/>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                           OnClick="@(() => StoryContentModel.StoryText.RemoveAt(x))"
                                                           Title=@Localizer["CreateStoryElementForm.Fields.Collapsable.Story.DeleteStory"]
                                                           Size="Size.Small"
                                                           Class="p-2">
                                            </MudIconButton>
                                        </div>
                                        <p class="pl-2 text-adlergrey-500">@($"{StoryContentModel.StoryText[x].Length}/400 Zeichen")</p>
                                    </div>
                                }

                                <div class="flex justify-center items-center">
                                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                                   Class="add-story-block-button p-2"
                                                   OnClick="@(() => StoryContentModel.StoryText.Add(""))"
                                                   Title=@Localizer["CreateStoryElementForm.Fields.Collapsable.Story.AddStory"]
                                                   Size="Size.Small">
                                    </MudIconButton>
                                </div>
                            }
                        </PseudoFormFieldGrouping>
                    </Collapsable>
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(ElementMode));
        }
        
        <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Title"] InitiallyCollapsed="true">
            <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                <ElementModelGridSelect @bind-Value="FormDataContainer.FormModel.ElementModel"
                                        For="@(() => FormModel.ElementModel)"
                                        Label="@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.3DRepresentation.Text"]"
                                        Elements="GetElementModels()">
                </ElementModelGridSelect>
            </div>
        </Collapsable>
        
        @if (ElementMode != ElementMode.Story)
        {
            <Collapsable
                Title=@Localizer["CreateElementForm.Fields.Collapsable.Goals.Title"] InitiallyCollapsed="true">
                <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                    <MudText
                        Typo="Typo.caption">
                        @Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Goals.Text"]
                    </MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                  For="@(() => FormModel.Goals)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-2 mt-0"/>
                </div>
            </Collapsable>
            
            <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.Description.Title"] InitiallyCollapsed="true">
                <div class="rounded-lg w-4/4 px-2 2xl:px-4 pb-2">
                    <MudText
                        Typo="Typo.caption">
                        @Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Description.Text"]
                    </MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-4 mt-0"/>
                </div>
            </Collapsable>

        }
        </div>
    </Fields>

    <FooterButtons>
        <div class="flex flex-row justify-end absolute left-0 bottom-0 border-t-2 border-adlergrey-100 bg-adlerbgbright w-full">
            <DefaultSubmitButton/>
        </div>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningSpacePresenter SpacePresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IElementModelHandler ElementModelHandler { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<CreateElementForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] internal IMapper Mapper { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;

    [Parameter] public ElementMode ElementMode { get; set; }

    private LearningElementFormModel FormModel => FormDataContainer.FormModel;
    private StoryContentFormModel? StoryContentModel => (StoryContentFormModel?)FormDataContainer.FormModel.LearningContent;

    private PseudoFormFieldGrouping<ILearningContentFormModel?>? _pseudoGroupStoryContent;

    private BaseForm<LearningElementFormModel, LearningElement> _form = null!;
    private MudTextField<string> _nameField = null!;
    private MudTextField<ILearningContentFormModel>? _contentTextField;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await _form.FocusField(_nameField);
        }
    }

    private void OnValidSubmit(LearningElementFormModel model)
    {
        //check content for not null again even though validation ensures that LearningContent is not null
        //because of a non-reproducible bug where an element without content was able to be created - m.ho, n.stich
        if (model.LearningContent == null)
            throw new InvalidOperationException("No learning content selected - validation let no content pass");

        if (SelectedViewModelsProvider.ActiveElementSlotInSpace != -1 && ElementMode is not ElementMode.Story)
            SpacePresenter.CreateLearningElementInSlotFromFormModel(model);
        else if (SelectedViewModelsProvider.ActiveStorySlotInSpace != -1 && ElementMode is ElementMode.Story)
            SpacePresenter.CreateStoryElementInSlotFromFormModel(model);
        else
            WorldPresenter.CreateUnplacedLearningElementFromFormModel(model);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        switch (ElementMode)
        {
            case ElementMode.Adaptivity:
                FormDataContainer.FormModel.LearningContent = new AdaptivityContentFormModel();
                FormDataContainer.FormModel.ElementModel = ElementModelHandler.GetElementModels(ElementModelContentType.Adaptivity, theme: SpacePresenter.LearningSpaceVm?.Theme).First();
                break;
            case ElementMode.Story:
                var storyContentFormModel = new StoryContentFormModel();
                storyContentFormModel.StoryText.Add("");
                FormDataContainer.FormModel.LearningContent = storyContentFormModel;
                FormDataContainer.FormModel.ElementModel = ElementModelHandler.GetElementModels(ElementModelContentType.Story, theme: SpacePresenter.LearningSpaceVm?.Theme).First();
                break;
            case ElementMode.Normal:
                if (SelectedViewModelsProvider.LearningContent == null) return;
                FormDataContainer.FormModel.LearningContent = Mapper.Map<ILearningContentFormModel>(SelectedViewModelsProvider.LearningContent);
                SelectedViewModelsProvider.SetLearningContent(null, null);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async void OpenAdaptivityContentDialog()
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };
        var parameters = new DialogParameters
        {
            { nameof(AdaptivityContentDialog.MyContent), FormDataContainer.FormModel.LearningContent }
        };
        var dialog = await DialogService.ShowAsync<AdaptivityContentDialog>(Localizer["CreateElementForm.AdaptivityContent.Dialog.Title"], parameters, options);
        _ = await dialog.Result;
        StateHasChanged();
    }

    private async void OpenLearningContentDialog()
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };

        var parameters = new DialogParameters
        {
            { nameof(LearningContentDialog.LearningContent), FormDataContainer.FormModel.LearningContent }
        };
        var dialog = await DialogService.ShowAsync<LearningContentDialog>(Localizer["CreateElementForm.LearningMaterial.Dialog.Title"], parameters, options);
        _ = await dialog.Result;
        if (dialog.Result.Result.Canceled)
            return;

        if (!Equals(FormModel.LearningContent, dialog.Result.Result.Data))
        {
            var dialogResult = (ILearningContentFormModel)dialog.Result.Result.Data;
            FormModel.LearningContent = dialogResult;
            _contentTextField?.ResetValidation();
        }

        StateHasChanged();
    }

    private async Task HandleKeyEvent(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            await _form.SubmitAsync();
        }
    }

    private string GetSnackbarMessage()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["CreateElementForm.SnackbarMessage"],
            ElementMode.Adaptivity => Localizer["CreateAdaptivityElementForm.SnackbarMessage"],
            ElementMode.Story => Localizer["CreateStoryElementForm.SnackbarMessage"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private string GetHeaderText()
    {
        return ElementMode switch
        {
            ElementMode.Normal => Localizer["CreateElementForm.Header.Text"],
            ElementMode.Adaptivity => Localizer["CreateAdaptivityElementForm.Header.Text"],
            ElementMode.Story => Localizer["CreateStoryElementForm.Header.Text"],
            _ => throw new InvalidOperationException($"{nameof(ElementMode)} is out of range")
        };
    }

    private IEnumerable<ElementModel> GetElementModels()
    {
        var elementModelContentType = ElementMode switch
        {
            ElementMode.Normal when FormModel.LearningContent is FileContentFormModel => ElementModelContentType.File,
            ElementMode.Normal when FormModel.LearningContent is LinkContentFormModel => ElementModelContentType.Link,
            ElementMode.Normal => ElementModelContentType.Any,
            ElementMode.Adaptivity => ElementModelContentType.Adaptivity,
            ElementMode.Story => ElementModelContentType.Story,
            _ => throw new ArgumentOutOfRangeException()
        };
        var fileType = elementModelContentType is ElementModelContentType.File ? ((FileContentFormModel)FormModel.LearningContent!).Type : "";
        return ElementModelHandler.GetElementModels(elementModelContentType, fileType,
            SelectedViewModelsProvider.LearningObjectInPathWay is LearningSpaceViewModel space ? space.Theme : null);
    }


    private async Task ShowH5PInfoDialog()
    {
        var dialogParams = new DialogParameters()
        {
            { nameof(GenericInfoDialog.DialogText), (MarkupString)Localizer["CreateElementForm.Fields.Collapsable.LearningContent.PrimitiveH5P.Info.Text"].Value },
        };
        await DialogService.ShowAsync<GenericInfoDialog>("H5P Info", dialogParams);
    }


    private string LearningContentName
    {
        get => FormDataContainer.FormModel.LearningContent?.Name ?? String.Empty;
        set { }
    }

}