@implements IDisposable
@using Presentation.PresentationLogic.LearningWorld
@using Shared
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.Components.Forms.Models
@using BusinessLogic.Entities
@using System.ComponentModel
@using Presentation.Components.Forms.Buttons
@implements IAsyncDisposable
<header class="flex flex-col justify-between h-12 w-full m-auto bg-buttonbgblue rounded items-center">
    <div class="ml-1 flex items-center gap-2">
        <h1 class="font-bold text-lg ml-1">Metadata for learning element</h1>
    </div>
</header>

<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement"
          OnValidSubmit="OnValidSubmit" SnackbarMessage="Element created" FormDataContainer="FormDataContainer">
    <Fields>
        <Collapsable Title="General" @bind-Collapsed="_collapsedGeneral">
            <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                          For="@(() => FormModel.Name)"
                          Immediate="true"
                          DebounceInterval="300"
                          Label="@nameof(FormDataContainer.FormModel.Name)"/>
            <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                             For="@(() => FormModel.Workload)"
                             Immediate="true"
                             DebounceInterval="300"
                             Label="Workload (min)"/>
            <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                       Label="@nameof(FormDataContainer.FormModel.Difficulty)"
                       For="@(() => FormModel.Difficulty)">
                <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)"> Easy </MudSelectItem>
                <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)"> Medium </MudSelectItem>
                <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)"> Hard </MudSelectItem>
                <MudSelectItem Value="@(LearningElementDifficultyEnum.None)"> None </MudSelectItem>
            </MudSelect>
            <MudNumericField @bind-Value="FormDataContainer.FormModel.Points"
                             For="@(() => FormModel.Points)"
                             Immediate="true"
                             DebounceInterval="300"
                             Label="@nameof(FormDataContainer.FormModel.Points)"/>
        </Collapsable>

        <Collapsable Title="Learning Content" @bind-Collapsed="_collapsedContent">
            <MudSelect @bind-Value="FormDataContainer.FormModel.LearningContent"
                       Label="@nameof(FormDataContainer.FormModel.LearningContent)"
                       Text="@FormDataContainer.FormModel.LearningContent?.Name"
                       For="@(() => FormModel.LearningContent)">
                @foreach (var learningContent in WorldPresenter.GetAllContent())
                {
                    <MudSelectItem Value="@(learningContent)">@learningContent.Name</MudSelectItem>
                }
            </MudSelect>
        </Collapsable>

        <Collapsable Title="Goals" @bind-Collapsed="_collapsedGoals">
            <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                          For="@(() => FormModel.Goals)"
                          Immediate="true"
                          DebounceInterval="300"
                          Label="@nameof(FormDataContainer.FormModel.Goals)"/>
            <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                          For="@(() => FormModel.Description)"
                          Immediate="true"
                          DebounceInterval="300"
                          Label="@nameof(FormDataContainer.FormModel.Description)"/>
        </Collapsable>
    </Fields>
    <FooterButtons>
        <DefaultSubmitButton/>
        <DefaultResetButton/>
    </FooterButtons>
</BaseForm>

@code {
#pragma warning disable CS8618 - injected by framework
    [Inject]
    private ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject]
    private IAuthoringToolWorkspaceViewModel AuthoringToolWorkspaceViewModel { get; set; }

    [Inject]
    private IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Parameter]
#pragma warning restore CS8618
        public EventCallback OnSubmitted { get; set; }

    private LearningElementFormModel FormModel => FormDataContainer.FormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedContent = false;
    private bool _collapsedGoals = true;

    private void OnValidSubmit(LearningElementFormModel model)
    {
        if (AuthoringToolWorkspaceViewModel.SelectedLearningWorld == null)
            throw new InvalidOperationException("No learning world selected.");
        if (AuthoringToolWorkspaceViewModel.SelectedLearningWorld.SelectedLearningObjectInPathWay == null)
            throw new InvalidOperationException("No object selected.");
        if (AuthoringToolWorkspaceViewModel.SelectedLearningWorld.SelectedLearningObjectInPathWay is not LearningSpaceViewModel)
            throw new InvalidOperationException("Selected object is not a learning space.");

        WorldPresenter.CreateUnplacedLearningElement(
    //ignore null warning here because validation ensures that LearningContent is not null - m.ho
            model.Name, model.LearningContent!, model.Description, model.Goals, model.Difficulty,
            model.Workload, model.Points);
        OnSubmitted.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        AuthoringToolWorkspaceViewModel.PropertyChanged += OnLearningWorldViewModelChange;
        base.OnInitialized();
    }

    private async void OnLearningWorldViewModelChange(object? sender, PropertyChangedEventArgs propertyChangedEventArgs)
    {
        await InvokeAsync(StateHasChanged);
    }

    public ValueTask DisposeAsync()
    {
        Dispose();
        return ValueTask.CompletedTask;
    }

    public void Dispose()
    {
        AuthoringToolWorkspaceViewModel.PropertyChanged -= OnLearningWorldViewModelChange;
    }

}