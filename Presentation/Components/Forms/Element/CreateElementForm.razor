@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
@using Shared
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Forms.Buttons
@using Presentation.PresentationLogic.LearningContent.FileContent
<header class="m-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-xl text-center font-bold text-adlergrey-500 mx-2">@Localizer["CreateElementForm.Header.Text"]</h2>
    </div>
</header>
<MudDivider DividerType="DividerType.Middle" Class="my-4"></MudDivider>
<BaseForm TForm="LearningElementFormModel" TEntity="LearningElement"
          OnValidSubmit="OnValidSubmit"
          SnackbarMessage=@Localizer["CreateElementForm.SnackbarMessage"]
          FormDataContainer="FormDataContainer">
    <Fields>

        <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.General.Title"]
                     @bind-Collapsed="_collapsedGeneral">
            <div class="rounded-lg w-4/4 px-4 pb-2">
                <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                              For="@(() => FormModel.Name)"
                              DebounceInterval="DebounceInterval"
                              Label=@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Name.Text"]
                              Class="pb-4"/>

                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Points.Text"]</MudText>
                <MudNumericField @bind-Value="FormDataContainer.FormModel.Points"
                                 Min="1"
                                 Max="1000"
                                 For="@(() => FormModel.Points)"
                                 DebounceInterval="DebounceInterval"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Class="pb-4"/>

                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Workload.Text"]</MudText>
                <MudNumericField @bind-Value="FormDataContainer.FormModel.Workload"
                                 Min="0"
                                 Max="1000"
                                 For="@(() => FormModel.Workload)"
                                 DebounceInterval="DebounceInterval"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Class="pb-4"/>

                <MudSelect @bind-Value="FormDataContainer.FormModel.Difficulty"
                           Immediate="false"
                           Label=@Localizer["CreateElementForm.Fields.Collapsable.General.Field.Difficulty.Text"]
                           For="@(() => FormModel.Difficulty)">
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Easy)">@Localizer["CreateElementForm.Difficulty.Easy"]</MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Medium)">@Localizer["CreateElementForm.Difficulty.Medium"]</MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.Hard)">@Localizer["CreateElementForm.Difficulty.Hard"]</MudSelectItem>
                    <MudSelectItem Value="@(LearningElementDifficultyEnum.None)">@Localizer["CreateElementForm.Difficulty.None"]</MudSelectItem>
                </MudSelect>

            </div>
        </Collapsable>

        <Collapsable Style="" Title=@Localizer["CreateElementForm.Fields.Collapsable.LearningContent.Title"] @bind-Collapsed="_collapsedContent">
            <TableSelect
                T="ILearningContentViewModel"
                @bind-Value="FormDataContainer.FormModel.LearningContent"
                For="@(() => FormModel.LearningContent)"
                Elements="WorldPresenter.GetAllContent()"
                FilterFuncSearchableStrings="ILearningContentViewModel.GetSearchableStrings">
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh>@Localizer["CreateElementForm.Fields.Collapse.LearningContent.Name"]</MudTh>
                    <MudTh>@Localizer["CreateElementForm.Fields.Collapse.LearningContent.Type"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="px-1.5">
                        <MudIconButton Icon="@Icons.Material.Filled.Preview"
                                       OnClick="() => PresentationLogic.ShowLearningContentAsync(context)"/>
                    </MudTd>
                    <MudTd Class="cursor-pointer" DataLabel="Name">@context.Name</MudTd>
                    <MudTd Class="cursor-pointer" DataLabel="Type">
                        @if (context is FileContentViewModel fileContentContext)
                        {
                            @fileContentContext.Type
                        }
                        else
                        {
                            <span>Link</span>
                        }
                    </MudTd>
                </RowTemplate>
            </TableSelect>
        </Collapsable>

        <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Title"] @bind-Collapsed="_collapsedElementModel">
            <div class="rounded-lg w-4/4 px-4 pb-4">
                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.3DRepresentation.Field.3DRepresentation.Text"]</MudText>
                <MudSelect @bind-Value="FormDataContainer.FormModel.ElementModel"
                           AnchorOrigin="Origin.BottomCenter"
                           For="@(() => FormModel.ElementModel)"
                           Variant="Variant.Outlined">
                    @foreach (var theme in ElementModelHandler.GetElementModels(FormDataContainer.FormModel.LearningContent))
                    {
                        <MudSelectItem Value="@(theme)" Style="white-space: nowrap">
                            <img src="@ElementModelHandler.GetIconForElementModel(theme)" alt="" width="38" class="mr-1"/>@*@theme*@
                        </MudSelectItem>
                    }
                </MudSelect>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["CreateElementForm.Fields.Collapsable.Goals.Title"] @bind-Collapsed="_collapsedGoals">
            <div class="rounded-lg w-4/4 px-4">
                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Description.Text"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                              For="@(() => FormModel.Description)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"
                              Class="pb-4 mt-0"/>
                <MudText Typo="Typo.caption">@Localizer["CreateElementForm.Fields.Collapsable.Goals.Field.Goals.Text"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                              For="@(() => FormModel.Goals)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"
                              Class="pb-2 mt-0"/>
            </div>
        </Collapsable>

    </Fields>
    <FooterButtons>
        <DefaultSubmitButton/>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningSpacePresenter SpacePresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningElementFormModel, LearningElement> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IElementModelHandler ElementModelHandler { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<CreateElementForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Parameter]
    public EventCallback OnSubmitted { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;


    private LearningElementFormModel FormModel => FormDataContainer.FormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedContent = false;
    private bool _collapsedElementModel = true;
    private bool _collapsedGoals = true;

    private void OnValidSubmit(LearningElementFormModel model)
    {
    //check content for not null again even though validation ensures that LearningContent is not null
    //because of a non-reproducible bug where an element without content was able to be created - m.ho, n.stich
        if (model.LearningContent == null)
            throw new InvalidOperationException("No learning content selected - validation let no content pass");

        if (SelectedViewModelsProvider.ActiveSlotInSpace == -1)
            WorldPresenter.CreateUnplacedLearningElement(
                model.Name, model.LearningContent, model.Description, model.Goals, model.Difficulty, model.ElementModel,
                model.Workload, model.Points);
        else
        {
            SpacePresenter.CreateLearningElementInSlot(
                model.Name, model.LearningContent, model.Description, model.Goals, model.Difficulty, model.ElementModel,
                model.Workload, model.Points);
        }
        OnSubmitted.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (SelectedViewModelsProvider.LearningContent == null) return;
        FormDataContainer.FormModel.LearningContent = SelectedViewModelsProvider.LearningContent;
        SelectedViewModelsProvider.SetLearningContent(null, null);
    }

}

