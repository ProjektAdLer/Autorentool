@using Presentation.PresentationLogic.LearningSpace
@using System.ComponentModel
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Presentation.View
@using Presentation.View.LearningElement

<MudCard Class="overflow-auto">
    @if (SelectedViewModelsProvider.LearningElement == null || Mediator.OverwriteElementEdit)
    {
        <CreateElementForm OnSubmitted="() => InvokeAsync(TriggerMasterLayoutStateHasChanged)"/>
    }
    else
    {
        <EditElementForm ElementToEdit="SelectedViewModelsProvider.LearningElement" OnNewButtonClicked="OnForceNew">

        </EditElementForm>
    }

</MudCard>

<div class="relative w-32 h-full bg-adlerdeactivated rounded-lg">
    <p class="text-center mx-1 py-2 text-adlergrey-500 font-bold">@Localizer["ElementFormContainer.UnplacedElements.Title"]</p>
    <MudDropZone T="ILearningElementViewModel" Identifier="unplacedElements"
                 Class="absolute overflow-y-auto overflow-x-hidden inset-px top-12 gap-0.5 rounded-lg border-2 border-solid mud-border-lines-default p-2 m-[3px] min-h-1 flex justify-center items-center flex-col bg-white">
        <ItemRenderer>
            <DragDropLearningElement
                LearningElement="@context"
                OnShowLearningElementContent="@WorldPresenter.ShowSelectedElementContentAsync"
                OnEditLearningElement="@WorldPresenter.SetSelectedLearningElement"
                OnDeleteLearningElement="@WorldPresenter.DeleteLearningElement"
                OnClicked="@WorldPresenter.SetSelectedLearningElement"/>
        </ItemRenderer>
    </MudDropZone>
</div>

@code {
#pragma warning disable CS8618
    [Inject]
    public ILearningWorldPresenter WorldPresenter { get; set; }
    
    [Inject]
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }
    
    [Inject]
    public IMediator Mediator { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    private Action TriggerMasterLayoutStateHasChanged { get; set; }
    
    [Inject]
    private IStringLocalizer<ElementFormContainer> Localizer { get; set; }
#pragma warning restore CS8618


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedViewModelsProvider.LearningWorld != null) SelectedViewModelsProvider.PropertyChanged += SelectedViewModelsProviderOnPropertyChanged;
    }

    private async void SelectedViewModelsProviderOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if(e.PropertyName == nameof(SelectedViewModelsProvider.LearningElement))
            Mediator.OverwriteElementEdit = false;
        await InvokeAsync(StateHasChanged);
    }

    private void OnForceNew()
    {
        Mediator.OverwriteElementEdit = true;
        SelectedViewModelsProvider.SetLearningElement(null, null);
        InvokeAsync(TriggerMasterLayoutStateHasChanged);
    }
}