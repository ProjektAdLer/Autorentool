@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Presentation.View.LearningElement
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningElement
<MudCard Class="overflow-auto w-[70%]">
    @if (SelectedViewModelsProvider.LearningElement == null || Mediator.OverwriteElementEdit)
    {
        <MudTabs TabHeaderClass="sticky top-0 z-10 backdrop-blur-sm bg-adlerdeactivated/[.50]">
            <MudTabPanel Text="@Localizer["Tab.Element.Header"]">
                <CreateElementForm OnSubmitted="InvokeMasterLayoutStateHasChanged" AdaptivityElementMode="false"/>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer["Tab.Adaptivity.Header"]">
                <CreateElementForm OnSubmitted="InvokeMasterLayoutStateHasChanged" AdaptivityElementMode="true"/>
            </MudTabPanel>
        </MudTabs>
    }
    else
    {
        @if (SelectedViewModelsProvider.LearningElement.LearningContent is AdaptivityContentViewModel)
        {
            <EditElementForm ElementToEdit="SelectedViewModelsProvider.LearningElement" OnNewButtonClicked="OnForceNew" AdaptivityElementMode="true"/>
        }
        else
        {
            <EditElementForm ElementToEdit="SelectedViewModelsProvider.LearningElement" OnNewButtonClicked="OnForceNew" AdaptivityElementMode="false"/>
        }
    }

</MudCard>

<div class="flex flex-col items-center w-[30%] h-full bg-adlerdeactivated rounded-lg px-1.5">
    <p class="text-xs 2xl:text-sm text-center mx-1 py-2 text-adlergrey-500 font-bold">@Localizer["ElementFormContainer.UnplacedElements.Title"]</p>
    <MudDropZone T="ILearningElementViewModel" Identifier="unplacedElements"
                 Class="overflow-y-auto overflow-x-hidden rounded-lg border-2 border-solid h-[85svh] w-full bg-white flex flex-col justify-center pt-1 px-1">
        <ItemRenderer>
            <DragDropLearningElement
                LearningElement="@context"
                OnShowLearningElementContent="@WorldPresenter.ShowSelectedElementContentAsync"
                OnEditLearningElement="@WorldPresenter.SetSelectedLearningElement"
                OnDeleteLearningElement="@WorldPresenter.DeleteLearningElement"
                OnClicked="@WorldPresenter.SetSelectedLearningElement"/>
        </ItemRenderer>
    </MudDropZone>
</div>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public IMediator Mediator { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    private Action? TriggerMasterLayoutStateHasChanged { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<ElementFormContainer> Localizer { get; set; }

    private void InvokeMasterLayoutStateHasChanged()
    {
        if (TriggerMasterLayoutStateHasChanged != null) InvokeAsync(TriggerMasterLayoutStateHasChanged);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedViewModelsProvider.LearningWorld != null) SelectedViewModelsProvider.PropertyChanged += SelectedViewModelsProviderOnPropertyChanged;
    }

    private async void SelectedViewModelsProviderOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(SelectedViewModelsProvider.LearningElement))
            Mediator.OverwriteElementEdit = false;
        await InvokeAsync(StateHasChanged);
    }

    private void OnForceNew()
    {
        Mediator.OverwriteElementEdit = true;
        SelectedViewModelsProvider.SetLearningElement(null, null);
        InvokeMasterLayoutStateHasChanged();
    }

}