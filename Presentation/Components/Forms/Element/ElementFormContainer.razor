@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.Mediator
@using Presentation.PresentationLogic.SelectedViewModels
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
<MudCard Class="overflow-auto">
    @if (SelectedViewModelsProvider.LearningElement == null || Mediator.OverwriteElementEdit)
    {
        if (ContentType == typeof(IAdaptivityContentViewModel))
        {
            <CreateElementForm OnSubmitted="InvokeMasterLayoutStateHasChanged" AdaptivityElementMode="true"/>
        }
        else
        {
            <CreateElementForm OnSubmitted="InvokeMasterLayoutStateHasChanged" AdaptivityElementMode="false"/>
        }
    }
    else
    {
        @if (SelectedViewModelsProvider.LearningElement.LearningContent is AdaptivityContentViewModel)
        {
            <EditElementForm ElementToEdit="SelectedViewModelsProvider.LearningElement" OnNewButtonClicked="OnForceNew" AdaptivityElementMode="true"/>
        }
        else
        {
            <EditElementForm ElementToEdit="SelectedViewModelsProvider.LearningElement" OnNewButtonClicked="OnForceNew" AdaptivityElementMode="false"/>
        }
    }

</MudCard>


@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public IMediator Mediator { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    private Action? TriggerMasterLayoutStateHasChanged { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<ElementFormContainer> Localizer { get; set; }

    [Parameter, EditorRequired] public Type ContentType { get; set; } = null!;

    private void InvokeMasterLayoutStateHasChanged()
    {
        if (TriggerMasterLayoutStateHasChanged != null) InvokeAsync(TriggerMasterLayoutStateHasChanged);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedViewModelsProvider.LearningWorld != null) SelectedViewModelsProvider.PropertyChanged += SelectedViewModelsProviderOnPropertyChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) return;
        if (SelectedViewModelsProvider.LearningElement == null
            || ((ContentType != typeof(IAdaptivityContentViewModel) || SelectedViewModelsProvider.LearningElement.LearningContent is IAdaptivityContentViewModel)
                && (ContentType == typeof(IAdaptivityContentViewModel) || SelectedViewModelsProvider.LearningElement.LearningContent is not AdaptivityContentViewModel))) return;
        SelectedViewModelsProvider.SetLearningElement(null, null);
        InvokeMasterLayoutStateHasChanged();
    }

    private async void SelectedViewModelsProviderOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(SelectedViewModelsProvider.LearningElement))
            Mediator.OverwriteElementEdit = false;
        await InvokeAsync(StateHasChanged);
    }

    private void OnForceNew()
    {
        Mediator.OverwriteElementEdit = true;
        SelectedViewModelsProvider.SetLearningElement(null, null);
        InvokeMasterLayoutStateHasChanged();
    }

}