@using Presentation.PresentationLogic.LearningSpace
@using System.ComponentModel
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.View.LearningElement

<MudCard Class="overflow-auto">
    @if (WorldPresenter.LearningWorldVm?.SelectedLearningElement == null || _editOverwritten)
    {
        <CreateElementForm OnSubmitted="() => InvokeAsync(TriggerMasterLayoutStateHasChanged)"/>
    }
    else
    {
        <EditElementForm ElementToEdit="WorldPresenter.LearningWorldVm.SelectedLearningElement" OnNewButtonClicked="OnForceNew">

        </EditElementForm>
    }

</MudCard>

<div class="relative w-32 h-full bg-adlerdeactivated rounded-lg">
    <MudText Class="mx-1 py-2 text-adlergrey-500 font-bold" Typo="Typo.subtitle2" Align="Align.Center">List of all learning elements</MudText>
    <MudDropZone T="ILearningElementViewModel" Identifier="unplacedElements"
                 Class="absolute overflow-y-auto overflow-x-hidden inset-px top-12 gap-0.5 rounded-lg border-2 border-solid mud-border-lines-default p-2 m-[3px] min-h-1 flex justify-center items-center flex-col bg-white">
        <ItemRenderer>
            <DragDropLearningElement
                LearningElement="@context"
                OnShowLearningElementContent="@WorldPresenter.ShowSelectedElementContentAsync"
                OnEditLearningElement="@WorldPresenter.SetSelectedLearningElement"
                OnDeleteLearningElement="@WorldPresenter.DeleteLearningElement"
                OnClicked="@WorldPresenter.SetSelectedLearningElement"/>
        </ItemRenderer>
    </MudDropZone>
</div>

@code {
#pragma warning disable CS8618
    [Inject]
    public ILearningWorldPresenter WorldPresenter { get; set; }

    [CascadingParameter(Name = "TriggerMasterLayoutStateHasChanged")]
    private Action TriggerMasterLayoutStateHasChanged { get; set; }
#pragma warning restore CS8618


    //indicates if the edit state has been overwritten by either pressing reset in the edit form
    //or by pressing the "Create new space" buttoni
    private bool _editOverwritten;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _editOverwritten = false;
    }
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (WorldPresenter.LearningWorldVm != null) WorldPresenter.LearningWorldVm.PropertyChanged += WorldVmOnPropertyChanged;
    }

    private async void WorldVmOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        _editOverwritten = false;
        await InvokeAsync(StateHasChanged);
    }

    private void OnForceNew()
    {
        _editOverwritten = true;
    }
}