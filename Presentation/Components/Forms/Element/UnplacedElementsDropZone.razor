@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using BusinessLogic.Commands
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningContent.Story
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.SelectedViewModels
@using Presentation.View.LearningElement
@using Shared
@using Shared.Command
<div class="flex flex-col h-full bg-white mb-1.5 mx-1.5 2xl:mb-2 2xl:mx-2">

    <div class="flex shrink grow basis-2/12 w-full h-fit">
        
        <div class="flex flex-col items-center w-full">
            <div class="flex w-full justify-center py-2 2xl:py-3 border-b-2 bg-adlerbgbright border-adlergrey-100">
                <p class="cursor-default text-base 2xl:text-lg text-adlertitledarkblue text-center font-bold text mx-2">@Localizer["UnplacedElementsDropZone.Title"]</p>
            </div>
            
            <div class="flex flex-row items-center justify-between w-full px-1">
                <div class="flex flex-row justify-start items-center w-24">
                    <MudText Class="cursor-default text-xs 2xl:text-sm text-adlergrey-500">@Localizer["UnplacedElementsDropZone.Filter.Text"]</MudText>
                    <MudMenu AnchorOrigin="Origin.TopCenter" Dense="true" ListClass="w-56" Size="Size.Small">
                        <ActivatorContent>
                            <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" Size="Size.Small"></MudIconButton>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenu Label="@Localizer["UnplacedElementsDropZone.Filter.Element"]">
                                <MudMenuItem
                                    Class="px-2 text-xs" IconColor="@(_elementTypeFilter.Count == 0 ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                    OnClick="() => ResetElementTypeFilter()" AutoClose="false">
                                    @Localizer["UnplacedElementsDropZone.Filter.All"]
                                </MudMenuItem>
                                <MudDivider Class="p-0"></MudDivider>
                                <MudMenuItem
                                    Class="px-2 text-xs" IconColor="@(_elementTypeFilter.Contains(typeof(FileContentViewModel)) || _elementTypeFilter.Contains(typeof(LinkContentViewModel)) ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                    OnClick="() => { ToggleElementTypeFilter(typeof(FileContentViewModel)); ToggleElementTypeFilter(typeof(LinkContentViewModel)); }" AutoClose="false">
                                    @Localizer["UnplacedElementsDropZone.Filter.LearningElement"]
                                </MudMenuItem>
                                <MudMenuItem
                                    Class="px-2 text-xs" IconColor="@(_elementTypeFilter.Contains(typeof(AdaptivityContentViewModel)) ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                    OnClick="() => ToggleElementTypeFilter(typeof(AdaptivityContentViewModel))" AutoClose="false">
                                    @Localizer["UnplacedElementsDropZone.Filter.AdaptivityElement"]
                                </MudMenuItem>
                                <MudMenuItem
                                    Class="px-2 text-xs" IconColor="@(_elementTypeFilter.Contains(typeof(StoryContentViewModel)) ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                    OnClick="() => ToggleElementTypeFilter(typeof(StoryContentViewModel))" AutoClose="false">
                                    @Localizer["UnplacedElementsDropZone.Filter.StoryElement"]
                                </MudMenuItem>
                            </MudMenu>
                            <MudMenu Label="@Localizer["UnplacedElementsDropZone.Filter.Type"]">
                                <MudMenuItem
                                    Class="px-2 text-xs" IconColor="@(_contentTypeFilter.Count == 0 ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                    OnClick="() => ResetContentTypeFilter()" AutoClose="false">
                                    @Localizer["UnplacedElementsDropZone.Filter.All"]
                                </MudMenuItem>
                                <MudDivider Class="p-0"></MudDivider>
                                @foreach (ContentTypeEnum type in Enum.GetValues(typeof(ContentTypeEnum)))
                                {
                                    <MudMenuItem
                                        Class="px-2 text-xs" IconColor="@(_contentTypeFilter.Contains(type) ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                        OnClick="() => ToggleContentTypeFilter(type)" AutoClose="false">
                                        @Localizer[$"UnplacedElementsDropZone.Type.{type}"]
                                    </MudMenuItem>
                                }
                            </MudMenu>
                            <MudMenu Label="@Localizer["UnplacedElementsDropZone.Filter.Difficulty"]">
                                <MudMenuItem
                                    Class="px-2 text-xs" IconColor="@(_difficultyFilter.Count == 0 ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                    OnClick="() => ResetDifficultyFilter()" AutoClose="false">
                                    @Localizer["UnplacedElementsDropZone.Filter.All"]
                                </MudMenuItem>
                                <MudDivider Class="p-0"></MudDivider>
                                @foreach (LearningElementDifficultyEnum difficulty in Enum.GetValues(typeof(LearningElementDifficultyEnum)))
                                {
                                    <MudMenuItem
                                        Class="px-2 text-xs" IconColor="@(_difficultyFilter.Contains(difficulty) ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                        OnClick="() => ToggleDifficultyFilter(difficulty)" AutoClose="false">
                                        @LearningElementDifficultyHelper.Localize(difficulty)
                                    </MudMenuItem>
                                }
                            </MudMenu>
                            <MudMenu Label="@Localizer["UnplacedElementsDropZone.Filter.Required"]">
                                <MudMenuItem
                                    Class="px-2 text-xs" IconColor="@(_isRequiredFilter.Count == 0 ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                    OnClick="() => ResetIsRequiredFilter()" AutoClose="false">
                                    @Localizer["UnplacedElementsDropZone.Filter.All"]
                                </MudMenuItem>
                                <MudDivider />
                                <MudMenuItem
                                    Class="px-2 text-xs" IconColor="@(_isRequiredFilter.Contains(true) ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                    OnClick="() => ToggleIsRequiredFilter(true)" AutoClose="false">
                                    @Localizer["UnplacedElementsDropZone.Filter.RequiredOnly"]
                                </MudMenuItem>
                                <MudMenuItem
                                    Class="px-2 text-xs" IconColor="@(_isRequiredFilter.Contains(false) ? Color.Default : Color.Transparent)" Icon="@Icons.Material.Filled.Check"
                                    OnClick="() => ToggleIsRequiredFilter(false)" AutoClose="false">
                                    @Localizer["UnplacedElementsDropZone.Filter.OptionalOnly"]
                                </MudMenuItem>
                            </MudMenu>
                        </ChildContent>
                    </MudMenu>
                </div>
                <div class="flex justify-end px-2 w-36">
                    <MudTextField @bind-Value="SearchString" Margin="Margin.Dense" Immediate="true" Style="font-size: 13px;" Adornment="Adornment.Start"
                                  IconSize="Size.Small" AdornmentIcon="@Icons.Material.Outlined.Search" Clearable="true"/>
                </div>
            </div>
        </div>
    </div>

    <div class="grow shrink basis-10/12 overflow-y-scroll bg-white w-full rounded-b-lg border-t border-dotted">
        <MudDropZone T="ILearningElementViewModel" Identifier="unplacedElements"
                     Class="z-30 flex flex-wrap gap-3 2xl:gap-4 justify-start items-center pl-1 2xl:pl-4 w-full min-h-full max-h-[calc(2vh)]">
            <ItemRenderer>
                @if (ShowAfterFilters(@context))
                {
                    <DragDropLearningElement
                        LearningElement="@context"
                        OnDeleteLearningElement="@WorldPresenter.DeleteLearningElement"
                        OnClicked="@WorldPresenter.SetSelectedLearningElement"/>
                }
            </ItemRenderer>
        </MudDropZone>
        
    </div>
</div>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    public ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IStringLocalizer<UnplacedElementsDropZone> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    public ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }

    [Inject, AllowNull] public IOnUndoRedo UndoRedoSource { get; set; }


    internal string? SearchString { get; set; }
    private List<LearningElementDifficultyEnum> _difficultyFilter = new();
    private List<ContentTypeEnum> _contentTypeFilter = new();
    private List<Type> _elementTypeFilter = new();
    private List<bool> _isRequiredFilter = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        WorldPresenter.OnCommandUndoRedoOrExecute += OnUndoOrRedoOrExecute;
        if (SelectedViewModelsProvider.LearningWorld != null)
            SelectedViewModelsProvider.PropertyChanged += SelectedViewModelsProviderOnPropertyChanged;
    }

    private async void OnUndoOrRedoOrExecute(object? sender, CommandUndoRedoOrExecuteArgs e)
    {
        var commandName = e.CommandName;
        if (commandName.StartsWith("CreateLearningElement") ||
            commandName.StartsWith("LoadLearningElement") ||
            commandName.StartsWith("PlaceLearningElement") ||
            commandName.StartsWith("PlaceStoryElement") ||
            commandName.StartsWith("DeleteLearningElementInWorld") ||
            commandName.StartsWith("ChangeLearningSpaceLayout") ||
            commandName.StartsWith("RemoveStoryElementFromLayout") ||
            commandName.StartsWith("RemoveLearningElementFromLayout"))

            await InvokeStateHasChanged();
    }

    private async void SelectedViewModelsProviderOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        await InvokeStateHasChanged();
    }

    private Task InvokeStateHasChanged()
    {
        return InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        WorldPresenter.OnCommandUndoRedoOrExecute -= OnUndoOrRedoOrExecute;
        if (SelectedViewModelsProvider.LearningWorld != null)
            SelectedViewModelsProvider.PropertyChanged -= SelectedViewModelsProviderOnPropertyChanged;
    }

    public ValueTask DisposeAsync()
    {
        Dispose();
        return ValueTask.CompletedTask;
    }

    private bool ShowAfterFilters(ILearningElementViewModel element)
    {
        if (!ShowAfterSearchStringFilter(element)) return false;

        if (!ShowAfterDifficultyFilter(element)) return false;

        if (!ShowAfterElementTypeFilter(element)) return false;

        if (!ShowAfterContentTypeFilter(element)) return false;
        
        if (!ShowAfterIsRequiredFilter(element)) return false;

        return true;
    }

    private bool ShowAfterSearchStringFilter(ILearningElementViewModel element)
    {
        if (!string.IsNullOrEmpty(SearchString) && !element.Name.ToLowerInvariant().Contains(SearchString.ToLowerInvariant()))
        {
            return false;
        }

        return true;
    }

    private bool ShowAfterDifficultyFilter(ILearningElementViewModel element)
    {
        if (_difficultyFilter.Count != 0 && !_difficultyFilter.Contains(element.Difficulty))
        {
            return false;
        }

        return true;
    }

    private bool ShowAfterElementTypeFilter(ILearningElementViewModel element)
    {
        if (_elementTypeFilter.Count != 0 && !_elementTypeFilter.Contains(element.LearningContent.GetType()))
        {
            return false;
        }

        return true;
    }

    private bool ShowAfterContentTypeFilter(ILearningElementViewModel element)
    {
        if (_contentTypeFilter.Count == 0) return true;

        if (element.LearningContent.GetType() == typeof(FileContentViewModel))
        {
            if (!_contentTypeFilter.Contains(ContentTypeHelper.GetContentType(((FileContentViewModel)element.LearningContent).Type)))
            {
                return false;
            }
        }
        else if (element.LearningContent.GetType() == typeof(LinkContentViewModel) && !_contentTypeFilter.Contains(ContentTypeEnum.Video))
        {
            return false;
        }
        else if (element.LearningContent.GetType() == typeof(AdaptivityContentViewModel) && !_contentTypeFilter.Contains(ContentTypeEnum.Adaptivity))
        {
            return false;
        }
        else if (element.LearningContent.GetType() == typeof(StoryContentViewModel) && !_contentTypeFilter.Contains(ContentTypeEnum.Story))
        {
            return false;
        }

        return true;
    }
    
    private bool ShowAfterIsRequiredFilter(ILearningElementViewModel element)
    {
        if (_isRequiredFilter.Count == 0) return true;
        return _isRequiredFilter.Contains(element.IsRequired);
    }

    private void ResetDifficultyFilter()
    {
        _difficultyFilter.Clear();
    }
    
    private void ResetIsRequiredFilter() => _isRequiredFilter.Clear();

    private void ToggleDifficultyFilter(LearningElementDifficultyEnum difficulty)
    {
        if (_difficultyFilter.Contains(difficulty))
        {
            _difficultyFilter.Remove(difficulty);
        }
        else
        {
            _difficultyFilter.Add(difficulty);
        }
    }

    private void ResetElementTypeFilter()
    {
        _elementTypeFilter.Clear();
    }

    private void ToggleElementTypeFilter(Type elementType)
    {
        if (_elementTypeFilter.Contains(elementType))
        {
            _elementTypeFilter.Remove(elementType);
        }
        else
        {
            _elementTypeFilter.Add(elementType);
        }
    }

    private void ResetContentTypeFilter()
    {
        _contentTypeFilter.Clear();
    }

    private void ToggleContentTypeFilter(ContentTypeEnum type)
    {
        if (_contentTypeFilter.Contains(type))
        {
            _contentTypeFilter.Remove(type);
        }
        else
        {
            _contentTypeFilter.Add(type);
        }
    }
    
    private void ToggleIsRequiredFilter(bool isRequired)
    {
        if (_isRequiredFilter.Contains(isRequired))
        {
            _isRequiredFilter.Remove(isRequired);
        }
        else
        {
            _isRequiredFilter.Add(isRequired);
        }
    }
}