<div class="gap-3 @VerticalMargin @Style">
    <div class="flex flex-row">
        <div class="flex flex-row toggler" @onclick="@Toggle" tabindex="0" @onkeydown="@OnKeyDown">
            @if (TogglerContent is not null)
            {
                @TogglerContent(_collapsed)
            }
            else
            {
                @if (_collapsed)
                {
                    <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Class="text-adlertitledarkblue cursor-pointer"/>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Class="text-adlertitledarkblue cursor-pointer"/>
                }
            }
            @if (Title is not null)
            {
                <p class="select-none cursor-pointer text-adlertitledarkblue font-bold text-base 2xl:text-lg"> @Title </p>
            }
            else if (TitleContent is not null)
            {
                @TitleContent
            }
        </div>
        <div>
            @TitleContentAfterToggler
        </div>
    </div>


    <div class="mt-0 inner" style="@(_collapsed ? "display: none;" : "")">
        @ChildContent
    </div>

</div>

@code {
    private bool _collapsed;
    private bool _initialized;

    [Parameter] public string? Style { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool? InitiallyCollapsed { get; set; }

    [Parameter] public string? Title { get; set; }
    [Parameter] public RenderFragment? TitleContent { get; set; }
    [Parameter] public RenderFragment? TitleContentAfterToggler { get; set; }
    [Parameter] public RenderFragment<bool>? TogglerContent { get; set; }
    [Parameter] public string VerticalMargin { get; set; } = "ml-2 from-adlerbgbright to-white bg-gradient-to-br border-t border-adlergrey-100 p-2 mb-6";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (_initialized) return;
        _initialized = true;
        _collapsed = InitiallyCollapsed ?? true;
    }

    public void Toggle()
    {
        _collapsed = !_collapsed;
    }

    public void Uncollapse()
    {
        _collapsed = false;
    }


    private void OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key is "Enter" or " ")
        {
            Toggle();
        }
    }

}