@typeparam TForm where TForm : new()
@typeparam TEntity
@using System.Diagnostics.CodeAnalysis
@using MudBlazor.Utilities
@implements IBaseForm

<MudCardActions Class="flex flex-col justify-center items-center">
    <MudButtonGroup OverrideStyles="false">
        <CascadingValue Value="this">
            @HeaderButtons
        </CascadingValue>
    </MudButtonGroup>
</MudCardActions>

<MudForm Model="@FormDataContainer.FormModel" @ref="@_form" Validation="@ValidateModel" FieldChanged="@FieldChanged">
    <MudCardContent>
        @Fields
        @if (SubmitErrorMessage != null)
        {
            <div class="mt-2 form-error-message">
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@SubmitErrorMessage</MudAlert>
            </div>
        }
    </MudCardContent>
</MudForm>

<MudCardActions Class="flex justify-end">
    <MudButtonGroup OverrideStyles="false">
        <CascadingValue Value="this">
            @FooterButtons
        </CascadingValue>
    </MudButtonGroup>
</MudCardActions>


@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IValidationWrapper<TEntity> Validator { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ISnackbar Snackbar { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<TForm> OnValidSubmit { get; set; }
    
    [Parameter]
    public EventCallback<TForm> OnValidFieldChange { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public string SnackbarMessage { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public IFormDataContainer<TForm, TEntity> FormDataContainer { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public RenderFragment Fields { get; set; }

    [Parameter]
    public RenderFragment? HeaderButtons { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment? FooterButtons { get; set; }


    private MudForm? _form;


    internal string? SubmitErrorMessage { get; set; }

    //Wrapper function around ValidateAsync to only validate a given property
    //We must use object here and cast to T later because MudBlazor field validation expects a Func<obj, str, Task<...>>
    //If we want to do Func<T, Task<IEnumerable<string>> then we have to handle every type of field separately, 
    //for example for T=string for text inputs, T=int for number inputs etc.
    //By the way, this information is not written anywhere in the documentation and I had to dive pretty deep into the
    //framework to find this out :) - n.stich
    private Func<object, string, Task<IEnumerable<string>>> ValidateModel => async (_, propertyName) =>
    {
        var modelEntity = FormDataContainer.GetMappedEntity();
        return await Validator.ValidateAsync(modelEntity, propertyName);
    };

    public void Reset()
    {
        FormDataContainer.FormModel = new TForm();
    }

    public async Task SubmitAsync()
    {
        if (_form is null) throw new InvalidOperationException("_form is null by @ref");
        await _form.Validate();
        if (_form.IsValid)
        {
            try
            {
                await OnValidSubmit.InvokeAsync(FormDataContainer.FormModel);
                Snackbar.Add(SnackbarMessage);
                Reset();
            }
            catch (Exception e)
            {
                SubmitErrorMessage = $"An error has occured trying to submit the form: {e.Message}";
            }
        }
    }


    private async Task FieldChanged(FormFieldChangedEventArgs e)
    {
        //quit early if nobody is listening anyway
        if(!OnValidFieldChange.HasDelegate) return;
        if (_form == null) throw new ApplicationException("_form is null");
        await _form.Validate();
        if(_form.IsValid) await OnValidFieldChange.InvokeAsync(FormDataContainer.FormModel);
    }

}