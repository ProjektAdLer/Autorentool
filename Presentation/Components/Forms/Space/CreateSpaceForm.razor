@using System.Diagnostics.CodeAnalysis
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms.Buttons
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.LearningWorld
@using Shared.Theme
<div class="absolute w-full z-30 cursor-default">
    <header class="py-2 2xl:py-3 bg-adlerbgbright border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
        <h2 class="text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">@Localizer["CreateSpaceForm.Header.Title"]</h2>
    </header>
    <div class="flex justify-between items-start">
        <MudText Class="text-adlergrey-200 text-xs p-2">@Localizer["CreateSpaceForm.Text"]</MudText>
    </div>
</div>

<BaseForm TForm="LearningSpaceFormModel" TEntity="LearningSpace" @ref="_form"
          OnValidSubmit="OnValidSubmit" SnackbarMessage=@Localizer["CreateSpaceForm.SnackbarMessage"]
          FormDataContainer="FormDataContainer">
    <Fields>
        <Collapsable Title=@Localizer["CreateSpaceForm.Fields.Collapsable.General.Title"]
                     InitiallyCollapsed="false">
            <div class="w-4/4 px-6">
                <p class="font-bold text-xs text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateSpaceForm.Fields.Collapsable.General.Subtitle"]</p>
                <p class="text-xs cursor-default">@Localizer["CreateSpaceForm.Fields.Collapsable.General.Text"]</p>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                              For="@(() => FormModel.Name)"
                              @ref="_nameField"
                              DebounceInterval="DebounceInterval"
                              OnKeyUp="HandleKeyEvent"
                              Margin="Margin.Dense"
                              Typo="Typo.subtitle2"
                              Variant="Variant.Outlined"
                              Label="@Localizer["CreateSpaceForm.Fields.Collapsable.General.Field.Name.Text"]"
                              Placeholder="@Localizer["CreateSpaceForm.Fields.Collapsable.General.Field.Name.Placeholder"]"/>
            </div>
        </Collapsable>
        
        <Collapsable Title="@Localizer["CreateSpaceForm.Fields.Collapsable.Content.Title"]" 
                     InitiallyCollapsed="true">
            <div class="w-4/4 px-6">
                <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateSpaceForm.Fields.Collapsable.Description.Title"]</p>
                <p class="text-xs cursor-default">
                    @Localizer["CreateSpaceForm.Fields.Collapsable.Goals.Field.Description.Text"]
                </p>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                              For="@(() => FormModel.Description)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"
                              Label="@Localizer["CreateSpaceForm.Fields.Collapsable.Description.Title"]"
                              Placeholder="@Localizer["CreateSpaceForm.Fields.Collapsable.Description.Placeholder"]"
                              Margin="Margin.Dense"
                              Typo="Typo.subtitle2"/>
                    
                <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateSpaceForm.Fields.Collapsable.Goals.Title"]</p>
                <p class="text-xs cursor-default">@Localizer["CreateSpaceForm.Fields.Collapsable.Goals.Field.Goals.Text"]</p>
                <div class="flex justify-center">
                    <MudButton Class="w-80 btn-standard"
                               OnClick="OpenLearningOutcomesOverview">@Localizer["CreateSpaceForm.Goals.Button"]</MudButton>
                </div>
            </div>
        </Collapsable>

        <Collapsable Title="@Localizer["CreateSpaceForm.Fields.Collapsable.Design.Title"]"
                     InitiallyCollapsed="true">
            <div class="w-4/4 px-6">
                <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateSpaceForm.Fields.Collapsable.Theme.Title"]</p>
                <p class="text-xs cursor-default">@Localizer["CreateSpaceForm.Fields.Collapsable.Theme.Field.Theme.Text"]</p>
                <MudSelect @bind-Value="FormDataContainer.FormModel.SpaceTheme"
                           OnKeyUp="HandleKeyEvent"
                           Text="@FormDataContainer.FormModel.SpaceTheme.ToString()"
                           For="@(() => FormModel.SpaceTheme)" 
                           Variant="Variant.Outlined"
                           Label="@Localizer["CreateSpaceForm.Fields.Collapsable.Theme.Title"]"
                           Typo="Typo.subtitle2"
                           Margin="Margin.Dense">
                    @foreach (var theme in _themes)
                    {
                        <MudSelectItem Value="@(theme)">
                            <p class="text-sm">@(ThemeHelper<SpaceTheme>.Localize(theme, LearningWorldPresenter.LearningWorldVm?.WorldTheme.ToString()))</p>
                        </MudSelectItem>
                    }
                </MudSelect>
            </div>
        </Collapsable>
        
        <Collapsable Title="@Localizer["CreateSpaceForm.Fields.Collapsable.Interaction.Title"]"
                     InitiallyCollapsed="true">
            <div class="w-4/4 px-6">
                    <p class="text-xs font-bold text-adlertitledarkblue cursor-default pt-2">@Localizer["CreateSpaceForm.Fields.Collapsable.CompletionConditions.Title"]</p>
                    <p class="text-xs cursor-default">
                        <span class="text-adlergrey-800">
                            @Localizer["CreateSpaceForm.Fields.Collapsable.CompletionConditions.Description.Text"]
                        </span>
                    </p>
                    <p class="text-xs text-adlerblue-600 cursor-default">0
                        <span class="text-adlergrey-800"> / </span> 0
                        <span
                            class="text-adlergrey-800"> @Localizer["CreateSpaceForm.Fields.Collapsable.CompletionConditions.Description.Appendix"] </span>
                    </p>
                    <ul class="py-2 pl-2 mt-0 border border-adlergrey-300 rounded w-full list-disc list-inside cursor-default">
                        <p class="text-sm italic text-adlergrey-600">
                            @Localizer["CreateSpaceForm.Fields.Collapsable.NoElements"]
                        </p>
                    </ul>
            </div>
        </Collapsable>
    </Fields>
    <FooterButtons>
        <div
            class="flex flex-row justify-end absolute left-0 bottom-0 border-t-2 border-adlergrey-100 bg-adlerbgbright w-full">
            <DefaultSubmitButton/>
            <DefaultResetButton/>
        </div>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter LearningWorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningSpaceFormModel, LearningSpace> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<CreateSpaceForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IDialogService DialogService { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;


    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LearningSpaceFormModel FormModel => FormDataContainer.FormModel;

    private SpaceTheme[] _themes = Enum.GetValues<SpaceTheme>().Where(v => !IsObsolete(v)).ToArray();

    private static bool IsObsolete<TEnum>(TEnum value) where TEnum : Enum
    {
        var field = typeof(TEnum).GetField(value.ToString())!;
        return Attribute.IsDefined(field, typeof(ObsoleteAttribute));
    }

    private BaseForm<LearningSpaceFormModel, LearningSpace> _form = null!;
    private MudTextField<string> _nameField = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await _form.FocusField(_nameField);
        }
    }

    private void OnValidSubmit(LearningSpaceFormModel model)
    {
        LearningWorldPresenter.CreateLearningSpace(model.Name, model.Description,
            model.LearningOutcomeCollection, model.RequiredPoints, model.SpaceTheme);
    }

    private async Task HandleKeyEvent(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            await _form.SubmitAsync();
        }
    }

    private async void OpenLearningOutcomesOverview()
    {
        await LearningOutcomesOverviewHelper.ShowOverviewAsync(DialogService, FormDataContainer.FormModel.LearningOutcomeCollection, typeof(LearningSpace));
        StateHasChanged();
    }

}