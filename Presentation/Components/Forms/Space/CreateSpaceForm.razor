@using Presentation.PresentationLogic.LearningWorld
@using Shared
@using Presentation.Components.Forms.Models
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Forms.Buttons
<header class="py-2 2xl:py-3 bg-adlerbgbright border-b-2 border-adlergrey-100">
    <div class="flex justify-center py-2 2xl:py-3">
        <h2 class="text-base 2xl:text-xl text-center font-bold text-adlerdarkblue-800 mx-2">@Localizer["CreateSpaceForm.Header.Title"]</h2>
    </div>
</header>

<MudText Class="text-adlergrey-200 w-4/4 p-4 text-xs">@Localizer["CreateSpaceForm.Text"]</MudText>
<BaseForm TForm="LearningSpaceFormModel" TEntity="LearningSpace" @ref="_form"
          OnValidSubmit="OnValidSubmit" SnackbarMessage=@Localizer["CreateSpaceForm.SnackbarMessage"]
          FormDataContainer="FormDataContainer">
    <Fields>
        <div class="px-4">
            <Collapsable Title=@Localizer["CreateSpaceForm.Fields.Collapsable.General.Title"] @bind-Collapsed="_collapsedGeneral">
                <div class="rounded-lg w-4/4 px-4 2xl:px-4">
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  DebounceInterval="DebounceInterval"
                                  OnKeyUp="HandleKeyEvent"
                                  Label="@Localizer["CreateSpaceForm.Fields.Collapsable.General.Field.Name.Text"]"/>
                </div>
            </Collapsable>
        </div>
        
        <div class="px-4">
            <Collapsable Title=@Localizer["CreateSpaceForm.Fields.Collapsable.CompletionConditions.Title"] @bind-Collapsed="_collapsedConditions">
                <div class="rounded-lg w-4/4 px-4 pb-2">
                    <MudText Typo="Typo.caption">
                        @Localizer["CreateSpaceForm.Fields.Collapsable.CompletionConditions.Field.RequiredPoints.Text"]
                    </MudText>
                    <MudNumericField @bind-Value="FormDataContainer.FormModel.RequiredPoints"
                                     Min="0"
                                     For="@(() => FormModel.RequiredPoints)"
                                     DebounceInterval="DebounceInterval"
                                     OnKeyUp="HandleKeyEvent"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Dense"/>
                </div>
            </Collapsable>
        </div>
        
        <div class="px-4">
            <Collapsable Title=@Localizer["CreateSpaceForm.Fields.Collapsable.Theme.Title"] @bind-Collapsed="_collapsedTheme">
                <div class="rounded-lg w-4/4 px-4 pb-2">
                    <MudSelect @bind-Value="FormDataContainer.FormModel.Theme"
                               AnchorOrigin="Origin.BottomCenter"
                               OnKeyUp="HandleKeyEvent"
                               Label=@Localizer["CreateSpaceForm.Fields.Collapsable.Theme.Field.Theme.Text"]
                               Text="@FormDataContainer.FormModel.Theme.ToString()"
                               For="@(() => FormModel.Theme)">
                        @foreach (var theme in _themes)
                        {
                            <MudSelectItem Value="@(theme)">@ThemeHelper.Localize(theme)</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </Collapsable>
        </div>
        
        <div class="px-4">
            <Collapsable Title=@Localizer["CreateSpaceForm.Fields.Collapsable.Goals.Title"] @bind-Collapsed="_collapsedGoals">
                <div class="rounded-lg w-4/4 px-4">
                    <MudText Typo="Typo.caption">
                        @Localizer["CreateSpaceForm.Fields.Collapsable.Goals.Field.Description.Text"]
                    </MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-4 mt-0"/>
                    <MudText Typo="Typo.caption">
                        @Localizer["CreateSpaceForm.Fields.Collapsable.Goals.Field.Goals.Text"]
                    </MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                  For="@(() => FormModel.Goals)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-2 mt-0"/>
                </div>
            </Collapsable>
        </div>
    </Fields>
    <FooterButtons>
        <DefaultSubmitButton/>
        <DefaultResetButton/>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal ILearningWorldPresenter LearningWorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningSpaceFormModel, LearningSpace> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<CreateSpaceForm> Localizer { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;


    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LearningSpaceFormModel FormModel => FormDataContainer.FormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedGoals = true;
    private bool _collapsedConditions = true;
    private bool _collapsedTheme = true;
    private Theme[] _themes = (Theme[]) Enum.GetValues(typeof(Theme));

    private BaseForm<LearningSpaceFormModel, LearningSpace> _form = null!;

    private void OnValidSubmit(LearningSpaceFormModel model)
    {
        LearningWorldPresenter.CreateLearningSpace(model.Name, model.Description,
            model.Goals, model.RequiredPoints, model.Theme);
    }

    private async Task HandleKeyEvent(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            await _form.SubmitAsync();
        }
    }

}