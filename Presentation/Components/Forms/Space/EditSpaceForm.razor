@using Presentation.PresentationLogic.LearningSpace
@using Shared
@using AutoMapper
@using BusinessLogic.Entities
@using Presentation.Components.Forms.Models
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Forms.Buttons
<header class="m-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-base 2xl:text-xl text-center font-bold text-adlergrey-500 mx-2">@Localizer["EditSpaceForm.Header.Title"]</h2>
    </div>
</header>
<MudDivider DividerType="DividerType.Middle" Class="mt-4 mb-2"></MudDivider>
<MudText Class="text-adlergrey-200 w-4/4 px-4 text-xs">@Localizer["EditSpaceForm.Text"]</MudText>
<BaseForm TForm="LearningSpaceFormModel" TEntity="LearningSpace"
          OnValidSubmit="OnValidSubmit" OnValidFieldChange="OnValidFieldChange"
          SnackbarMessage=@Localizer["EditSpaceForm.SnackbarMessage"]
          FormDataContainer="FormDataContainer">
    <HeaderButtons>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Class="btn-standard"
                   OnClick="async () => await OnNewButtonClicked.InvokeAsync()">
            @Localizer["EditSpaceForm.Button.New.Text"]
        </MudButton>
    </HeaderButtons>
    <Fields>
        <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.General.Title"] @bind-Collapsed="_collapsedGeneral">
            <div class="rounded-lg w-4/4 px-4 pb-2">
                <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                              For="@(() => FormModel.Name)"
                              DebounceInterval="DebounceInterval"
                              Label="@Localizer["EditSpaceForm.Fields.Collapsable.General.Name.Text"]"/>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.CompletionConditions.Title"] @bind-Collapsed="_collapsedConditions">
            <div class="rounded-lg w-4/4 px-4 pb-2">
                <MudText Typo="Typo.caption">
                    @Localizer["EditSpaceForm.Fields.Collapsable.CompletionConditions.Field.RequiredPoints.Text"]
                </MudText>
                <MudNumericField @bind-Value="FormDataContainer.FormModel.RequiredPoints"
                                 Min="1"
                                 For="@(() => FormModel.RequiredPoints)"
                                 DebounceInterval="DebounceInterval"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"/>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.FloorPlan.Title"] @bind-Collapsed="_collapsedFloorplan">
            @*<MudText Typo="Typo.caption">
                                @Localizer["EditSpaceForm.Fields.Collapsable.FloorPlan.Text"]
            </MudText>*@
            <div class="flex rounded-lg w-4/4 px-1 pb-2">
                <SpaceLayoutSelection LearningSpaceViewModel="SpaceToEdit"></SpaceLayoutSelection>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.Theme.Title"] @bind-Collapsed="_collapsedTheme">
            <div class="rounded-lg w-4/4 px-4 pb-2">
                <MudSelect @bind-Value="FormDataContainer.FormModel.Theme"
                           AnchorOrigin="Origin.BottomCenter"
                           Label=@Localizer["EditSpaceForm.Fields.Collapsable.Theme.Field.Theme.Text"]
                           Text="@FormDataContainer.FormModel.Theme.ToString()"
                           For="@(() => FormModel.Theme)">
                    @foreach (var theme in _themes)
                    {
                        <MudSelectItem Value="@(theme)">@ThemeHelper.Localize(theme)</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.Goals.Title"] @bind-Collapsed="_collapsedGoals">
            <div class="rounded-lg w-4/4 px-4">
                <MudText Typo="Typo.caption">@Localizer["EditSpaceForm.Fields.Collapsable.Goals.Field.Description.Text"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                              For="@(() => FormModel.Description)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"
                              Class="pb-4 mt-0"/>
                <MudText Typo="Typo.caption">@Localizer["EditSpaceForm.Fields.Collapsable.Goals.Field.Goals.Text"]</MudText>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                              For="@(() => FormModel.Goals)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"
                              Class="pb-2 mt-0"/>
            </div>
        </Collapsable>

    </Fields>
    <FooterButtons>
        <SubmitThenRemapButton RemapAction="MapIntoContainer"/>
        <MudIconButton Icon="@Icons.Material.Filled.Autorenew"
                       OnClick="@OnResetAsync" 
                       Class="btn-standard text-adlergrey shadow-lg rounded-lg bg-adlerdeactivated hover:bg-adlerdarkblue hover:text-buttonbgblue reset-form">
        </MudIconButton>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILearningSpacePresenter LearningSpacePresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IFormDataContainer<LearningSpaceFormModel, LearningSpace> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<EditSpaceForm> Localizer { get; set; }


    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningSpaceViewModel SpaceToEdit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnNewButtonClicked { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;


    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LearningSpaceFormModel FormModel => FormDataContainer.FormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedConditions = true;
    private bool _collapsedFloorplan = false;
    private bool _collapsedTheme = true;
    private bool _collapsedGoals = true;
    private Theme[] _themes = (Theme[]) Enum.GetValues(typeof(Theme));

    private void OnValidSubmit(LearningSpaceFormModel model)
    {
    //we can supress the nullable warning here as validator ensures RequiredPoints isn't null - n.stich
        LearningSpacePresenter.EditLearningSpace(model.Name, model.Description,
            model.Goals, (int) model.RequiredPoints!, model.Theme);
    }

    private void OnValidFieldChange(LearningSpaceFormModel model) => OnValidSubmit(model);

    private async Task MapIntoContainer()
    {
        Mapper.Map(SpaceToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
        if (LearningSpacePresenter.LearningSpaceVm == null)
            throw new ApplicationException(Localizer["EditSpaceForm.ApplicationException.Message"]);
        LearningSpacePresenter.LearningSpaceVm.PropertyChanged += LearningSpacePropertyChanged;
    }

    private void LearningSpacePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName is nameof(LearningSpaceViewModel.Name) or nameof(LearningSpaceViewModel.Description) 
            or nameof(LearningSpaceViewModel.Goals) or nameof(LearningSpaceViewModel.RequiredPoints)
            )
        {
            InvokeAsync(MapIntoContainer);
        }
    }

    private async Task OnResetAsync()
    {
        await MapIntoContainer();
    }

}