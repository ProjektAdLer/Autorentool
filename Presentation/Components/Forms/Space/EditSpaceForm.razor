@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using AutoMapper
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms.Buttons
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningWorld
@using Shared.Theme
<div class="absolute w-full z-30">
    <header class="py-2 2xl:py-3 bg-adlerbgbright border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
        <h2 class="text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">@Localizer["EditSpaceForm.Header.Title"]</h2>
    </header>
    <div class="flex flex-row w-full justify-between">
        <MudText Class="text-adlergrey-200 p-2 text-xs">@Localizer["EditSpaceForm.Text"]</MudText>
        <button
            class="rounded-bl-lg h-8 truncate text-adlerdarkblue bg-adlerblue-200 p-4 font-bold drop-shadow transform ease-in-out duration-75 active:drop-shadow-none hover:bg-adlerdarkblue hover:text-buttonbgblue"
            @onclick="async () => await OnNewButtonClicked.InvokeAsync()">
            <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>
            <p>@Localizer["EditSpaceForm.Button.New.Text"]</p>
        </button>
    </div>
</div>

<BaseForm TForm="LearningSpaceFormModel" TEntity="LearningSpace"
          OnValidSubmit="OnValidSubmit" OnValidFieldChange="OnValidFieldChange"
          SnackbarMessage=@Localizer["EditSpaceForm.SnackbarMessage"]
          FormDataContainer="FormDataContainer" @ref="_form">

    <Fields>
        <div
            class="pl-4 2xl:pl-4 2xl:pr-4 overflow-y-scroll top-28 h-[75%] 2xl:h-[83%] absolute flex flex-col w-[100%] mt-2 border-t border-dotted">
            <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.General.Title"] InitiallyCollapsed="false">
                <div class="px-6">
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  @ref="_nameField"
                                  DebounceInterval="DebounceInterval"
                                  Placeholder="@Localizer["EditSpaceForm.Fields.Collapsable.General.Name.Text"]"
                                  Margin="Margin.Normal"
                                  Typo="Typo.body1"/>
                </div>
            </Collapsable>

            <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.CompletionConditions.Title"]
                         InitiallyCollapsed="true">
                <div class="px-6">
                    <p class="text-xs pt-3">
                        <span class="text-adlergrey-800">
                            @Localizer["EditSpaceForm.Fields.Collapsable.CompletionConditions.Description.Text"]
                        </span>
                    </p>
                    <p class="text-xs text-adlerblue-600">
                        @SpaceToEdit.NumberOfRequiredElements
                        <span class="text-adlergrey-800"> / </span> @SpaceToEdit.NumberOfElements
                        <span
                            class="text-adlergrey-800"> @Localizer["EditSpaceForm.Fields.Collapsable.CompletionConditions.Description.Appendix"] </span>
                    </p>
                    <ul class="pl-2 py-2 mt-0 border border-adlergrey-300 rounded w-full list-disc list-inside">
                        @foreach (var leName in SpaceToEdit.ContainedLearningElements.Where(x => x.IsRequired).Select(x => x.Name).ToList())
                        {
                            <li class="text-xs">@leName</li>
                        }
                    </ul>
                </div>
            </Collapsable>

            <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.FloorPlan.Title"]
                         InitiallyCollapsed="false">
                <p class="text-xs px-6 pt-3">@Localizer["EditSpaceForm.Fields.Collapsable.FloorPlan.Subtitle"]
                    <MudTooltip Placement="Placement.Right"
                                Class="w-96 p-4 shadow-xl text-start leading-relaxed bg-adlerdarkblue-200">
                        <TooltipContent>
                            <MudText
                                Class="text-xs">
                                @((MarkupString)Localizer["EditSpaceForm.Fields.Collapsable.FloorPlan.Text"].ToString())
                            </MudText>
                        </TooltipContent>
                        <ChildContent>
                            <MudIcon Icon="@Icons.Material.Filled.Info"
                                     Class="text-sm 2xl:text-lg text-adlergrey-500 hover:text-adlerdarkblue">
                            </MudIcon>
                        </ChildContent>
                    </MudTooltip>
                </p>

                <div class="w-full px-6">
                    <SpaceLayoutSelection LearningSpaceViewModel="SpaceToEdit"></SpaceLayoutSelection>
                </div>
            </Collapsable>

            <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.Theme.Title"] InitiallyCollapsed="true">
                <p class="text-xs px-6 pt-3">@Localizer["EditSpaceForm.Fields.Collapsable.Theme.Field.Theme.Text"]</p>
                <div class="px-6 py-2">
                    <MudSelect @bind-Value="FormDataContainer.FormModel.SpaceTheme"
                               Text="@FormDataContainer.FormModel.SpaceTheme.ToString()"
                               For="@(() => FormModel.SpaceTheme)">
                        @foreach (var theme in _themes)
                        {
                            <MudSelectItem
                                Value="@(theme)">@(ThemeHelper<SpaceTheme>.Localize(theme, LearningWorldPresenter.LearningWorldVm?.WorldTheme.ToString()))</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </Collapsable>

            <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.Goals.Title"] InitiallyCollapsed="true">
                <div class="w-4/4 px-6">
                    <p class="text-xs pt-3">@Localizer["EditSpaceForm.Fields.Collapsable.Goals.Field.Goals.Text"]</p>
                    <div class="flex justify-center">
                        <MudButton Class="btn-standard w-72"
                                   OnClick="OpenLearningOutcomesOverview">@Localizer["EditSpaceForm.Goals.Button"]</MudButton>
                    </div>
                </div>
            </Collapsable>

            <Collapsable Title=@Localizer["EditSpaceForm.Fields.Collapsable.Description.Title"]
                         InitiallyCollapsed="true">
                <div class="rounded-lg w-4/4 px-6">
                    <p class="text-xs pt-3">@Localizer["EditSpaceForm.Fields.Collapsable.Goals.Field.Description.Text"]</p>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-4 mt-0"/>
                </div>
            </Collapsable>
        </div>

    </Fields>
    <FooterButtons>
        <div
            class="flex flex-row justify-end absolute left-0 bottom-0 border-t-2 border-adlergrey-100 bg-adlerbgbright w-full">
            <SubmitThenRemapButton RemapAction="MapIntoContainer"/>
            <MudIconButton Icon="@Icons.Material.Filled.Autorenew"
                           OnClick="@OnResetAsync"
                           Class="btn-standard shadow-lg text-adlergrey rounded-lg bg-adlerdeactivated hover:bg-adlerdarkblue hover:text-buttonbgblue reset-form">
            </MudIconButton>
        </div>
    </FooterButtons>
</BaseForm>

@code {
    [Inject, AllowNull] internal ILearningWorldPresenter LearningWorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILearningSpacePresenter LearningSpacePresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IFormDataContainer<LearningSpaceFormModel, LearningSpace> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<EditSpaceForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IDialogService DialogService { get; set; }


    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningSpaceViewModel SpaceToEdit { get; set; }

    [Parameter, EditorRequired] public EventCallback OnNewButtonClicked { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;


    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LearningSpaceFormModel FormModel => FormDataContainer.FormModel;

    private SpaceTheme[] _themes = Enum.GetValues<SpaceTheme>().Where(v => !IsObsolete(v)).ToArray();

    private static bool IsObsolete<TEnum>(TEnum value) where TEnum : Enum
    {
        var field = typeof(TEnum).GetField(value.ToString())!;
        return Attribute.IsDefined(field, typeof(ObsoleteAttribute));
    }

    private BaseForm<LearningSpaceFormModel, LearningSpace> _form = null!;
    private MudTextField<string> _nameField = null!;
    private bool _focusCalled = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!_focusCalled)
        {
            _focusCalled = true;
            await _form.FocusField(_nameField);
        }
    }

    private void OnValidSubmit(LearningSpaceFormModel model)
    {
        //we can supress the nullable warning here as validator ensures RequiredPoints isn't null - n.stich
        LearningSpacePresenter.EditLearningSpace(model.Name, model.Description,
            model.RequiredPoints, model.SpaceTheme);
    }

    private void OnValidFieldChange(LearningSpaceFormModel model) => OnValidSubmit(model);

    private async Task MapIntoContainer()
    {
        Mapper.Map(SpaceToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
        if (LearningSpacePresenter.LearningSpaceVm == null)
            throw new ApplicationException(Localizer["EditSpaceForm.ApplicationException.Message"]);
        LearningSpacePresenter.LearningSpaceVm.PropertyChanged += LearningSpacePropertyChanged;
        LearningSpacePresenter.LearningSpaceVm.LearningSpaceLayout.PropertyChanged += LearningSpaceLayoutPropertyChanged;
        _focusCalled = false;
    }

    private void LearningSpaceLayoutPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName is nameof(LearningSpaceViewModel.LearningSpaceLayout.FloorPlanName)
           )
        {
            InvokeAsync(MapIntoContainer);
        }
    }

    private void LearningSpacePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName is nameof(LearningSpaceViewModel.Name) or nameof(LearningSpaceViewModel.Description)
            or nameof(LearningSpaceViewModel.LearningOutcomeCollection) or nameof(LearningSpaceViewModel.RequiredPoints)
           )
        {
            InvokeAsync(MapIntoContainer);
        }
    }

    private async void OpenLearningOutcomesOverview()
    {
        await LearningOutcomesOverviewHelper.ShowOverviewAsync(DialogService, FormDataContainer.FormModel.LearningOutcomeCollection, typeof(LearningSpace));
        StateHasChanged();
    }


    private async Task OnResetAsync()
    {
        await MapIntoContainer();
    }

}