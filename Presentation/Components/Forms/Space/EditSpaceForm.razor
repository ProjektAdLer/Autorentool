@using Presentation.PresentationLogic.LearningSpace
@using AutoMapper
@using BusinessLogic.Entities
@using Presentation.Components.Forms.Models
@using System.ComponentModel
@using Presentation.Components.Forms.Buttons

<header class="m-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-xl text-center font-bold text-adlergrey-500 mx-2">Learning space metadata</h2>
    </div>
</header>
<MudDivider DividerType="DividerType.Middle" Class="my-4"></MudDivider>

<BaseForm TForm="LearningSpaceFormModel" TEntity="LearningSpace"
          OnValidSubmit="OnValidSubmit" SnackbarMessage="Space updated" FormDataContainer="FormDataContainer">
    <HeaderButtons>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Class="btn-standard" OnClick="async () => await OnNewButtonClicked.InvokeAsync()">New</MudButton>
        </HeaderButtons>
    <Fields>
        <Collapsable Title="General" @bind-Collapsed="_collapsedGeneral">
            <div class="rounded-lg w-4/4 px-4 pb-2">
            <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                          For="@(() => FormModel.Name)"
                          Immediate="true"
                          DebounceInterval="300"
                          Label="@nameof(FormDataContainer.FormModel.Name)"/>
            </div>
        </Collapsable>

        <Collapsable Title="Goals" @bind-Collapsed="_collapsedGoals">
            <div class="rounded-lg w-4/4 px-4 pb-2">
            <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                          For="@(() => FormModel.Goals)"
                          Immediate="true"
                          DebounceInterval="300"
                          Label="@nameof(FormDataContainer.FormModel.Goals)"/>
            <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                          For="@(() => FormModel.Description)"
                          Immediate="true"
                          DebounceInterval="300"
                          Label="@nameof(FormDataContainer.FormModel.Description)"/>
            </div>
        </Collapsable>

        <Collapsable Title="Completion conditions" @bind-Collapsed="_collapsedConditions">
            <div class="rounded-lg w-4/4 px-4 pb-4">
            <MudNumericField @bind-Value="FormDataContainer.FormModel.RequiredPoints"
                             For="@(() => FormModel.RequiredPoints)"
                             Immediate="true"
                             DebounceInterval="300"
                             Label="@nameof(FormDataContainer.FormModel.RequiredPoints)"/>
            </div>
        </Collapsable>
        <SpaceLayoutSelection LearningSpaceViewModel="SpaceToEdit"></SpaceLayoutSelection>
    </Fields>
    <FooterButtons>
        <SubmitThenRemapButton RemapAction="MapIntoContainer"/>
        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Autorenew" Class="btn-standard text-adlergrey rounded bg-adlerdeactivated hover:bg-adlerdarkblue hover:text-buttonbgblue" OnClick="OnResetAsync"></MudIconButton>
    </FooterButtons>
</BaseForm>

@code {
#pragma warning disable CS8618 - injected by framework - n.stich
    [Inject]
    private ILearningSpacePresenter LearningSpacePresenter { get; set; }

    [Inject]
    private IMapper Mapper { get; set; }

    [Inject]
    private IFormDataContainer<LearningSpaceFormModel, LearningSpace> FormDataContainer { get; set; }
#pragma warning restore CS8618

#pragma warning disable CS8618
    [Parameter, EditorRequired]
    public ILearningSpaceViewModel SpaceToEdit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnNewButtonClicked { get; set; }
#pragma warning restore CS8618

    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LearningSpaceFormModel FormModel => FormDataContainer.FormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedGoals = true;
    private bool _collapsedConditions = true;

    private void OnValidSubmit(LearningSpaceFormModel model)
    {
    //we can supress the nullable warning here as validator ensures RequiredPoints isn't null - n.stich
        LearningSpacePresenter.EditLearningSpace(model.Name, model.Description,
            model.Goals, (int) model.RequiredPoints!);
    }

    private async Task MapIntoContainer()
    {
        Mapper.Map(SpaceToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
        if (LearningSpacePresenter.LearningSpaceVm == null)
            throw new ApplicationException("LearningWorldVm is null");
        LearningSpacePresenter.LearningSpaceVm.PropertyChanged += LearningSpacePropertyChanged;
    }

    private void LearningSpacePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName is nameof(LearningSpaceViewModel.Name) or nameof(LearningSpaceViewModel.Description) 
            or nameof(LearningSpaceViewModel.Goals) or nameof(LearningSpaceViewModel.RequiredPoints)
            )
        {
            InvokeAsync(MapIntoContainer);
        }
    }

    private async Task OnResetAsync()
    {
        await MapIntoContainer();
    }

}