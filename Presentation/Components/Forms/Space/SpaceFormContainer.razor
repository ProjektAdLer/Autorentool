@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.SelectedViewModels
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@implements IDisposable
<MudCard Class="overflow-auto w-full">
    @if (SpacePresenter.LearningSpaceVm == null || _editOverwritten)
    {
        <CreateSpaceForm/>
    }
    else
    {
        <EditSpaceForm SpaceToEdit="SpacePresenter.LearningSpaceVm" OnNewButtonClicked="OnForceNew"/>
    }
</MudCard>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningSpacePresenter SpacePresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ISelectedViewModelsProvider SelectedViewModelsProvider { get; set; }


    //indicates if the edit state has been overwritten by either pressing reset in the edit form
    //or by pressing the "Create new space" button
    private bool _editOverwritten;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _editOverwritten = false;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SpacePresenter.PropertyChanged += SpacePresenterOnPropertyChanged;
    }

    private async void SpacePresenterOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != nameof(SpacePresenter.LearningSpaceVm)) return;
        _editOverwritten = false;
        await InvokeAsync(StateHasChanged);
    }

    private void OnForceNew()
    {
        _editOverwritten = true;
        SelectedViewModelsProvider.SetLearningObjectInPathWay(null, null);
    }

public void Dispose()
{
SpacePresenter.PropertyChanged -= SpacePresenterOnPropertyChanged;
}
}