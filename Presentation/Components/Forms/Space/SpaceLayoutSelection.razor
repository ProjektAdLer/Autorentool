@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.LearningSpace
@using Presentation.PresentationLogic.LearningSpace.SpaceLayout.FloorPlans
@using Shared
<div class="flex flex-col justify-center py-2 w-full rounded-lg bg-adlergrey-100">
    <div class="flex flex-row justify-evenly">
        @foreach (FloorPlanEnum floorPlan in Enum.GetValues(typeof(FloorPlanEnum)))
        {
            <MudIconButton OnClick="(args) => OnFloorPlanButtonSelected(floorPlan, args)"
                           Color="IsFloorPlanActive(floorPlan) ? Color.Info : Color.Error"
                           Icon="@FloorPlanViewModelProvider.GetFloorPlan(floorPlan).GetIcon"
                           Style="@GetStyle(floorPlan)"
                           Size="Size.Large">
                @floorPlan.ToString()
            </MudIconButton>
        }
    </div>
</div>


@code {
    
    [Inject]
    private StringLocalizer<SpaceLayoutSelection> Localizer { get; set; }

    // LearningSpacePresenter is injected and LearningSpaceViewModel is required to be set by the parent component
#pragma warning disable CS8618
    [Inject]
    public ILearningSpacePresenter LearningSpacePresenter { get; set; }

    [Parameter, EditorRequired]
    public ILearningSpaceViewModel LearningSpaceViewModel { get; set; }
#pragma warning restore CS8618


    private FloorPlanEnum SelectedFloorPlan => LearningSpaceViewModel.LearningSpaceLayout.FloorPlanName;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (LearningSpaceViewModel == null || LearningSpacePresenter.LearningSpaceVm != LearningSpaceViewModel)
            throw new ArgumentException(Localizer["ArgumentException.Message"]);
    }

    private void OnFloorPlanButtonSelected(FloorPlanEnum floorPlan, MouseEventArgs args)
    {
        LearningSpacePresenter.SetLearningSpaceLayout(floorPlan);
    }

    private bool IsFloorPlanActive(FloorPlanEnum floorPlan)
    {
        return floorPlan == SelectedFloorPlan;
    }

    private string GetStyle(FloorPlanEnum floorPlan)
    {
        return IsFloorPlanActive(floorPlan) ?
            "filter: grayscale(0%); -webkit-filter: grayscale(0%); drop-shadow(0 0 5px); -webkit-filter: drop-shadow(0 0 5px);" :
            "filter: grayscale(70%); -webkit-filter: grayscale(70%);";
    }

}