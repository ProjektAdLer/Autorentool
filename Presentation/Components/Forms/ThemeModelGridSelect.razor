@using System
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Shared.Theme
@using Presentation.PresentationLogic.WorldThemeSelect
@using BusinessLogic.Entities
@using Presentation.Components.Forms.Models
@inject IFormDataContainer<LearningWorldFormModel, LearningWorld> FormDataContainer

    <div class="p-2 bg-adlergrey-100 border-adlergrey-200 border rounded">
        <div class="grid gap-2">
            @foreach (var theme in _themes)
            {
                var disabled = DisableCompany && theme == WorldTheme.Company;
                var isSelected = Selected == theme && !disabled;

                <MudTooltip Class="bg-adlergrey-200 shadow-xl"
                            Placement="Placement.Top" Delay="150" Duration="250" Arrow="true">
                    <ChildContent>
                        <MudPaper Class="@BuildItemCss(theme, disabled)"
                                  @onclick="@(() => OnPick(theme, disabled))"
                                  role="button"
                                  aria-pressed="@isSelected"
                                  aria-label="@(ThemeHelper<WorldTheme>.Localize(theme))">
                            <div class="flex items-center gap-2 p-2">
                                <MudImage Src="@GetThemeImagePath(theme)"
                                          Alt="Lernwelttheme"
                                          Class="w-14 h-14 rounded-xl object-cover"/>
                                <div class="flex flex-col">
                                    <p class="text-sm 2xl:text-base">
                                        @(ThemeHelper<WorldTheme>.Localize(theme))
                                    </p>
                                </div>
                            </div>
                        </MudPaper>
                    </ChildContent>
                    <TooltipContent>
                        <div class="flex flex-col gap-2 justify-center items-center w-80 p-2">
                            <p class="text-sm 2xl:text-base">
                                @(ThemeHelper<WorldTheme>.Localize(theme))
                            </p>
                            <MudImage Src="@GetThemeImagePath(theme, true)"
                                      Width="350"
                                      Alt="Lernraumtheme"/>
                        </div>
                    </TooltipContent>
                </MudTooltip>
            }
        </div>
    </div>

@code {
    [CascadingParameter] private EditContext? EditContext { get; set; }

    [Parameter] public bool UsingBinding { get; set; }
    [Parameter] public WorldTheme Value { get; set; }
    [Parameter] public EventCallback<WorldTheme> ValueChanged { get; set; }
    [Parameter] public Expression<Func<WorldTheme>>? ValueExpression { get; set; }
    [Parameter] public bool DisableCompany { get; set; } = false;

    [Parameter] public IWorldThemeForm? FormModel { get; set; } // nur für den Fallback ohne Binding

    private ILearningWorldThemeViewModel Vm { get; set; } = new LearningWorldThemeViewModel();

    private static readonly WorldTheme[] _themes = new[]
    {
        WorldTheme.CampusAschaffenburg,
        WorldTheme.CampusKempten,
        WorldTheme.Suburb,
        WorldTheme.Company
    };

    private WorldTheme? Selected => Vm.Selected;

    protected override void OnParametersSet()
    {
        // ViewModel wiring
        Vm.UsingBinding    = UsingBinding;
        Vm.ValueChanged    = t => ValueChanged.InvokeAsync(t);
        Vm.EditContext     = EditContext;
        Vm.ValueExpression = ValueExpression;
        Vm.FormModel       = FormModel;

        // ⬅︎ NEU/ÄNDERN: Kein pauschales Überschreiben mehr.
        if (UsingBinding)
        {
            Vm.Selected = Value; // ⬅︎ NEU/ÄNDERN: Anzeige folgt dem gebundenen Wert vom Parent
        }
        else
        {
            Vm.Selected ??= FormModel?.WorldTheme    // ⬅︎ NEU/ÄNDERN: nur initial belegen
                         ?? WorldTheme.CampusAschaffenburg;
        }
    }

    private async Task OnPick(WorldTheme theme, bool disabled)
    {
        if (disabled) return;

        // ⬅︎ NEU/ÄNDERN: NICHT Value = theme; setzen (Parameter sind input-only)!
        await Vm.PickAsync(theme, disabled); // VM setzt Selected und informiert Parent (Binding)
        StateHasChanged();
    }

    private string GetThemeImagePath(WorldTheme t, bool large = false) => Vm.GetThemeImagePath(t, large);
    private string BuildItemCss(WorldTheme t, bool disabled)           => Vm.BuildItemCss(t, disabled);
}