@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Presentation.PresentationLogic.LearningWorld
@implements IDisposable
<MudCard Class="overflow-auto w-full">
    @if (WorldPresenter.LearningWorldVm == null)
    {
        <CreateWorldForm/>
    }
    else
    {
        <EditWorldForm WorldToEdit="WorldPresenter.LearningWorldVm"/>
    }
</MudCard>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningWorldPresenter WorldPresenter { get; set; }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        WorldPresenter.PropertyChanged += MediatorOnPropertyChanged;
    }

    private async void MediatorOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != nameof(WorldPresenter.LearningWorldVm)) return;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        WorldPresenter.PropertyChanged -= MediatorOnPropertyChanged;
    }

}