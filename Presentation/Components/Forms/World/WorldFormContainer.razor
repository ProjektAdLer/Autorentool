@using Presentation.PresentationLogic.LearningWorld
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
<MudCard Class="overflow-auto">
    @if (WorldPresenter.LearningWorldVm == null || _editOverwritten)
    {
        <CreateWorldForm/>
    }
    else
    {
        <EditWorldForm WorldToEdit="WorldPresenter.LearningWorldVm"/>
    }
</MudCard>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    public ILearningWorldPresenter WorldPresenter { get; set; }


    private bool _editOverwritten = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _editOverwritten = false;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        WorldPresenter.PropertyChanged += MediatorOnPropertyChanged;
    }

    private async void MediatorOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != nameof(WorldPresenter.LearningWorldVm)) return;
        _editOverwritten = false;
        await InvokeAsync(StateHasChanged);
    }


    private void OnForceNew()
    {
        _editOverwritten = true;
    }

}