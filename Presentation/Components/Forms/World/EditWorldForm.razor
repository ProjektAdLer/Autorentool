@using Presentation.PresentationLogic.LearningWorld
@using AutoMapper
@using BusinessLogic.Entities
@using Presentation.Components.Forms.Models
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Forms.Buttons

<div class="absolute w-full z-30 h-24">
    <header class="py-4 bg-adlerbgbright border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
        <h2 class="text-base 2xl:text-xl text-center font-bold text-adlerdarkblue-800 mx-2">@Localizer["EditWorldForm.Header.Title"]</h2>
    </header>
    <div class="flex justify-between items-start">
        <MudText Class="text-adlergrey-200 p-2 text-xs">@Localizer["EditWorldForm.Text"]</MudText>
    </div>
</div>

<BaseForm TForm="LearningWorldFormModel"
          TEntity="LearningWorld"
          OnValidSubmit="OnValidSubmit"
          OnValidFieldChange="OnValidFieldChange"
          SnackbarMessage=@Localizer["EditWorldForm.SnackbarMessage"]
          FormDataContainer="FormDataContainer" @ref="_form">
    
    <Fields>
        <div class="px-2 overflow-y-scroll top-28 h-[75%] 2xl:h-[83%] absolute flex flex-col w-[96%] mx-2 border-t border-dotted">
            <Collapsable Title=@Localizer["EditWorldForm.Fields.Collapsable.General.Title"] InitiallyCollapsed="false">
                <div class="rounded-lg w-4/4 px-4 pb-2">
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  @ref="_nameField"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.Name.Text"]"/>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Shortname"
                                  For="@(() => FormModel.Shortname)"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.Shortname.Text"]"/>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Authors"
                                  For="@(() => FormModel.Authors)"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.Authors.Text"]"/>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Language"
                                  For="@(() => FormModel.Language)"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.Language.Text"]"/>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.EvaluationLink"
                                  For="@(() => FormModel.EvaluationLink)"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.EvaluationLink.Text"]"/>
                </div>
            </Collapsable>
            
            <Collapsable Title="@Localizer["EditWorldForm.EnrolmentKey.Title"]" InitiallyCollapsed="true">
                <div class="rounded-lg w-4/4 px-4">
                    <div class="flex flex-row items-center gap-1 pt-1">
                        <MudText Typo="Typo.caption">@Localizer["EditWorldForm.Fields.Collapsable.General.Field.EnrolmentKey.Text"]</MudText>
                        <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="@Localizer["EditWorldForm.EnrolmentKey.Tooltip"]">
                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey hover:text-adlerdarkblue"></MudIcon>
                        </MudTooltip>
                    </div>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.EnrolmentKey"
                                  For="@(() => FormModel.EnrolmentKey)"
                                  DebounceInterval="DebounceInterval"
                                  Variant="Variant.Outlined"
                                  Class="mt-0"/>
                </div>
            </Collapsable>
            
            <Collapsable Title=@Localizer["EditWorldForm.Fields.Collapsable.Goals.Title"] InitiallyCollapsed="true">
                <div class="rounded-lg w-4/4 px-4">
                    <MudText Typo="Typo.caption">@Localizer["EditWorldForm.Fields.Collapsable.Goals.Field.Goals.Text"]</MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                  For="@(() => FormModel.Goals)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-2 mt-0"/>
                </div>
            </Collapsable>
            
            <Collapsable Title=@Localizer["EditWorldForm.Fields.Collapsable.Description.Title"] InitiallyCollapsed="true">
                <div class="rounded-lg w-4/4 px-4">
                    <MudText Typo="Typo.caption">@Localizer["EditWorldForm.Fields.Collapsable.Goals.Field.Description.Text"]</MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-4 mt-0"/>
                </div>
            </Collapsable>
        </div>
    </Fields>
    
    <FooterButtons>
        <div class="absolute flex flex-row justify-end left-0 w-full bottom-0 border-t-2 border-adlergrey-100 bg-adlerbgbright">
            <SubmitThenRemapButton RemapAction="MapIntoContainer"/>
            <MudIconButton Icon="@Icons.Material.Filled.Autorenew"
                           OnClick="@OnResetAsync"
                           Class="btn-standard shadow-lg text-adlergrey rounded-lg bg-adlerdeactivated hover:bg-adlerdarkblue hover:text-buttonbgblue reset-form">
            </MudIconButton>
        </div>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILearningWorldPresenter LearningWorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IFormDataContainer<LearningWorldFormModel, LearningWorld> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<EditWorldForm> Localizer { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningWorldViewModel WorldToEdit { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;


    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LearningWorldFormModel FormModel => FormDataContainer.FormModel;

    private BaseForm<LearningWorldFormModel, LearningWorld> _form = null!;
    private MudTextField<string> _nameField = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await _form.FocusField(_nameField);
        }
    }

    private void OnValidSubmit(LearningWorldFormModel model)
    {
        LearningWorldPresenter.EditLearningWorld(model.Name, model.Shortname, model.Authors, model.Language, model.Description, model.Goals, model.EvaluationLink, model.EnrolmentKey);
    }

    private void OnValidFieldChange(LearningWorldFormModel model) => OnValidSubmit(model);

    private async Task MapIntoContainer()
    {
        Mapper.Map(WorldToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
        if (LearningWorldPresenter.LearningWorldVm == null)
            throw new ApplicationException("LearningWorldVm is null");
        LearningWorldPresenter.LearningWorldVm.PropertyChanged += LearningWorldPropertyChanged;
    }

    private void LearningWorldPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName is nameof(LearningWorldViewModel.Name) or nameof(LearningWorldViewModel.Shortname)
            or nameof(LearningWorldViewModel.Authors) or nameof(LearningWorldViewModel.Language)
            or nameof(LearningWorldViewModel.Description) or nameof(LearningWorldViewModel.Goals)
           )
        {
            InvokeAsync(MapIntoContainer);
        }
    }

    private async Task OnResetAsync()
    {
        await MapIntoContainer();
    }

}