@using Presentation.PresentationLogic.LearningWorld
@using AutoMapper
@using BusinessLogic.Entities
@using Presentation.Components.Forms.Models
@using Microsoft.Extensions.Localization
@using System.ComponentModel
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Forms.Buttons
<header class="m-2 rounded-lg">
    <div class="flex justify-center p-2">
        <h2 class="text-base 2xl:text-xl text-center font-bold text-adlergrey-500 mx-2">@Localizer["EditWorldForm.Header.Title"]</h2>
    </div>
</header>
<MudDivider DividerType="DividerType.Middle" Class="mt-4 mb-2"></MudDivider>
<MudText Class="text-adlergrey-200 w-4/4 px-4 text-xs">@Localizer["EditWorldForm.Text"]</MudText>
<BaseForm TForm="LearningWorldFormModel" TEntity="LearningWorld" OnValidSubmit="OnValidSubmit" OnValidFieldChange="OnValidFieldChange"
          SnackbarMessage=@Localizer["EditWorldForm.SnackbarMessage"] FormDataContainer="FormDataContainer">
    <Fields>
        <div class="px-4">
            <Collapsable Title=@Localizer["EditWorldForm.Fields.Collapsable.General.Title"]
                         @bind-Collapsed="_collapsedGeneral">
                <div class="rounded-lg w-4/4 px-4 pb-2">
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                                  For="@(() => FormModel.Name)"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.Name.Text"]"/>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Shortname"
                                  For="@(() => FormModel.Shortname)"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.Shortname.Text"]"/>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Authors"
                                  For="@(() => FormModel.Authors)"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.Authors.Text"]"/>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Language"
                                  For="@(() => FormModel.Language)"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.Language.Text"]"/>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.EvaluationLink"
                                  For="@(() => FormModel.EvaluationLink)"
                                  DebounceInterval="DebounceInterval"
                                  Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.EvaluationLink.Text"]"/>
                <MudTextField @bind-Value="FormDataContainer.FormModel.EnrolmentKey"
                              For="@(() => FormModel.EnrolmentKey)"
                              DebounceInterval="DebounceInterval"
                              Label="@Localizer["EditWorldForm.Fields.Collapsable.General.Field.EnrolmentKey.Text"]"/>
            </div>
            </Collapsable>
        </div>

        <div class="px-4">
            <Collapsable Title=@Localizer["EditWorldForm.Fields.Collapsable.Goals.Title"]
                                               @bind-Collapsed="_collapsedGoals">
                <div class="rounded-lg w-4/4 px-4">
                    <MudText Typo="Typo.caption">@Localizer["EditWorldForm.Fields.Collapsable.Goals.Field.Goals.Text"]</MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Goals"
                                  For="@(() => FormModel.Goals)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-2 mt-0"/>
                </div>
            </Collapsable>
        </div>
        
        <div class="px-4">
            <Collapsable Title=@Localizer["EditWorldForm.Fields.Collapsable.Description.Title"]
                                                       @bind-Collapsed="_collapsedDescription">
                <div class="rounded-lg w-4/4 px-4">
                    <MudText Typo="Typo.caption">@Localizer["EditWorldForm.Fields.Collapsable.Goals.Field.Description.Text"]</MudText>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                                  For="@(() => FormModel.Description)"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  DebounceInterval="DebounceInterval"
                                  Class="pb-4 mt-0"/>
                </div>
            </Collapsable>
        </div>

    </Fields>
    <FooterButtons>
        <SubmitThenRemapButton RemapAction="MapIntoContainer"/>
        <MudIconButton Icon="@Icons.Material.Filled.Autorenew"
                       OnClick="@OnResetAsync"
                       Class="btn-standard text-adlergrey shadow-lg rounded-lg bg-adlerdeactivated hover:bg-adlerdarkblue hover:text-buttonbgblue reset-form">
        </MudIconButton>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private ILearningWorldPresenter LearningWorldPresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IFormDataContainer<LearningWorldFormModel, LearningWorld> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<EditWorldForm> Localizer { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null since not providing the parameter produces a warning - n.stich
    public ILearningWorldViewModel WorldToEdit { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;


    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LearningWorldFormModel FormModel => FormDataContainer.FormModel;

    private bool _collapsedGeneral = false;
    private bool _collapsedGoals = true;
    private bool _collapsedDescription = true;

    private void OnValidSubmit(LearningWorldFormModel model)
    {
        LearningWorldPresenter.EditLearningWorld(model.Name, model.Shortname, model.Authors, model.Language, model.Description, model.Goals, model.EvaluationLink, model.EnrolmentKey);
    }

    private void OnValidFieldChange(LearningWorldFormModel model) => OnValidSubmit(model);

    private async Task MapIntoContainer()
    {
        Mapper.Map(WorldToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
        if (LearningWorldPresenter.LearningWorldVm == null)
            throw new ApplicationException("LearningWorldVm is null");
        LearningWorldPresenter.LearningWorldVm.PropertyChanged += LearningWorldPropertyChanged;
    }

    private void LearningWorldPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName is nameof(LearningWorldViewModel.Name) or nameof(LearningWorldViewModel.Shortname) 
            or nameof(LearningWorldViewModel.Authors) or nameof(LearningWorldViewModel.Language)
            or nameof(LearningWorldViewModel.Description) or nameof(LearningWorldViewModel.Goals)
            )
        {
            InvokeAsync(MapIntoContainer);
        }
    }

    private async Task OnResetAsync()
    {
        await MapIntoContainer();
    }

}