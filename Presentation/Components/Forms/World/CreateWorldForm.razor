@using System.Diagnostics.CodeAnalysis
@using BusinessLogic.Entities
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms.Buttons
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Shared.Theme
<div class="absolute w-full z-30 cursor-default">
    <header class="py-2 2xl:py-3 bg-adlerbgbright border-b-2 border-adlergrey-100 overflow-hidden flex justify-center">
        <h2 class="text-base 2xl:text-lg text-center font-bold text-adlertitledarkblue mx-2">@Localizer["CreateWorldForm.Title.Text"]</h2>
    </header>
    <div class="flex justify-between items-start">
        <MudText Class="text-adlergrey-200 text-xs p-2">@Localizer["CreateWorldForm.Text"]</MudText>
    </div>
</div>

<BaseForm TForm="LearningWorldFormModel" TEntity="LearningWorld" OnValidSubmit="OnValidSubmit" @ref="_form"
          SnackbarMessage=@Localizer["CreateWorldForm.SnackbarMessage"]
          FormDataContainer="FormDataContainer">
    <Fields>
        <Collapsable Title=@Localizer["CreateWorldForm.General.Text"] InitiallyCollapsed="false">
            <div class="rounded-lg w-4/4 px-6">
                <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                              For="@(() => FormModel.Name)"
                              @ref="_nameField"
                              DebounceInterval="DebounceInterval"
                              OnKeyUp="HandleKeyEvent"
                              Placeholder="@Localizer["CreateWorldForm.General.Field.Name.Text"]"
                              Typo="Typo.body1"
                              Margin="Margin.Normal"/>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Shortname"
                              For="@(() => FormModel.Shortname)"
                              DebounceInterval="DebounceInterval"
                              OnKeyUp="HandleKeyEvent"
                              Placeholder="@Localizer["CreateWorldForm.General.Field.Shortname.Text"]"
                              Typo="Typo.body1"
                              Margin="Margin.Normal"/>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Authors"
                              For="@(() => FormModel.Authors)"
                              DebounceInterval="DebounceInterval"
                              OnKeyUp="HandleKeyEvent"
                              Placeholder="@Localizer["CreateWorldForm.General.Field.Authors.Text"]"
                              Typo="Typo.body1"
                              Margin="Margin.Normal"/>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Language"
                              For="@(() => FormModel.Language)"
                              DebounceInterval="DebounceInterval"
                              OnKeyUp="HandleKeyEvent"
                              Placeholder="@Localizer["CreateWorldForm.General.Field.Language.Text"]"
                              Typo="Typo.body1"
                              Margin="Margin.Normal"/>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["CreateWorldForm.Finalization.Text"] InitiallyCollapsed="true">
            <div class="rounded-lg w-4/4 px-6">
                <p class="text-xs pt-3">@Localizer["CreateWorldForm.Finalization.Collapsable.Description.Text"]</p>
                <MudTooltip Placement="Placement.Right"
                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed"
                            Text="@Localizer["CreateWorldForm.Finalization.Tooltip"]">
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                             Class="text-adlergrey hover:text-adlerdarkblue"></MudIcon>
                </MudTooltip>
                <MudTextField @bind-Value="FormDataContainer.FormModel.EvaluationLinkText"
                              For="@(() => FormModel.EvaluationLinkText)"
                              Lines="3"
                              Placeholder="@Localizer["CreateWorldForm.Finalization.Field.EvaluationLinkText.Placeholder.Text"]"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"/>
                <MudTextField @bind-Value="FormDataContainer.FormModel.EvaluationLinkName"
                              For="@(() => FormModel.EvaluationLinkName)"
                              @ref="_evaluationLinkNameField"
                              DebounceInterval="DebounceInterval"
                              OnKeyUp="HandleKeyEvent"
                              Placeholder="@Localizer["CreateWorldForm.Finalization.Field.EvaluationLinkName.Placeholder.Text"]"
                              Typo="Typo.body1"
                              Margin="Margin.Normal"/>
                <MudTextField @bind-Value="FormDataContainer.FormModel.EvaluationLink"
                              For="@(() => FormModel.EvaluationLink)"
                              @ref="_evaluationLinkField"
                              DebounceInterval="DebounceInterval"
                              OnKeyUp="HandleKeyEvent"
                              Placeholder="@Localizer["CreateWorldForm.Finalization.Field.EvaluationLink.Placeholder.Text"]"
                              Typo="Typo.body1"
                              Margin="Margin.Normal"/>
            </div>
        </Collapsable>

            <Collapsable Title="@Localizer["CreateWorldForm.EnrolmentKey.Title"]" InitiallyCollapsed="true">
                <div class="rounded-lg w-4/4 px-6">
                    <div class="flex flex-row items-center gap-1">
                        <p class="text-xs pt-3 cursor-default">@Localizer["CreateWorldForm.General.Field.EnrolmentKey.Text"]</p>
                        <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                            <TooltipContent>
                                <MudText
                                    Class="text-xs">@((MarkupString)Localizer["CreateWorldForm.EnrolmentKey.Tooltip"].ToString())</MudText>
                            </TooltipContent>
                            <ChildContent>
                                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                         Class="text-adlergrey hover:text-adlerdarkblue"></MudIcon>
                            </ChildContent>
                        </MudTooltip>
                    </div>
                    <MudTextField @bind-Value="FormDataContainer.FormModel.EnrolmentKey"
                                  For="@(() => FormModel.EnrolmentKey)"
                                  DebounceInterval="DebounceInterval"
                                  OnKeyUp="HandleKeyEvent"
                                  Variant="Variant.Outlined"/>
                </div>
            </Collapsable>

        <Collapsable Title=@Localizer["CreateWorldForm.Theme.Text"] InitiallyCollapsed="true">
            <p class="text-xs pl-4 cursor-default">@Localizer["CreateWorldForm.Theme.Field.Theme.Text"]</p>
            <div class="w-full px-6 py-2">
                <WorldThemeSelect @bind-Selected="FormDataContainer.FormModel.WorldTheme"/>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["CreateWorldForm.Goals.Text"] InitiallyCollapsed="true">
                <div class="w-4/4 px-6 flex flex-col">
                    <p class="text-xs pt-3 cursor-default">@Localizer["CreateWorldForm.Goals.Field.Goals.Text"]</p>
                <div class="flex justify-center">
                    <MudButton Class="w-72 btn-standard"
                               OnClick="OpenLearningOutcomesOverview">@Localizer["CreateWorldForm.Goals.Button"]</MudButton>
                </div>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["CreateWorldForm.Fields.Collapsable.Description.Title"]
                     InitiallyCollapsed="true">
            <div class="rounded-lg w-4/4 px-6">
                <p class="text-xs pt-3 cursor-default">@Localizer["CreateWorldForm.Goals.Field.Description.Text"]</p>
                <MudTextField @bind-Value="FormDataContainer.FormModel.Description"
                              For="@(() => FormModel.Description)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              DebounceInterval="DebounceInterval"/>
            </div>
        </Collapsable>

        <Collapsable Title=@Localizer["CreateWorldForm.Fields.Collapsable.Story.Title"] InitiallyCollapsed="true">
            <div class="rounded-lg w-4/4 px-6">
                <p class="text-xs pt-3 cursor-default">@Localizer["CreateWorldForm.Fields.Collapsable.Story.Field.Description.Text"]</p>
                <MudTextField @bind-Value="FormDataContainer.FormModel.StoryStart"
                              For="@(() => FormModel.StoryStart)"
                              Lines="3"
                              Label="@Localizer["CreateWorldForm.Fields.Collapsable.Story.Field.Start.Label"]"
                              Variant="Variant.Outlined"
                              Placeholder="@Localizer["CreateWorldForm.Fields.Collapsable.Story.Field.Start.Placeholder"]"
                              DebounceInterval="DebounceInterval"
                              Class="pb-2"/>
                <MudTextField @bind-Value="FormDataContainer.FormModel.StoryEnd"
                              For="@(() => FormModel.StoryEnd)"
                              Lines="3"
                              Label="@Localizer["CreateWorldForm.Fields.Collapsable.Story.Field.End.Label"]"
                              Variant="Variant.Outlined"
                              Placeholder="@Localizer["CreateWorldForm.Fields.Collapsable.Story.Field.End.Placeholder"]"
                              DebounceInterval="DebounceInterval"
                              Class="pb-4"/>
            </div>
        </Collapsable>

    </Fields>
    <FooterButtons>
        <div
            class="absolute flex flex-row justify-end left-0 w-full bottom-0 border-t-2 border-adlergrey-100 bg-adlerbgbright">
            <DefaultSubmitButton/>
            <DefaultResetButton/>
        </div>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<CreateWorldForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IAuthoringToolWorkspacePresenter AuthoringToolWorkspacePresenter { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IAuthoringToolWorkspaceViewModel AuthoringToolWorkspaceViewModel { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LearningWorldFormModel, LearningWorld> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IDialogService DialogService { get; set; }

    [Parameter] public EventCallback OnSubmitted { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;

    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LearningWorldFormModel FormModel => FormDataContainer.FormModel;

    private BaseForm<LearningWorldFormModel, LearningWorld> _form = null!;
    private MudTextField<string> _nameField = null!;
    private MudTextField<string> _evaluationLinkNameField = null!;
    private MudTextField<string> _evaluationLinkField = null!;
    private WorldTheme[] _themes = (WorldTheme[])Enum.GetValues(typeof(WorldTheme));

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await _form.FocusField(_nameField);
        }
    }

    private void OnValidSubmit(LearningWorldFormModel model)
    {
        AuthoringToolWorkspacePresenter.CreateLearningWorld(model.Name, model.Shortname, model.Authors, model.Language, model.Description, model.LearningOutcomeCollection, model.WorldTheme, model.EvaluationLink, model.EvaluationLinkName, model.EvaluationLinkText, model.EnrolmentKey, model.StoryStart, model.StoryEnd);
        OnSubmitted.InvokeAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    internal async Task HandleKeyEvent(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            await _form.SubmitAsync();
        }
        else
        {
            await ValidateEvaluationLinkFields();
        }
    }

    private async Task ValidateEvaluationLinkFields()
    {
        // ReSharper disable ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
        if (_evaluationLinkField != null && _evaluationLinkNameField != null)
            // ReSharper restore ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
        {
            await Task.Delay(DebounceInterval);
            await _evaluationLinkField.Validate();
            await _evaluationLinkNameField.Validate();
        }
    }

    private async void OpenLearningOutcomesOverview()
    {
        await LearningOutcomesOverviewHelper.ShowOverviewAsync(DialogService, FormDataContainer.FormModel.LearningOutcomeCollection, typeof(LearningWorld));
        StateHasChanged();
    }

}