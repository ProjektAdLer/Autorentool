@using System.Diagnostics.CodeAnalysis
@using AutoMapper
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.LearningWorld
@using Shared.H5P
@using Presentation.H5P
@inherits MudBaseInput<ILearningContentFormModel>


<p class="text-sm px-6">@Localizer["LearningContentDialog.LearningMaterial.Dialog.Subtitle"]</p>
<div class="rounded border-4 border-adlergrey-200 m-4">
    <MudContainer Class="flex justify-end bg-adlerbgbright">
        <div class="pb-2 px-2 w-80 bg-adlerbgbright">
            <MudTextField @bind-Value="_searchString"
                          Immediate="true"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Outlined.Search"/>
        </div>
    </MudContainer>

    <MudTable T="ILearningContentFormModel"
              Items="WorldPresenter.GetAllContent().Select(vm => Mapper.Map<ILearningContentFormModel>(vm))"
              Hover="true"
              Height="450px"
              Breakpoint="Breakpoint.Sm"
              RowClass="cursor-pointer"
              OnRowClick="RowClickEvent"
              Filter="Filter"
              RowClassFunc="@SelectedRowClassFunc" 
              FixedHeader="true" 
              Elevation="0"
              HeaderClass="cursor-default">
    
        <HeaderContent>
            <MudTh Class="bg-adlerbgbright pa-1"></MudTh>
            <MudTh Class="bg-adlerbgbright text-adlerdarkblue-800 font-bold pa-1">Name</MudTh>
            <MudTh Class="bg-adlerbgbright text-adlerdarkblue-800 font-bold pa-1">@Localizer["LearningContentDialog.LearningMaterial.Type"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="py-0 px-2">
                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                               Class="show-content-preview"
                               title="@Localizer["LearningContentDialog.LearningMaterial.Preview"]"/>
            </MudTd>
            <MudTd Class="p-0 w-full" DataLabel="Name">
                <MudTooltip Text="@context.Name"
                            Arrow="true"
                            Placement="Placement.Right"
                            Class="bg-adlergrey-200 shadow-xl text-adlergrey-800"
                            Duration="Double.Epsilon">
                    <p style="color:@(IsNameDisabled(context) ? "#a0a0a0" : "inherit"); cursor:@(IsNameDisabled(context) ? "default" : "pointer")"
                       class="pt-2 max-w-full">
                        @context.Name
                    </p>
                </MudTooltip>
            </MudTd>
            <MudTd Class="p-0 cursor-default" DataLabel="Type">
                @if (context is FileContentFormModel fileContentContext)
                {
                    <div style="display: flex; align-items: center; gap: 8px;">
                        <span>@fileContentContext.Type</span>

                        @if (fileContentContext.Type == "h5p")
                        {
                            <H5PStateIcon State="@fileContentContext.H5PState" />
                        }
                    </div>
                }
                else
                {
                    <span>Link</span>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</div>


@code {
    [CascadingParameter] public IMudDialogInstance? MudDialog { get; set; }

    [Parameter, EditorRequired] public ILearningContentFormModel? LearningContent { get; set; }
    
    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<LearningContentDialog> Localizer { get; set; }

    [Inject, AllowNull] internal ILearningWorldPresenter WorldPresenter { get; set; }

    [Inject, AllowNull] internal IMapper Mapper { get; set; }

    private string? _searchString;

    
    private bool IsNameDisabled(ILearningContentFormModel item)
    {
        if (item is FileContentFormModel file)
        {
            return file.Type == "h5p" && 
                   !(file.H5PState == H5PContentState.Completable || file.H5PState == H5PContentState.Primitive);
        }
        return false;
    }
    private void RowClickEvent(TableRowClickEventArgs<ILearningContentFormModel> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs.Item is FileContentFormModel fileContent)
        {
            if (fileContent.Type == "h5p" &&
                (fileContent.H5PState == H5PContentState.Completable || fileContent.H5PState == H5PContentState.Primitive))
            {
                MudDialog?.Close(DialogResult.Ok(tableRowClickEventArgs.Item));
            }
        }
        else
        {
            MudDialog?.Close(DialogResult.Ok(tableRowClickEventArgs.Item));
        }
    }

    private string SelectedRowClassFunc(ILearningContentFormModel element, int rowNumber)
    {
        return element.Equals(LearningContent) ? "bg-adlerblue-200" : string.Empty;
    }

    private bool Filter(ILearningContentFormModel element) =>
        FilterInternal(element, _searchString);

    private bool FilterInternal(ILearningContentFormModel element, string? searchString) => FilterInternal(ILearningContentFormModel.GetSearchableStrings(element), searchString);

    private bool FilterInternal(IEnumerable<string> searchableStrings, string? searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) || searchableStrings.Any(str => str.ToLowerInvariant().Contains(searchString.ToLower()));
    }

}