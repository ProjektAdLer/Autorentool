@using System.Diagnostics.CodeAnalysis
@using AutoMapper
@using Microsoft.Extensions.Localization
@using Presentation.Components.ContentFiles
@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.LearningWorld
@using Shared.H5P
@using Presentation.H5P
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent.FileContent


@using Presentation.PresentationLogic.LearningContent
@inherits MudBaseInput<ILearningContentFormModel>

@inject NavigationManager Navigation

<p class="text-sm px-6 cursor-default">@Localizer["LearningContentDialog.LearningMaterial.Dialog.Subtitle"]</p>
<div class="rounded border-4 border-adlergrey-200 m-4">
    <MudContainer Class="flex justify-end bg-adlerbgbright">
        <div class="pb-2 px-2 w-80 bg-adlerbgbright">
            <MudTextField @bind-Value="_searchString"
                          Immediate="true"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Outlined.Search"
                          Placeholder="@Localizer["LearningContentDialog.Search.Placeholder"]"/>
        </div>
    </MudContainer>

    <MudTable T="ILearningContentFormModel"
              Items="WorldPresenter.GetAllContent().Select(vm => Mapper.Map<ILearningContentFormModel>(vm))"
              Hover="true"
              Height="450px"
              Breakpoint="Breakpoint.Sm"
              RowClass="cursor-pointer"
              OnRowClick="RowClickEvent"
              Filter="Filter"
              RowClassFunc="@SelectedRowClassFunc" 
              FixedHeader="true" 
              Elevation="0"
              HeaderClass="cursor-default">
    
        <HeaderContent>
            <MudTh Class="bg-adlerbgbright pa-1"></MudTh>
            <MudTh Class="bg-adlerbgbright text-adlerdarkblue-800 font-bold pa-1">
                @Localizer["LearningContentDialog.LearningMaterial.Name"]
            </MudTh>
            <MudTh Class="bg-adlerbgbright text-adlerdarkblue-800 font-bold pa-1">
                @Localizer["LearningContentDialog.LearningMaterial.Type"]
            </MudTh>
            <MudTh Class="bg-adlerbgbright text-adlerdarkblue-800 font-bold pa-1" Style="width: 25%;">
                <MudTableSortLabel SortBy="new Func<ILearningContentFormModel, object>(SortByH5pState)">
                    @Localizer["LearningContentDialog.LearningMaterial.State"]
                </MudTableSortLabel>
            </MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd Class="py-0 px-2">
                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                               Class="show-content-preview"
                               OnClick="() => ShowLearningContent(context)"
                               title="@Localizer["LearningContentDialog.LearningMaterial.Preview"]"/>
            </MudTd>

            <MudTd Class="p-0 w-full" DataLabel='@Localizer["LearningContentDialog.LearningMaterial.Name"]'>
                <div style="cursor:@(IsNameDisabled(context) ? "not-allowed" : "pointer")">
                    <MudTooltip Text="@context.Name"
                                Arrow="true"
                                Placement="Placement.Right"
                                Class="bg-adlergrey-200 shadow-xl text-adlergrey-800"
                                Duration="Double.Epsilon">
                        <p style="color:@(IsNameDisabled(context) ? "#a0a0a0" : "inherit");"
                           class="pt-2 max-w-[98%] overflow-hidden text-ellipsis">
                            @context.Name
                        </p>
                    </MudTooltip>
                </div>
            </MudTd>

            <MudTd Class="p-0 cursor-default" DataLabel='@Localizer["LearningContentDialog.LearningMaterial.Type"]'>
                @if (context is FileContentFormModel fileContentContext)
                {
                    <div class="flex flex-row items-center justify-start">
                        <span class="w-12 text-sm">
                            @((fileContentContext.Type?.ToLowerInvariant()) switch
                              {
                                  "h5p"  => "h5p",  // keep technical type for h5p
                                  "video"=> Localizer["LearningContentDialog.Type.Video"],
                                  _      => Localizer["LearningContentDialog.Type.Other"]  // fallback
                              })
                        </span>
                    </div>
                }
                else
                {
                    <div class="flex flex-row items-center justify-start">
                        <span class="w-12 text-sm">@Localizer["LearningContentDialog.Type.Video"]</span>
                    </div>
                }
            </MudTd>

            <MudTd Class="p-0 cursor-default" DataLabel='@Localizer["LearningContentDialog.LearningMaterial.State"]'>
                @if (context is FileContentFormModel fileContentContext2)
                {
                    if (fileContentContext2.Type == "h5p")
                    {
                        <H5PStateIcon FileContentVm="@FileContentFormModelToViewModel((FileContentFormModel)context)"/>
                    }
                    else
                    {
                        <MudTooltip Text='@Localizer["LearningContentDialog.State.Usable"]'>
                            <div class="flex flex-row items-center justify-start gap-1" aria-label='@Localizer["LearningContentDialog.State.Usable"]'>
                                @((MarkupString)H5PStateIcon.InlineSvg(H5PStateIcon.Svg.Lockable))
                                <p class="text-xs text-adlergrey">@Localizer["LearningContentDialog.State.Usable"]</p>
                            </div>
                        </MudTooltip>
                    }
                }
                else
                {
                    <div class="flex flex-row items-center justify-start">
                        <MudTooltip Text='@Localizer["LearningContentDialog.State.Usable"]'>
                            <div class="flex flex-row items-center justify-start gap-1" aria-label='@Localizer["LearningContentDialog.State.Usable"]'>
                                @((MarkupString)H5PStateIcon.InlineSvg(H5PStateIcon.Svg.Lockable))
                                <p class="text-xs text-adlergrey">@Localizer["LearningContentDialog.State.Usable"]</p>
                            </div>
                        </MudTooltip>
                    </div>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</div>

@code {
    [CascadingParameter] public IMudDialogInstance? MudDialog { get; set; }

    [Parameter, EditorRequired] public ILearningContentFormModel? LearningContent { get; set; }
    
    [Inject, AllowNull] internal IStringLocalizer<LearningContentDialog> Localizer { get; set; }
    [Inject, AllowNull] internal ILearningWorldPresenter WorldPresenter { get; set; }
    [Inject, AllowNull] internal IMapper Mapper { get; set; }

    private string? _searchString;

    private bool IsNameDisabled(ILearningContentFormModel item)
    {
        if (item is FileContentFormModel file)
            return file.Type == "h5p" && !(file.H5PState == H5PContentState.Completable || file.H5PState == H5PContentState.Primitive);
        return false;
    }

    private void RowClickEvent(TableRowClickEventArgs<ILearningContentFormModel> e)
    {
        if (e.Item is FileContentFormModel fileContent)
        {
            if (fileContent.Type == "h5p" &&
                (fileContent.H5PState == H5PContentState.Completable || fileContent.H5PState == H5PContentState.Primitive))
                MudDialog?.Close(DialogResult.Ok(e.Item));
            else if (fileContent.Type != "h5p")
                MudDialog?.Close(DialogResult.Ok(e.Item));
        }
        else MudDialog?.Close(DialogResult.Ok(e.Item));
    }

    private string SelectedRowClassFunc(ILearningContentFormModel element, int rowNumber)
        => element.Equals(LearningContent) ? "bg-adlerblue-200" : string.Empty;

    private bool Filter(ILearningContentFormModel element) => FilterInternal(element, _searchString);
    private bool FilterInternal(ILearningContentFormModel element, string? s) => FilterInternal(ILearningContentFormModel.GetSearchableStrings(element), s);
    private bool FilterInternal(IEnumerable<string> strings, string? s)
        => string.IsNullOrWhiteSpace(s) || strings.Any(str => str.ToLowerInvariant().Contains(s.ToLower()));

    [Inject, AllowNull] internal IH5PPlayerPluginManager H5PPlayerPluginManager { get; set; }
    [Inject, AllowNull] internal IPresentationLogic PresentationLogic { get; set; }

    private async Task ShowLearningContent(ILearningContentFormModel context)
    {
        if (context is FileContentFormModel fileContentFm && fileContentFm.Type == "h5p")
        {
            var fileContentVm = FileContentFormModelToViewModel(fileContentFm);
            var startH5PPlayerTO = new StartH5PPlayerTO { FileContentVm = fileContentVm, NavigationManager = Navigation };
            await H5PPlayerPluginManager.StartH5pPlayerToValidateAsync(startH5PPlayerTO);
        }
        else
        {
            await PresentationLogic.ShowLearningContentAsync(context);
        }
    }

    private IFileContentViewModel FileContentFormModelToViewModel(FileContentFormModel fileContentFm)
    {
        var vm = new FileContentViewModel(fileContentFm.Name, fileContentFm.Type, fileContentFm.Filepath)
        {
            H5PState = fileContentFm.H5PState,
            IsH5P = true
        };
        return vm;
    }
    
    private object SortByH5pState(ILearningContentFormModel context)
        => (context is FileContentFormModel f && f.Type == "h5p") ? f.H5PState : H5PContentState.Completable;
}