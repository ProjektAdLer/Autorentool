@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using BusinessLogic.Entities.LearningContent
@using AutoMapper
@using Microsoft.Extensions.Localization
@using Presentation.Components.ContentFiles
@using Presentation.Components.Forms.Buttons
<BaseForm TForm="LinkContentFormModel" TEntity="LinkContent" OnValidSubmit="OnValidSubmit"
          SnackbarMessage=@Localizer["SnackBarMessage.LinkAdded"] FormDataContainer="FormDataContainer">
    <Fields>
        <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                      For="@(() => FormModel.Name)"
                      Immediate="true"
                      DebounceInterval="300"
                      Label="@nameof(FormDataContainer.FormModel.Name)"/>
        <MudTextField @bind-Value="FormDataContainer.FormModel.Link"
                      For="@(() => FormModel.Link)"
                      Immediate="true"
                      DebounceInterval="300"
                      Label="@nameof(FormDataContainer.FormModel.Link)"/>
    </Fields>
    <FooterButtons>
        <DefaultSubmitButton/>
        <DefaultResetButton/>
    </FooterButtons>
</BaseForm>
@code {
    
    [Inject]
    private IFormDataContainer<LinkContentFormModel, LinkContent> FormDataContainer { get; set; }
    [Inject]
    private IPresentationLogic PresentationLogic { get; set; }
    [Inject]
    private IMapper Mapper { get; set; }
    [Inject]
    private StringLocalizer<AddLinkForm> Localizer { get; set; }

    [CascadingParameter]
    public ContentFilesContainer ContentFilesContainer { get; set; }
    
    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LinkContentFormModel FormModel => FormDataContainer.FormModel;

    private void OnValidSubmit(LinkContentFormModel model)
    {
        PresentationLogic.SaveLink(Mapper.Map<LinkContentViewModel>(model));
        ContentFilesContainer.RerenderAsync();
    }

}