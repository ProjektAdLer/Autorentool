@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using BusinessLogic.Entities.LearningContent.LinkContent
@using AutoMapper
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@using System.Runtime.Serialization
@using Presentation.Components.Forms.Buttons

<BaseForm TForm="LinkContentFormModel" TEntity="LinkContent" OnValidSubmit="OnValidSubmit" @ref="_form"
          SnackbarMessage=@Localizer["AddLinkForm.SnackbarMessage"] FormDataContainer="FormDataContainer">
    <Fields>
        <div class="px-3">
            <p class="text-[12px] text-justify pb-2">@Localizer["AddLinkForm.Info.Text"]
                <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed">
                    <TooltipContent>
                        <MudText Class="cursor-default text-xs">@Localizer["AddLinkForm.Info.Infotext"]</MudText>
                    </TooltipContent>
                    <ChildContent>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey-500 hover:text-adlerdarkblue"></MudIcon>
                    </ChildContent>
                </MudTooltip>
            </p>
 
            <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                          For="@(() => FormModel.Name)"
                          DebounceInterval="DebounceInterval"
                          OnKeyUp="HandleKeyEvent"
                          Placeholder="@Localizer["AddLinkForm.Field.Name.Text"]"
                          Margin="Margin.Dense"
                          Style="margin-top: 0px;">
            </MudTextField>
            <MudTextField @bind-Value="FormDataContainer.FormModel.Link"
                          Variant="Variant.Text"
                          For="@(() => FormModel.Link)"
                          DebounceInterval="DebounceInterval"
                          OnKeyUp="HandleKeyEvent"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Link"
                          Placeholder="@Localizer["AddLinkForm.Field.Link.Text"]"
                          Margin="Margin.Dense"
                          Style="margin-top: 0px;">
            </MudTextField>
        </div>
    </Fields>
    
    <FooterButtons>
        <DefaultSubmitButton/>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LinkContentFormModel, LinkContent> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<AddLinkForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IErrorService ErrorService { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;

    [CascadingParameter(Name = "RerenderContentContainer")]
    public Func<Task>? RerenderContentContainer { get; set; }

    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LinkContentFormModel FormModel => FormDataContainer.FormModel;

    private BaseForm<LinkContentFormModel, LinkContent> _form = null!;

    private async Task OnValidSubmit(LinkContentFormModel model)
    {
        try
        {
            PresentationLogic.SaveLink(Mapper.Map<LinkContentViewModel>(model));
        }
        catch (SerializationException e)
        {
            ErrorService.SetError(@Localizer["AddLinkForm.Field.Link.ErrorMessage"], e.Message);
        }
        if (RerenderContentContainer is not null)
            await RerenderContentContainer();
    }

    private async Task HandleKeyEvent(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
        {
            await _form.SubmitAsync();
        }
    }

}