@using Presentation.Components.Forms.Models
@using Presentation.Components.Forms.Buttons
@using BusinessLogic.Entities.LearningContent
@using Presentation.Components.ContentFiles
@using Presentation.PresentationLogic.API
@using AutoMapper
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.LearningContent
<BaseForm TForm="LinkContentFormModel" TEntity="LinkContent" OnValidSubmit="OnValidSubmit"
          SnackbarMessage=@Localizer["AddLinkForm.SnackbarMessage"] FormDataContainer="FormDataContainer">
    <Fields>
        <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                      For="@(() => FormModel.Name)"
                      DebounceInterval="DebounceInterval"
                      Label=@Localizer["AddLinkForm.Field.Name.Text"]/>
        <MudTextField @bind-Value="FormDataContainer.FormModel.Link"
                      For="@(() => FormModel.Link)"
                      DebounceInterval="DebounceInterval"
                      Label=@Localizer["AddLinkForm.Field.Link.Text"]/>
    </Fields>
    <FooterButtons>
        <DefaultSubmitButton/>
        <DefaultResetButton/>
    </FooterButtons>
</BaseForm>

@code {

    [Inject]
    internal IFormDataContainer<LinkContentFormModel, LinkContent> FormDataContainer { get; set; }

    [Inject]
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject]
    internal IMapper Mapper { get; set; }

    [Inject]
    internal IStringLocalizer<AddLinkForm> Localizer { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;

    [CascadingParameter(Name = "RerenderContentContainer")]
    public Func<Task> RerenderContentContainer { get; set; }

    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LinkContentFormModel FormModel => FormDataContainer.FormModel;

    private async Task OnValidSubmit(LinkContentFormModel model)
    {
        PresentationLogic.SaveLink(Mapper.Map<LinkContentViewModel>(model));
        await RerenderContentContainer();
    }

}