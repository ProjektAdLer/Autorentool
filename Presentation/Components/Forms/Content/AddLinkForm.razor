@using Presentation.Components.Forms.Models
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningContent
@using BusinessLogic.Entities.LearningContent.LinkContent
@using AutoMapper
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
@using System.Runtime.Serialization
@using Presentation.Components.Forms.Buttons
@using Presentation.PresentationLogic.LearningContent.LinkContent

<BaseForm TForm="LinkContentFormModel" TEntity="LinkContent" OnValidSubmit="OnValidSubmit"
          SnackbarMessage=@Localizer["AddLinkForm.SnackbarMessage"] FormDataContainer="FormDataContainer">
    <Fields>
        <MudText Typo="Typo.caption">@Localizer["AddLinkForm.Info.Text"]</MudText>
        <MudTextField @bind-Value="FormDataContainer.FormModel.Name"
                      For="@(() => FormModel.Name)"
                      DebounceInterval="DebounceInterval"
                      Label="@Localizer["AddLinkForm.Field.Name.Text"]"/>
        <MudTextField @bind-Value="FormDataContainer.FormModel.Link"
                      For="@(() => FormModel.Link)"
                      DebounceInterval="DebounceInterval"
                      Label="@Localizer["AddLinkForm.Field.Link.Text"]"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Link"/>
    </Fields>
    <FooterButtons>
        <DefaultSubmitButton/>
        <DefaultResetButton/>
    </FooterButtons>
</BaseForm>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IFormDataContainer<LinkContentFormModel, LinkContent> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IStringLocalizer<AddLinkForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    internal IErrorService ErrorService { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;

    [CascadingParameter(Name = "RerenderContentContainer")]
    public Func<Task>? RerenderContentContainer { get; set; }

    //this indirection is necessary for the `For` attribute on the form fields to work properly when validating the form
    //please DO NOT REFACTOR THIS - n.stich
    private LinkContentFormModel FormModel => FormDataContainer.FormModel;

    private async Task OnValidSubmit(LinkContentFormModel model)
    {
        try
        {
            PresentationLogic.SaveLink(Mapper.Map<LinkContentViewModel>(model));
        }
        catch (SerializationException e)
        {
            ErrorService.SetError("Error while adding link", e.Message);
        }
        if (RerenderContentContainer is not null)
            await RerenderContentContainer();
    }

}