@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.LearningSpace
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis

<div class="px-4 pb-6">
    <div class="flex flex-col px-1">
        <p class="cursor-default text-lg text-adlertextgrey font-bold">@Localizer["LearningOutcomesWorldOverview.Title"]</p>
    </div>
    
    @if (!IsAnyOutcomeInWorld())
    {
        <div class="flex justify-center items-center p-4 bg-adlerbgbright border border-adlergrey-100 rounded">
            <p class="opacity-80 cursor-default pl-1 text-base font-bold text-adlertextgrey">@Localizer["LearningOutcomesWorldOverview.NoOutcome"]</p>
        </div>
    }
    
    else 
    {
        <p class="pl-1 pb-2 cursor-default">@Localizer["LearningOutcomesWorldOverview.Text.Part1"] <span class="font-bold text-adlertextgrey cursor-default">@LearningWorld.Name</span></p>
        <div class="max-h-[500px] overflow-y-scroll py-2 bg-adlerbgbright rounded border border-adlergrey-200">
        @foreach (var learningSpace in LearningWorld.LearningSpaces)
        {
            <div class="flex flex-row items-center">
                <span @onclick="() => ToggleLearningSpace(learningSpace)">
                    <MudIconButton Class="p-2" Size="Size.Small"
                                   OnClick="() => ToggleLearningSpace(learningSpace)"
                                   Icon="@(GetSpaceToggleIcon(learningSpace))"/>
                </span>
                <span>
                    <div class="flex flex-row gap-2 items-center">
                        <MudIcon Class="w-6 h-6 2xl:w-8 2xl:h-8" Icon="@SpaceIcon"></MudIcon>
                        <p class="cursor-default break-words font-bold text-adlertextgrey">@learningSpace.Name</p>
                    </div>
                </span>
            </div>
            @if (IsLearningSpaceExpanded(learningSpace))
            {
                @foreach (var outcome in learningSpace.LearningOutcomeCollection.LearningOutcomes)
                {
                    <div class="py-2 px-4">
                        <ul class="list-disc list-outside pl-16 mx-4">
                            <li class="cursor-default text-xs 2xl:text-sm text-justify marker:text-adlergrey break-words">@outcome.GetOutcome()</li>
                        </ul>
                    </div>
                    
                }
            }
        }
    </div>
    }
    
</div>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types - n.stich
    private IStringLocalizer<LearningOutcomesWorldOverview> Localizer { get; set; }
    
    [Parameter, EditorRequired]
    public ILearningWorldViewModel LearningWorld { get; set; } = null!;

    private static string SpaceIcon { get; set; } = CustomIcons.SpaceIcon;

    private IDictionary<ILearningSpaceViewModel, bool> ExpandedLearningSpaces { get; set; } = new Dictionary<ILearningSpaceViewModel, bool>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateExpandedLearningSpaces();
    }

    private bool IsAnyOutcomeInWorld()
    {
        return LearningWorld.LearningSpaces.Any(x => x.LearningOutcomeCollection.LearningOutcomes.Count() > 0);
    }

    private void UpdateExpandedLearningSpaces()
    {
        ExpandedLearningSpaces.Clear();
        foreach (var learningSpace in LearningWorld.LearningSpaces)
        {
            var initialOpen = learningSpace.LearningOutcomeCollection.LearningOutcomes.Any();
            ExpandedLearningSpaces.Add(learningSpace, initialOpen);
        }
    }

    private string GetSpaceToggleIcon(ILearningSpaceViewModel space)
    {
        return IsLearningSpaceExpanded(space) ? Icons.Material.Filled.KeyboardArrowDown : Icons.Material.Filled.KeyboardArrowRight;
    }

    private void ToggleLearningSpace(ILearningSpaceViewModel learningSpace)
    {
        ExpandedLearningSpaces[learningSpace] = !ExpandedLearningSpaces[learningSpace];
        InvokeAsync(StateHasChanged);
    }

    private bool IsLearningSpaceExpanded(ILearningSpaceViewModel learningSpace)
    {
        return ExpandedLearningSpaces[learningSpace];
    }

}