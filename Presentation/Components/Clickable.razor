@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using BusinessLogic.Entities
@inject IMouseService MouseSrv;
@typeparam T
<g @onmousedown="OnDown" @onmousedown:stopPropagation="true">
    @ChildContent
</g>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    [Parameter] public EventCallback<T> OnClicked { get; set; }
    
    [Parameter, EditorRequired] public T? OnClickedParam { get; set; }
    
    private bool _isDown;
    private bool _hasMoved;

    private Task OnClick(object? sender, MouseEventArgs e)
    {
        return OnClicked.InvokeAsync(OnClickedParam);
    }

    protected override void OnInitialized()
    {
        MouseSrv.OnMove += OnMove;
        MouseSrv.OnUp += OnUp;
        base.OnInitialized();
    }
    
    private void OnDown(MouseEventArgs e)
    {
        _isDown = true;
        _hasMoved = false;
    }
    
    private void OnUp(object? sender, MouseEventArgs e)
    {
        if (_isDown && !_hasMoved)
        {
            OnClick(sender, e);
        }
        _isDown = false;
    }
    
    private void OnMove(object? sender, MouseEventArgs e)
    {
        if (!_isDown) return;
        _hasMoved = true;
    }
}