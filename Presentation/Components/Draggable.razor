@inject IMouseService MouseService
@inject ILogger<Draggable<T>> Logger;
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic
@implements IDisposable
@typeparam T

<g transform="translate(@X, @Y)" @onmousedown="OnDown" cursor="@_cursor" @onmousedown:stopPropagation="true">
    @ChildContent
</g>

@code {
    ///Code from https://github.com/AlexeyBoiko/BlazorDraggableDemo
    //get (optional) child html content as a RenderFragment
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    //fields bound to translate vector of <g> element
    //make these nullable so we can have parent set them once via Parameter X and Y


    [Parameter, EditorRequired]
    public T? LearningObject { get; set; }

    [Parameter]
    public double X { get; set; }

    [Parameter]
    public double Y { get; set; }
    
    //we need these lines for @bind-X and @bind-Y to work, even if they look like we don't use them anywhere
    [Parameter]
    public EventCallback<double> XChanged { get; set; }

    [Parameter]
    public EventCallback<double> YChanged { get; set; }
    
    [Parameter]
    public EventCallback<T> OnClicked { get; set; }

    //cursorX and cursorY are used to remove the offset between cursor and element on move, so we only get a delta
    private double _cursorX;
    private double _cursorY;

    private bool _isDown;
    private string _cursor = "grab";
    private bool _hasMoved;


    //This is called after component has received initial parameters in SetParametersAsync
    protected override void OnInitialized()
    {
        MouseService.OnMove += OnMove;
        MouseService.OnUp += OnUpOrOut;
        MouseService.OnOut += OnUpOrOut;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (LearningObject == null)
        {
            throw new ArgumentNullException(nameof(LearningObject));
        }
    }

    private void OnDown(MouseEventArgs e)
    {
        _cursorX = e.ClientX;
        _cursorY = e.ClientY;
        _isDown = true;
        _cursor = "grabbing";
        _hasMoved = false;
    }

    private void OnUpOrOut(object? sender, MouseEventArgs e)
    {
        if (_isDown && !_hasMoved)
        {
            OnClick(sender, e);
        }
        _isDown = false;
        _cursor = "grab";
    }

    private void OnMove(object? sender, MouseEventArgs e)
    {
        if (!_isDown) return;
        X -= _cursorX - e.ClientX;
        Y -= _cursorY - e.ClientY;

        _cursorX = e.ClientX;
        _cursorY = e.ClientY;
        
        XChanged.InvokeAsync(X);
        YChanged.InvokeAsync(Y);

        _hasMoved = true;
    }

    private Task OnClick(object? sender, MouseEventArgs e)
    {
        Logger.LogDebug("OnClick");
        //override nullability because we check in OnParametersSet - n.stich
        Logger.LogDebug("e.OffsetX:{EOffsetX} e.OffsetY:{EOffsetY}", e.OffsetX, e.OffsetY);
        return OnClicked.InvokeAsync(LearningObject);
    }

    public void Dispose()
    {
        MouseService.OnMove -= OnMove;
        MouseService.OnUp -= OnUpOrOut;
        MouseService.OnOut -= OnUpOrOut;
    }

}