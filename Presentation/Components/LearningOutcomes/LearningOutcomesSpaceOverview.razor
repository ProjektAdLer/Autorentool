@using Presentation.PresentationLogic.LearningSpace.LearningOutcomeViewModel
@using Presentation.PresentationLogic.API
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
<div class="pb-4">
    <div class="flex flex-col gap-4">
        <p class="cursor-default text-lg mx-6">@Localizer["LearningOutcomesOverview.Title"]</p>
        <p class="cursor-default text-sm 2xl:text-base mx-6">@Localizer["LearningOutcomesOverview.Text"]</p>
    </div>

    <div class="flex flex-col justify-center items-center py-4">
        <MudButton Class="w-80 btn-standard" Variant="Variant.Filled" OnClick="CreateStructuredLearningOutcome">@Localizer["LearningOutcomesOverview.Button.Structured"]</MudButton>
        <MudButton Class="w-80 btn-standard" Variant="Variant.Filled" OnClick="CreateManualLearningOutcome">@Localizer["LearningOutcomesOverview.Button.Manual"]</MudButton>
    </div>

    @if (LearningOutcomeCollection.LearningOutcomes.Count > 0)
    {
        <div class="h-[320px]">
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <p class="cursor-default text-sm mx-6 py-4 font-bold">@Localizer["LearningOutcomesOverview.Overview.Subtitle"]</p>

            <div class="h-[260px] max-w-full overflow-y-scroll border-2 border-adlergrey-100 rounded mx-6">
                @foreach (var learningOutcome in LearningOutcomeCollection.LearningOutcomes)
                {
                    <div class="mx-2 p-4">
                        <ul class="list-disc list-outside">
                            <li class="cursor-default text-sm text-justify">@learningOutcome.GetOutcome()</li>
                        </ul>
                        <div class="flex flex-row gap-2">
                            <MudIconButton Class="p-2" Size="Size.Small" OnClick="() => EditLearningOutcome(learningOutcome)" Icon="@Icons.Material.Filled.Edit" Title="Lernziel bearbeiten"/>
                            <MudIconButton Class="p-2" Size="Size.Small" OnClick="() => DeleteLearningOutcome(learningOutcome)" Icon="@Icons.Material.Filled.Delete" Title="Lernziel lÃ¶schen"/>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired] public LearningOutcomeCollectionViewModel LearningOutcomeCollection { get; set; } = null!;

    [Inject, AllowNull] private IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IStringLocalizer<LearningOutcomesSpaceOverview> Localizer { get; set; }

    private async Task CreateManualLearningOutcome()
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };

        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditManualLearningOutcome.LearningOutcomeCollection), LearningOutcomeCollection }
        };
        var dialogReference = await DialogService.ShowAsync<CreateEditManualLearningOutcome>("", dialogParameters, options);
        await dialogReference.Result;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateStructuredLearningOutcome()
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };

        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditStructuredLearningOutcome.LearningOutcomes), LearningOutcomeCollection }
        };
        var dialogReference = await DialogService.ShowAsync<CreateEditStructuredLearningOutcome>("", dialogParameters, options);
        await dialogReference.Result;
        await InvokeAsync(StateHasChanged);
    }

    private async Task EditLearningOutcome(ILearningOutcomeViewModel learningOutcome)
    {
        switch (learningOutcome)
        {
            case ManualLearningOutcomeViewModel manualLearningOutcomeViewModel:
                await EditManualLearningOutcome(manualLearningOutcomeViewModel);
                break;
            case StructuredLearningOutcomeViewModel structuredLearningOutcomeViewModel:
                await EditStructuredLearningOutcome(structuredLearningOutcomeViewModel);
                break;
        }
    }

    private async Task EditStructuredLearningOutcome(StructuredLearningOutcomeViewModel structuredLearningOutcomeViewModel)
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };

        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditStructuredLearningOutcome.LearningOutcomes), LearningOutcomeCollection },
            { nameof(CreateEditStructuredLearningOutcome.CurrentLearningOutcome), structuredLearningOutcomeViewModel }
        };
        var dialogReference = await DialogService.ShowAsync<CreateEditStructuredLearningOutcome>("", dialogParameters, options);
        await dialogReference.Result;
        await InvokeAsync(StateHasChanged);
    }

    private async Task EditManualLearningOutcome(ManualLearningOutcomeViewModel manualLearningOutcomeViewModel)
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };

        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditManualLearningOutcome.LearningOutcomeCollection), LearningOutcomeCollection },
            { nameof(CreateEditManualLearningOutcome.CurrentManualLearningOutcome), manualLearningOutcomeViewModel }
        };
        var dialogReference = await DialogService.ShowAsync<CreateEditManualLearningOutcome>("", dialogParameters, options);
        await dialogReference.Result;
        await InvokeAsync(StateHasChanged);
    }

    private void DeleteLearningOutcome(ILearningOutcomeViewModel learningOutcome)
    {
        PresentationLogic.DeleteLearningOutcome(LearningOutcomeCollection, learningOutcome);
        InvokeAsync(StateHasChanged);
    }

}