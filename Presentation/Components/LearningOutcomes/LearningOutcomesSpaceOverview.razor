@using Presentation.PresentationLogic.LearningSpace.LearningOutcomeViewModel
@using Microsoft.Extensions.Localization
@using System.Diagnostics.CodeAnalysis
<div class="pb-4">
    <div class="flex flex-col gap-4">
        <p class="cursor-default text-lg mx-6">@Localizer["LearningOutcomesSpaceOverview.Title"]</p>
        <p class="cursor-default text-sm 2xl:text-base mx-6">@Localizer["LearningOutcomesSpaceOverview.Text"]</p>
    </div>

    <div class="flex flex-col justify-center items-center py-4">
        <MudButton Class="w-80 btn-standard create-structured-outcome" Variant="Variant.Filled" OnClick="CreateStructuredLearningOutcome">
            @Localizer["LearningOutcomesSpaceOverview.Button.Structured"]
        </MudButton>
        <MudButton Class="w-80 btn-standard create-manual-outcome" Variant="Variant.Filled" OnClick="CreateManualLearningOutcome">
            @Localizer["LearningOutcomesSpaceOverview.Button.Manual"]
        </MudButton>
    </div>

    @if (LearningOutcomeCollection.LearningOutcomes.Count > 0)
    {
        <div class="h-[320px] outcomes">
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <p class="cursor-default text-sm mx-6 py-4 font-bold">@Localizer["LearningOutcomesSpaceOverview.Overview.Subtitle"]</p>

            <div class="h-[260px] max-w-full overflow-y-scroll border-2 border-adlergrey-100 rounded mx-6 bg-adlerbgbright outcomes-inner">
                @foreach (var learningOutcome in LearningOutcomeCollection.LearningOutcomes)
                {
                    <LearningOutcomeItem LearningOutcome="learningOutcome" LearningOutcomeCollection="LearningOutcomeCollection" />
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired] public LearningOutcomeCollectionViewModel LearningOutcomeCollection { get; set; } = null!;

    [Inject, AllowNull] internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IStringLocalizer<LearningOutcomesSpaceOverview> Localizer { get; set; }


    protected override void OnInitialized()
    {
        LearningOutcomeCollection.LearningOutcomes.CollectionChanged += (s, e) =>
        {
            InvokeAsync(StateHasChanged);
        };

        base.OnInitialized();
    }

    private async Task CreateManualLearningOutcome()
    {
        var options = new DialogOptions
        {
            BackdropClick = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };

        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditManualLearningOutcome.LearningOutcomeCollection), LearningOutcomeCollection }
        };
        var dialogReference = await DialogService.ShowAsync<CreateEditManualLearningOutcome>("", dialogParameters, options);
        await dialogReference.Result;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateStructuredLearningOutcome()
    {
        var options = new DialogOptions
        {
            BackdropClick = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true,
        };

        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditStructuredLearningOutcome.LearningOutcomes), LearningOutcomeCollection }
        };
        var dialogReference = await DialogService.ShowAsync<CreateEditStructuredLearningOutcome>("", dialogParameters, options);
        await dialogReference.Result;
        await InvokeAsync(StateHasChanged);
    }

}