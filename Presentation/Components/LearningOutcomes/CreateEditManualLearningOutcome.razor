@using Presentation.PresentationLogic.LearningSpace.LearningOutcomeViewModel
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.API
@using System.Diagnostics.CodeAnalysis
<p class="cursor-default text-lg ml-7">
    @Localizer["CreateEditManualLearningOutcome.Title.Part1"]<span class="cursor-default font-bold text-adlertextgrey">@Localizer["CreateEditManualLearningOutcome.Title.Part2"]</span>
</p>

<div class="relative max-w-full h-[300px] flex flex-col m-4">
    <MudText Class="cursor-default px-3 text-sm">@Localizer["CreateEditManualLearningOutcome.Text"]</MudText>
    <div class="border-adlergrey-200 border-4 rounded m-2 bg-adlerbgbright">
        <MudForm @ref="_form" Class="bg-adlerbgbright border-t-2 border-adlergrey-100">
            <div class="m-2 mb-4 bg-adlerbgbright">
                <MudText Class="cursor-default font-bold text-sm pl-2">@Localizer["CreateEditManualLearningOutcome.Subtitle"]</MudText>
                <div class="border-4 border-adlergrey-100 bg-white rounded-md m-1.5">
                    <MudTextField Variant="Variant.Outlined"
                                  Class="shadow-none m-0"
                                  T="string"
                                  Placeholder="@Localizer["CreateEditManualLearningOutcome.Placeholder"]"
                                  @bind-Value="_outcome"
                                  Lines="4"
                                  Required="true"
                                  RequiredError="@Localizer["CreateEditManualLearningOutcome.RequiredError"]"/>
                </div>
            </div>
        </MudForm>
    </div>
    <div class="flex justify-end items-center mt-2">
        <MudButton Class="btn-standard sticky"
                   @onclick="SubmitAsync">
            @(CurrentManualLearningOutcome == null ? Localizer["CreateEditManualLearningOutcome.Button.Create"] : Localizer["CreateEditManualLearningOutcome.Button.Edit"])
        </MudButton>
    </div>
</div>


@code {
    private MudForm _form = null!;
    private string _outcome = null!; //set in OnParametersSet

    [Parameter, EditorRequired, AllowNull] public LearningOutcomeCollectionViewModel LearningOutcomeCollection { get; set; }

    [Parameter] public ManualLearningOutcomeViewModel? CurrentManualLearningOutcome { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IStringLocalizer<CreateEditManualLearningOutcome> Localizer { get; set; }

    [CascadingParameter, AllowNull] //injected by MudDialog
    public IMudDialogInstance DialogInstance { get; set; }

    [Inject, AllowNull] internal IPresentationLogic PresentationLogic { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _outcome = CurrentManualLearningOutcome?.GetOutcome() ?? string.Empty;
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        try
        {
            if (CurrentManualLearningOutcome != null)
            {
                if (CurrentManualLearningOutcome.GetOutcome() != _outcome)
                {
                    PresentationLogic.EditManualLearningOutcome(LearningOutcomeCollection, CurrentManualLearningOutcome, _outcome);
                }
            }
            else
            {
                PresentationLogic.AddManualLearningOutcome(LearningOutcomeCollection, _outcome);
            }
        }
        finally
        {
            DialogInstance.Close();
        }
    }

}