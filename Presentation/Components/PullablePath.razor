@inject IMouseService MouseService
@inject ILogger<PullablePath> Logger;
@using Presentation.PresentationLogic.AuthoringToolWorkspace
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.PresentationLogic.LearningSpace
@using Shared
@using Presentation.PresentationLogic

<marker
    id="arrow"
    viewBox="0 0 10 10"
    refX="10"
    refY="5"
    markerWidth="6"
    markerHeight="6"
    stroke="rgb(108, 117, 125)"
    fill="rgb(108, 117, 125)"
    orient="auto-start-reverse">
    <path d="M 0 0 L 10 5 L 0 10 z" />
</marker>
<g @onmousedown="OnDown" cursor="@_cursor" @onmousedown:stopPropagation="true">
    <circle r="6" transform="translate(@(X1), @(Y1))" fill="white" stroke="gray"/>
    <polyline points="0,0 0,2 0,-2 0,0 2,0 -2,0" transform="translate(@(X1), @(Y1))" style="fill:none;stroke:lime;stroke-width:1"/>
    @if (_isDown)
    {
        <path d="M @X1 @(Y1+6) C @_c1X @C1Y, @_c2X @C2Y, @X2 @Y2" stroke="rgb(108, 117, 125)" stroke-width="2" fill="transparent" marker-end="url(#arrow)"/>
    }
</g>

@code {
    // Overwrite nullability warning below because service may never be null -n.stich
    [Parameter, EditorRequired] 
    public IPositioningService PositioningSrv { get; set; } = null!;
    
    // Coordinates of the start of the pathway
    [Parameter] public double X1 { get; set; }
    [Parameter] public double Y1 { get; set; }

    // Coordinates of the end of the pathway
    [Parameter] public double X2 { get; set; }
    [Parameter] public double Y2 { get; set; }
    
    // Direction of curvature of the first half of the pathway
    [Parameter] public Direction Direction1 { get; set; } = Direction.Right;
    // Direction of curvature of the first half of the pathway
    [Parameter] public Direction Direction2 { get; set; } = Direction.Left;

    // Overwrite nullability warning below because we check in OnParametersSet -n.stich
    [Parameter, EditorRequired]
    public IObjectInPathWayViewModel LearningObject { get; set; } = null!;
    
    // Size of the given LearningObject
    [Parameter] public double SizeX { get; set; }
    [Parameter] public double SizeY { get; set; }

    // The following coordinates are used as control points for the Bezier curve
    private double _c1X;
    private double _c2X;
    private double C1Y => Y1;
    private double C2Y => Y2;
    
    private double _cursorX;
    private double _cursorY;

    private bool _isDown;
    private string _cursor = "grab";
    private bool _hasMoved;

    protected override void OnParametersSet()
    {
        _c1X = GetControlPoint(Direction1, X1);
        _c2X = GetControlPoint(Direction2, X2);
        if (LearningObject is null)
        {
            throw new ArgumentNullException(nameof(LearningObject));
        }
    }

    const int Coefficient = 0;

    double GetControlPoint(Direction dir, double x)
        => dir == Direction.Right ? x + Coefficient : x - Coefficient;

    //This is called after component has received initial parameters in SetParametersAsync
    protected override void OnInitialized()
    {
        X2 = X1;
        Y2 = Y1;
        MouseService.OnMove += OnMove;
        MouseService.OnUp += OnUpOrOut;
        MouseService.OnOut += OnUpOrOut;
        base.OnInitialized();
    }
    
    private void OnMove(object? sender, MouseEventArgs e)
    {
        if (!_isDown) return;

        X2 = e.ClientX - _cursorX + X1;
        Y2 = e.ClientY - _cursorY + Y1;
        
        PositioningSrv.SetOnHoveredObjectInPathWay(LearningObject,X2, Y2);

        _hasMoved = true;
    }
    
    private void OnDown(MouseEventArgs e)
    {
        _cursorX = e.ClientX;
        _cursorY = e.ClientY;
        X2 = e.ClientX - _cursorX + X1;
        Y2 = e.ClientY - _cursorY + Y1;
        _isDown = true;
        _cursor = "grabbing";
        _hasMoved = false;
    }
    
    private void OnUpOrOut(object? sender, MouseEventArgs e)
    {
        if (!_hasMoved)
        {
            X2 = X1;
            Y2 = Y1;
        }
        if (_isDown)
        {
            PositioningSrv.CreateLearningPathWay(LearningObject, X2, Y2);
        }
        _isDown = false;
    }
}