@using Microsoft.Extensions.Localization
@using BusinessLogic.Validation
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action
<MudCard Outlined="true" Class="border-adlerdarkblue bg-adlergrey-100 drop-shadow" Style="margin: 8px; padding: 8px; outline: thin solid black;">
    <MudText Class="text-md font-bold text-adlerdarkblue">
        @(Localizer["AdaptivityQuestionPreview.Header.Question." + AdaptivityQuestion.Difficulty])
    </MudText>

    @if (AdaptivityQuestion is IMultipleChoiceQuestionViewModel multipleChoiceQuestion)
    {
        <MudText Class="text-sm text-adlerdarkblue">@multipleChoiceQuestion.Text</MudText>
        if (!HideChoices)
        {
            foreach (var choice in multipleChoiceQuestion.Choices)
            {
                <div class="inline-flex">

                    @{
                        var isCorrectChoice = multipleChoiceQuestion.CorrectChoices.Contains(choice);
                    }
                    <MudIcon Icon="@(isCorrectChoice ? Icons.Material.Filled.Check : Icons.Material.Filled.Clear)"
                             Size="Size.Small"
                             Color="@(isCorrectChoice ? Color.Success : Color.Error)"/>
                    <MudText Class="text-sm text-adlerdarkblue">@choice.Text</MudText>
                </div>
            }
        }
    }
    @foreach (var rule in AdaptivityQuestion.Rules)
    {
        @switch (rule.Action)
        {
            case CommentActionViewModel commentAction:
                <MudText Typo="Typo.h6">@Localizer["AdaptivityQuestionPreview.Header.Comment"]</MudText>
                <MudText Typo="Typo.body1">@commentAction.Comment</MudText>
                break;
            case ContentReferenceActionViewModel contentReferenceAction:
                <MudText Typo="Typo.h6">@Localizer["AdaptivityQuestionPreview.Header.ContentReference"]</MudText>
                <MudText Typo="Typo.body1">@contentReferenceAction.Content</MudText>
                break;
            case ElementReferenceActionViewModel elementReferenceAction:
                <MudText Typo="Typo.h6">@Localizer["AdaptivityQuestionPreview.Header.ElementReference"]</MudText>
                <MudText Typo="Typo.body1">
                    @if (LearningElementNamesProvider.ElementNames != null && LearningElementNamesProvider.ElementNames.FirstOrDefault(x => x.Item1 == elementReferenceAction.ElementId) != default)
                    {
                        @LearningElementNamesProvider.ElementNames.First(x => x.Item1 == elementReferenceAction.ElementId).Item2
                    }
                    else
                    {
                        @Localizer["AdaptivityQuestionPreview.ElementReference.NotFound", elementReferenceAction.ElementId]
                    }
                </MudText>
                break;
        }
    }
</MudCard>

@code {

    [Inject]
    internal IStringLocalizer<AdaptivityQuestionPreview> Localizer { get; set; } = null!;

    [Inject]
    internal ILearningElementNamesProvider LearningElementNamesProvider { get; set; } = null!;

    [Parameter, EditorRequired]
    public IAdaptivityQuestionViewModel AdaptivityQuestion { get; set; } = null!;

    [Parameter]
    public bool HideChoices { get; set; } = false;

}