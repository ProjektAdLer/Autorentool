@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action

@if (!Question.Rules.Any())
{
    <div class="flex flex-col justify-center pt-1">
    <MudButton Class="w-36 2xl:w-40 m-1 btn-standard font-medium text-xs 2xl:text-sm text-adlergrey shadow rounded-lg bg-buttonbgblue hover:bg-adlerdarkblue hover:text-buttonbgblue" OnClick="AddCommentAsync">@Localizer["Button.AddComment.Text"]</MudButton>
    <MudButton Class="w-36 2xl:w-40 m-1 btn-standard font-medium text-xs 2xl:text-sm text-adlergrey shadow rounded-lg bg-buttonbgblue hover:bg-adlerdarkblue hover:text-buttonbgblue" OnClick="AddReferenceAsync">@Localizer["Button.AddReference.Text"]</MudButton>
    </div>
    
}
else
{
    @switch (Rule!.Action)
    {
        case CommentActionViewModel cavm:
            <MudButton Class="w-36 2xl:w-40 relative btn-standard font-bold text-xs 2xl:text-sm text-adlerdarkblue shadow rounded-lg bg-buttonbgblue hover:bg-adlerdarkblue hover:text-buttonbgblue" OnClick="AddCommentAsync">@Localizer["Button.EditComment.Text"]
                <MudText Class="flex justify-center items-center uppercase text-xs 2xl:text-sm"></MudText>
                <div class="flex justify-end absolute w-2.5 h-1.5 top-0.5 -right-0.5 m-0.5">
                    <MudIconButton Title="@Localizer["Tooltip.DeleteRule.Text"]" Class="w-2 h-2 close-button rounded-full text-adlerdarkblue bg-buttonbgblue p-3 transform ease-in-out duration-75 active:drop-shadow-none hover:bg-adlerdarkblue hover:text-buttonbgblue" Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteRule"></MudIconButton>
                </div>
            </MudButton>
            break;
        case ElementReferenceActionViewModel or ContentReferenceActionViewModel:
            <MudButton Class="w-36 2xl:w-40 relative btn-standard font-bold text-xs 2xl:text-sm text-adlerdarkblue shadow rounded-lg bg-buttonbgblue hover:bg-adlerdarkblue hover:text-buttonbgblue" OnClick="AddReferenceAsync">@Localizer["Button.EditReference.Text"]
            <MudText Class="flex justify-center items-center uppercase text-xs 2xl:text-sm"></MudText>
                 <div class="flex justify-end absolute w-2.5 h-1.5 top-0.5 -right-0.5 m-0.5">
                     <MudIconButton Title="@Localizer["Tooltip.DeleteRule.Text"]" Class="w-2 h-2 close-button rounded-full text-adlerdarkblue bg-buttonbgblue p-3 transform ease-in-out duration-75 active:drop-shadow-none hover:bg-adlerdarkblue hover:text-buttonbgblue" Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteRule"></MudIconButton>
                 </div>
            </MudButton>
            break;
    }
}

@code {

    [Inject, AllowNull]
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull]
    internal IPresentationLogic PresentationLogic { get; set; }
    
    [Inject, AllowNull]
    internal IStringLocalizer<AdaptivityContentDialogRuleControl> Localizer { get; set; }

    [Parameter, EditorRequired, AllowNull]
    public IAdaptivityQuestionViewModel Question { get; set; }

    private IAdaptivityRuleViewModel? Rule => Question.Rules.FirstOrDefault();

    private static DialogOptions DialogOptions => new()
    {
        CloseOnEscapeKey = true,
        DisableBackdropClick = true,
        CloseButton = true,
        MaxWidth = MaxWidth.ExtraLarge,
    };

    private void DeleteRule()
    {
        if (Rule is null) return;
        PresentationLogic.DeleteAdaptivityRule(Question, Rule);
    }

    private async Task AddCommentAsync()
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditCommentActionDialog.Question), Question },
            { nameof(CreateEditCommentActionDialog.ExistingAction), Rule?.Action },
        };

        var dialogReference = await DialogService.ShowAsync<CreateEditCommentActionDialog>(@Localizer["CommentDialog.Title.Text"],
            dialogParameters, DialogOptions);
        await dialogReference.Result;
        await StateHasChangedAsync();
    }

    private async Task AddReferenceAsync()
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditReferenceActionDialog.Question), Question },
            { nameof(CreateEditReferenceActionDialog.ExistingAction), Rule?.Action },
        };
        
        var dialogReference = await DialogService.ShowAsync<CreateEditReferenceActionDialog>(@Localizer["ReferenceDialog.Title.Text"],
            dialogParameters, DialogOptions);
        await dialogReference.Result;
        await StateHasChangedAsync();
    }

    private async Task StateHasChangedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

}