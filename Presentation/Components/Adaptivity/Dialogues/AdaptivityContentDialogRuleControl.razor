@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using System.Diagnostics.CodeAnalysis
@using ElectronNET.API
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action

@if (!Question.Rules.Any())
{
    <div class="flex flex-col justify-center py-1">
        <MudButton Class="w-40 2xl:w-48 py-0 my-1 btn-standard font-medium text-xs 2xl:text-sm text-adlergrey drop-shadow rounded-lg bg-adlerblue-100 hover:bg-adlerdarkblue hover:text-buttonbgblue" OnClick="AddCommentAsync">@Localizer["Button.AddComment.Text"]</MudButton>
        <MudButton Class="w-40 2xl:w-48 py-0 my-1 btn-standard font-medium text-xs 2xl:text-sm text-adlergrey drop-shadow rounded-lg bg-adlerblue-100 hover:bg-adlerdarkblue hover:text-buttonbgblue" OnClick="AddReferenceAsync">@Localizer["Button.AddReference.Text"]</MudButton>
    </div>
}
else
{
    @switch (Rule!.Action)
    {
        case CommentActionViewModel cavm:
            <MudButton Class="w-40 2xl:w-48 relative py-0 my-1 btn-standard font-medium text-xs 2xl:text-sm text-adlergrey drop-shadow rounded-lg bg-adlerblue-100 hover:bg-adlerdarkblue hover:text-buttonbgblue" OnClick="AddCommentAsync">
                <MudText Class="flex justify-center items-center uppercase text-xs 2xl:text-sm">@Localizer["Button.EditComment.Text"]</MudText>
                <MudTooltip Text="@Localizer["Tooltip.DeleteRule.Text"]">
                    <MudIconButton Class="w-2 h-2 shadow-none close-button rounded-full btn-standard" Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteRule"></MudIconButton>
                </MudTooltip>
            </MudButton>
            break;
        case ElementReferenceActionViewModel or ContentReferenceActionViewModel:
            <MudButton OnClick="AddReferenceAsync">@Localizer["Button.EditReference.Text"]</MudButton>
            break;
    }
}

@code {

    [Inject, AllowNull]
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull]
    internal IPresentationLogic PresentationLogic { get; set; }
    
    [Inject, AllowNull]
    internal IStringLocalizer<AdaptivityContentDialogRuleControl> Localizer { get; set; }

    [Parameter, EditorRequired, AllowNull]
    public IAdaptivityQuestionViewModel Question { get; set; }

    private IAdaptivityRuleViewModel? Rule => Question.Rules.FirstOrDefault();

    private static DialogOptions DialogOptions => new()
    {
        CloseOnEscapeKey = true,
        DisableBackdropClick = true,
        CloseButton = true,
        MaxWidth = MaxWidth.ExtraLarge,
    };

    private void DeleteRule()
    {
        if (Rule is null) return;
        PresentationLogic.DeleteAdaptivityRule(Question, Rule);
    }

    private async Task AddCommentAsync()
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditCommentActionDialog.Question), Question },
            { nameof(CreateEditCommentActionDialog.ExistingAction), Rule?.Action },
        };

        var dialogReference = await DialogService.ShowAsync<CreateEditCommentActionDialog>(@Localizer["CommentDialog.Title.Text"],
            dialogParameters, DialogOptions);
        await dialogReference.Result;
        await StateHasChangedAsync();
    }

    private async Task AddReferenceAsync()
    {
        var dialogParameters = new DialogParameters
        {
            { nameof(CreateEditReferenceActionDialog.Question), Question },
            { nameof(CreateEditReferenceActionDialog.ExistingAction), Rule?.Action },
        };
        
        var dialogReference = await DialogService.ShowAsync<CreateEditReferenceActionDialog>(@Localizer["ReferenceDialog.Title.Text"],
            dialogParameters, DialogOptions);
        await dialogReference.Result;
        await StateHasChangedAsync();
    }

    private async Task StateHasChangedAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

}