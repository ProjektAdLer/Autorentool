@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Trigger
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Shared.Adaptivity
<div class="relative w-[800px] h-[520px] flex flex-col mx-4">
    <MudText Class="px-2 mb-1 text-sm">@Localizer["Reference.Text"]</MudText>
    <div class="border-adlerdarkblue border-4 rounded-lg m-2">

        <MudTabs @ref="_tabs">
            <MudTabPanel Disabled="@(ExistingAction is ContentReferenceActionViewModel)" @ref="_elementPanel" Text="@Localizer["Element.Text"]"
                         Class="tab-panel-element relative text-adlertextgrey bg-adlergrey-100 text-sm font-bold normal-case">
                <!-- Element reference -->
                <MudForm Class="bg-white border-t-2 border-adlergrey-100" @ref="_form">
                    <div class="p-2 mb-4">
                        <MudText Class="cursor-default font-bold text-sm pl-2">@Localizer["Note.Label.Text"]</MudText>
                        <div class="border-4 border-adlergrey-100 rounded-md m-1.5">
                            <MudTextField Variant="Variant.Outlined"
                                          Class="shadow-none m-0"
                                          T="string"
                                          Placeholder="@Localizer["Comment.Label.Text.Placeholder"]"
                                          @bind-Value="_comment"
                                          Lines="2"
                                          Required="false"/>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="flex flex-row gap-1">
                            <MudText Class="cursor-default font-bold text-sm pl-2">@Localizer["Reference.Element.Label.Text"]
                                    <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="@Localizer["Reference.Element.Info.Text"]">
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey-200 hover:text-adlerdarkblue"></MudIcon>
                                    </MudTooltip>
                                </MudText>
                        </div>
                        <GridSelect T="ILearningElementViewModel"
                                    Elements="LearningElements.OrderBy(x => x.Name, StringComparer.OrdinalIgnoreCase)"
                                    @bind-Value="_learningElement"
                                    Required="true"
                                    RequiredError="@Localizer["Element.RequiredError.Text"]"
                                    FilterFuncSearchableStrings="element => new[] { element.Name }">
                            <ElementTemplate>
                                <MudText Class="text-xs font-bold break-all leading-none truncate" title="@context.Name">@context.Name</MudText>
                            </ElementTemplate>
                        </GridSelect>
                    </div>
                </MudForm>
            </MudTabPanel>
            <MudTabPanel Disabled="@(ExistingAction is ElementReferenceActionViewModel)" @ref="_contentPanel" Text="@Localizer["Content.Text"]"
                         Class="tab-panel-content relative text-adlertextgrey bg-adlergrey-100 text-sm break-all font-bold normal-case">
                <!-- Content reference -->
                <MudForm Class="bg-white border-t-2 border-adlergrey-100" @ref="_form">
                    <div class="p-2 mb-4">
                        <MudText Class="font-bold text-sm pl-2">@Localizer["Note.Label.Text"]</MudText>
                        <div class="border-4 border-adlergrey-100 rounded-md m-1.5">
                            <MudTextField T="string"
                                          @bind-Value="_comment"
                                          Placeholder="@Localizer["Comment.Label.Text.Placeholder"]"
                                          Lines="2"
                                          Required="false"
                                          Class="shadow-none m-0"
                                          Variant="Variant.Outlined"/>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="flex flex-row gap-1">
                            <MudText Class="font-bold text-sm pl-2">@Localizer["Reference.Content.Label.Text"]
                                    <MudTooltip Placement="Placement.Right" Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed" Text="@Localizer["Reference.Content.Info.Text"]">
                                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info" Class="text-adlergrey-200 hover:text-adlerdarkblue"></MudIcon>
                                    </MudTooltip>
                                </MudText>
                        </div>
                        <GridSelect T="ILearningContentViewModel"
                                    Elements="LearningContents.OrderBy(x => x.Name, StringComparer.OrdinalIgnoreCase)"
                                    @bind-Value="_learningContent"
                                    Required="true"
                                    RequiredError="@Localizer["Content.RequiredError.Text"]"
                                    FilterFuncSearchableStrings="content => new[] { content.Name }">
                            <ElementTemplate>
                                <MudText Class="text-xs font-bold break-all leading-none truncate" title="@context.Name">@context.Name</MudText>
                            </ElementTemplate>
                        </GridSelect>
                    </div>
                </MudForm>
            </MudTabPanel>
        </MudTabs>
    </div>
</div>
<div class="flex justify-end items-center">
    <MudButton Class="btn-standard sticky m-6"
               @onclick="SubmitAsync">
        @Localizer["Button.Submit.Text"]
    </MudButton>
</div>


@code {

    [Inject, AllowNull] internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] internal ILearningWorldPresenter LearningWorldPresenter { get; set; }

    [Inject, AllowNull] internal IStringLocalizer<CreateEditReferenceActionDialog> Localizer { get; set; }

    [Parameter] public IAdaptivityActionViewModel? ExistingAction { get; set; }

    [Parameter, EditorRequired, AllowNull] public IAdaptivityQuestionViewModel Question { get; set; }

    [CascadingParameter, AllowNull] public MudDialogInstance DialogInstance { get; set; }

    private IEnumerable<ILearningElementViewModel> LearningElements =>
        LearningWorldPresenter.LearningWorldVm!.AllLearningElements
            .Where(ele => ele.LearningContent is not AdaptivityContentViewModel);

    private IEnumerable<ILearningContentViewModel> LearningContents => PresentationLogic.GetAllContent();

    private MudForm _form = null!;
    private MudTabs _tabs = null!;
    private MudTabPanel _contentPanel = null!;
    private MudTabPanel _elementPanel = null!;
    private ILearningContentViewModel? _learningContent;
    private ILearningElementViewModel? _learningElement;
    private string _comment = "";

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) return;
        switch (ExistingAction)
        {
            case null:
                _tabs.ActivatePanel(_elementPanel);
                return;
            case ContentReferenceActionViewModel cravm:
                _tabs.ActivatePanel(_contentPanel);
                _learningContent = GetLearningContentViewModel(cravm.Content);
                _comment = cravm.Comment;
                break;
            case ElementReferenceActionViewModel eravm:
                _tabs.ActivatePanel(_elementPanel);
                _learningElement = LearningElements.SingleOrDefault(lc => eravm.ElementId == lc.Id);
                _comment = eravm.Comment;
                break;
        }
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        try
        {
            switch (ExistingAction)
            {
                case ContentReferenceActionViewModel cravm when cravm.Content.Equals(_learningContent) && cravm.Comment.Equals(_comment):
                    DialogInstance.Close();
                    return;
                case ContentReferenceActionViewModel cravm:
                    PresentationLogic.EditContentReferenceAction(cravm, _learningContent!, _comment);
                    break;
                case ElementReferenceActionViewModel eravm when eravm.ElementId == _learningElement!.Id && eravm.Comment.Equals(_comment):
                    DialogInstance.Close();
                    return;
                case ElementReferenceActionViewModel eravm:
                    PresentationLogic.EditElementReferenceAction(eravm, _learningElement.Id, _comment);
                    break;
                default:
                {
                    IAdaptivityActionViewModel action = _tabs.ActivePanel == _contentPanel
                        ? new ContentReferenceActionViewModel(_learningContent!, _comment)
                        : new ElementReferenceActionViewModel(_learningElement!.Id, _comment);
                    PresentationLogic.CreateAdaptivityRule(
                        Question,
                        new CorrectnessTriggerViewModel(AnswerResult.Incorrect),
                        action);
                    break;
                }
            }
        }
        finally
        {
            DialogInstance.Close();
        }
    }

    private ILearningContentViewModel? GetLearningContentViewModel(ILearningContentViewModel actionContent) => actionContent switch
    {
        FileContentViewModel fileContent => LearningContents.OfType<FileContentViewModel>().SingleOrDefault(fc => fc.Equals(fileContent)),
        LinkContentViewModel question => LearningContents.OfType<LinkContentViewModel>().SingleOrDefault(q => q.Equals(question)),
        _ => throw new ArgumentOutOfRangeException(nameof(actionContent), "Content must be File or Link")
    };

}