@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.Components.ContentFiles
@using Presentation.Components.Forms
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Trigger
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Presentation.View.LearningElement
@using Shared.Adaptivity
<div class="relative w-[800px] h-[520px] flex flex-col mx-4">
    <MudText Class="px-2 mb-1 text-sm cursor-default">@Localizer["Reference.Text"]</MudText>
    <div class="border-adlergrey-200 border-4 rounded m-2">
        <MudText
            Class="font-bold text-adlertitledarkblue text-sm cursor-default px-3 py-1 pt-2">@Localizer["Note.Label.Text"]</MudText>
        <div class="border-4 border-adlergrey-100 rounded-lg mx-1.5">
            <MudTextField Variant="Variant.Outlined"
                          Class="shadow-none m-0"
                          T="string"
                          @bind-Value="Comment"
                          Lines="2"
                          Required="false"/>
        </div>

        <MudTabs Class="pt-3" HideSlider="true" @ref="_tabs">
            <MudTabPanel @ref="_elementPanel" Text="@Localizer["Element.Text"]"
                         Class="@GetTabPanelClass(_elementPanel)">
                <!-- Element reference -->
                <MudForm Class="bg-white border-t-2 border-adlergrey-200" @ref="_form">
                    <div class="p-2">
                        <div class="flex flex-row justify-between items-center gap-1">
                            <MudText
                                Class="cursor-default font-bold text-sm text-adlertitledarkblue p-1">@Localizer["Reference.Element.Label.Text"]
                                <MudTooltip Placement="Placement.Right"
                                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed cursor-default"
                                            Text="@Localizer["Reference.Element.Info.Text"]">
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                             Class="text-adlergrey-300 hover:text-adlerdarkblue"></MudIcon>
                                </MudTooltip>
                            </MudText>
                            <div class="flex flex-row gap-1 w-72 cursor-default">
                                <MudText
                                    Class="text-sm">@Localizer["Reference.Material.Element.Text.Selected"]</MudText>
                                <MudText
                                    Class="text-sm font-bold truncate text-ellipsis"> @LearningElement?.Name </MudText>
                            </div>
                        </div>
                        <GridSelect T="ILearningElementViewModel"
                                    Elements="LearningElements.OrderBy(x => x.Name, StringComparer.OrdinalIgnoreCase)"
                                    @bind-Value="LearningElement"
                                    AllowDeselect="false"
                                    Required="true"
                                    RequiredError="@Localizer["Element.RequiredError.Text"]"
                                    FilterFuncSearchableStrings="element => new[] { element.Name }">
                            <ElementTemplate>
                                <DragDropLearningElement ShowDeleteButton="false"
                                                         LearningElement="@context"
                                                         IsSelected="@(EqualityComparer<ILearningElementViewModel>.Default.Equals(context, LearningElement))"></DragDropLearningElement>
                            </ElementTemplate>
                        </GridSelect>
                    </div>
                </MudForm>
            </MudTabPanel>
            <MudTabPanel @ref="_contentPanel" Text="@Localizer["Content.Text"]"
                         Class="@GetTabPanelClass(_contentPanel)">
                <!-- Content reference -->
                <MudForm Class="bg-white border-t-2 border-adlergrey-100" @ref="_form">
                    <div class="p-2">
                        <div class="flex flex-row justify-between items-center gap-1">
                            <MudText
                                Class="font-bold text-sm p-1 cursor-default text-adlertitledarkblue">@Localizer["Reference.Content.Label.Text"]
                                <MudTooltip Placement="Placement.Right"
                                            Class="w-96 p-4 bg-adlerdarkblue-200 shadow-xl text-start leading-relaxed cursor-default"
                                            Text="@Localizer["Reference.Content.Info.Text"]">
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"
                                             Class="text-adlergrey-300 hover:text-adlerdarkblue"></MudIcon>
                                </MudTooltip>
                            </MudText>
                            <div class="flex flex-row gap-1 w-72 cursor-default">
                                <MudText
                                    Class="text-sm">@Localizer["Reference.Material.Element.Text.Selected"]</MudText>
                                <MudText
                                    Class="text-sm font-bold truncate text-ellipsis"> @LearningContent?.Name </MudText>
                            </div>
                        </div>

                        <ContentFilesView @bind-SelectedLearningContent="LearningContent"
                                          ShowHeadRow="false"
                                          ShowContentState="false"
                                          TableHeight="150px"
                                          SurroundingDivClass="rounded border-2 border-adlergrey-100"
                                          MultipleSelection="false"
                                          ShowPager="false"
                                          DeleteButtonVisible="false"
                                          ShowPreviewButton="true"
                                          ShowHoverMenu="false"
                                          FocusSearch="true"></ContentFilesView>
                    </div>
                </MudForm>
            </MudTabPanel>
        </MudTabs>
    </div>
</div>
<div class="flex justify-end items-center">
    <MudButton Class="btn-standard sticky mx-6 my-4"
               @onclick="SubmitAsync">
        @Localizer["Button.Submit.Text"]
    </MudButton>
</div>


@code {

    [Inject, AllowNull] internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] internal ILearningWorldPresenter LearningWorldPresenter { get; set; }

    [Inject, AllowNull] internal IStringLocalizer<CreateEditReferenceActionDialog> Localizer { get; set; }

    [Parameter] public bool? IsSelected { get; set; }

    [Parameter] public IAdaptivityActionViewModel? ExistingAction { get; set; }

    [Parameter] public IAdaptivityRuleViewModel? ExistingRule { get; set; }

    [Parameter, EditorRequired, AllowNull] public IAdaptivityQuestionViewModel Question { get; set; }

    [CascadingParameter, AllowNull] public IMudDialogInstance DialogInstance { get; set; }

    private IEnumerable<ILearningElementViewModel> LearningElements =>
        LearningWorldPresenter.LearningWorldVm!.AllLearningElements
            .Where(ele => ele.LearningContent is not AdaptivityContentViewModel);

    private IEnumerable<ILearningContentViewModel> LearningContents => PresentationLogic.GetAllContent();

    private MudForm _form = null!;
    private MudTabs _tabs = null!;
    private MudTabPanel _contentPanel = null!;
    private MudTabPanel _elementPanel = null!;
    private ILearningContentViewModel? _learningContent;

    internal ILearningContentViewModel? LearningContent
    {
        get => _learningContent;
        set
        {
            _learningContent = value;
            if (value != null)
            {
                _learningElement = null;
            }
        }
    }

    private ILearningElementViewModel? _learningElement;

    private ILearningElementViewModel? LearningElement
    {
        get => _learningElement;
        set
        {
            _learningElement = value;
            if (value != null)
            {
                _learningContent = null;
            }
        }
    }

    internal string Comment = "";

    private bool _initialized;

    private string GetTabPanelClass(MudTabPanel panel)
    {
        var isSelected = _tabs.ActivePanel == panel;

        @if (panel == _elementPanel)
        {
            return isSelected ? "text-adlertextgrey bg-adlergrey-200 hover:bg-adlergrey-300 font-bold panel-element" : "text-adlergrey-300 bg-adlergrey-100 panel-element";
        }

        @if (panel == _contentPanel)
        {
            return isSelected ? "text-adlertextgrey bg-adlergrey-200 hover:bg-adlergrey-300 font-bold rounded-tr panel-content" : "text-adlergrey-300 bg-adlergrey-100 rounded-tr panel-content";
        }

        return "border-2 flex rounded-lg";
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_initialized) return;
        switch (ExistingAction)
        {
            case null:
                break;
            case ContentReferenceActionViewModel cravm:
                Comment = cravm.Comment;
                break;
            case ElementReferenceActionViewModel eravm:
                Comment = eravm.Comment;
                break;
        }

        _initialized = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) return;
        switch (ExistingAction)
        {
            case null:
                _tabs.ActivatePanel(_elementPanel);
                return;
            case ContentReferenceActionViewModel cravm:
                _tabs.ActivatePanel(_contentPanel);
                LearningContent = GetLearningContentViewModel(cravm.Content);
                Comment = cravm.Comment;
                break;
            case ElementReferenceActionViewModel eravm:
                _tabs.ActivatePanel(_elementPanel);
                LearningElement = LearningElements.SingleOrDefault(lc => eravm.ElementId == lc.Id);
                Comment = eravm.Comment;
                break;
        }
    }

    private async Task SubmitAsync()
    {
        if (!(_tabs.ActivePanel == _elementPanel && LearningContent != null || _tabs.ActivePanel == _contentPanel && LearningElement != null))
        {
            await _form.Validate();
            if (!_form.IsValid) return;
        }

        try
        {
            switch (ExistingAction)
            {
                case ContentReferenceActionViewModel when LearningContent == null:
                    PresentationLogic.ReplaceContentReferenceActionByElementReferenceAction(Question, ExistingRule!,
                        new ElementReferenceActionViewModel(LearningElement!.Id, Comment),
                        new CorrectnessTriggerViewModel(AnswerResult.Incorrect));
                    return;
                case ElementReferenceActionViewModel when LearningElement == null:
                    PresentationLogic.ReplaceElementReferenceActionByContentReferenceAction(Question, ExistingRule!,
                        new ContentReferenceActionViewModel(LearningContent!, Comment),
                        new CorrectnessTriggerViewModel(AnswerResult.Incorrect));
                    return;
                case ContentReferenceActionViewModel cravm when cravm.Content.Equals(LearningContent) && cravm.Comment.Equals(Comment):
                    DialogInstance.Close();
                    return;
                case ContentReferenceActionViewModel cravm:
                    PresentationLogic.EditContentReferenceAction(cravm, LearningContent!, Comment);
                    break;
                case ElementReferenceActionViewModel eravm when eravm.ElementId == LearningElement!.Id && eravm.Comment.Equals(Comment):
                    DialogInstance.Close();
                    return;
                case ElementReferenceActionViewModel eravm:
                    PresentationLogic.EditElementReferenceAction(eravm, LearningElement.Id, Comment);
                    break;
                default:
                {
                    CreateAdaptivityRuleFromSelected();
                    break;
                }
            }
        }
        finally
        {
            DialogInstance.Close();
        }
    }

    private void CreateAdaptivityRuleFromSelected()
    {
        IAdaptivityActionViewModel action;
        if (LearningElement == null && LearningContent != null)
        {
            action = new ContentReferenceActionViewModel(LearningContent!, Comment);
        }
        else if (LearningElement != null && LearningContent == null)
        {
            action = new ElementReferenceActionViewModel(LearningElement.Id, Comment);
        }
        else
        {
            throw new InvalidOperationException("Either LearningElement or LearningContent must be set");
        }

        PresentationLogic.CreateAdaptivityRule(
            Question,
            new CorrectnessTriggerViewModel(AnswerResult.Incorrect),
            action);
    }

    private ILearningContentViewModel? GetLearningContentViewModel(ILearningContentViewModel actionContent) => actionContent switch
    {
        FileContentViewModel fileContent => LearningContents.OfType<FileContentViewModel>().SingleOrDefault(fc => fc.Equals(fileContent)),
        LinkContentViewModel question => LearningContents.OfType<LinkContentViewModel>().SingleOrDefault(q => q.Equals(question)),
        _ => throw new ArgumentOutOfRangeException(nameof(actionContent), @"Content must be File or Link")
    };

}