@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.Components.Forms;
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Trigger
@using Presentation.PresentationLogic.LearningContent.FileContent
@using Presentation.PresentationLogic.LearningContent.LinkContent
@using Presentation.PresentationLogic.LearningElement
@using Presentation.PresentationLogic.LearningWorld
@using Shared.Adaptivity
<div class="w-[800px] h-80 flex flex-col">
    <MudTabs @ref="_tabs" Class="h-full">
        <MudTabPanel Disabled="@(ExistingAction is ElementReferenceActionViewModel)" @ref="_contentPanel" Text="@Localizer["Content.Text"]">
            <!-- Content reference -->
            <MudForm @ref="_form">
                <GridSelect Elements="LearningContents" @bind-Value="_learningContent" Required="true"
                            RequiredError="@Localizer["Content.RequiredError.Text"]">
                    <ElementTemplate>
                        <MudText Typo="Typo.body1" Align="Align.Center">@Localizer["Content.Text"] @context.Name</MudText>
                    </ElementTemplate>
                </GridSelect>
            </MudForm>
        </MudTabPanel>
        <MudTabPanel Disabled="@(ExistingAction is ContentReferenceActionViewModel)" @ref="_elementPanel" Text="@Localizer["Element.Text"]">
            <!-- Element reference -->
            <MudForm @ref="_form">
                <GridSelect Elements="LearningElements" @bind-Value="_learningElement" Required="true"
                            RequiredError="@Localizer["Element.RequiredError.Text"]">
                    <ElementTemplate>
                        <div>@Localizer["Element.Text"] @context.Name</div>
                    </ElementTemplate>
                </GridSelect>
            </MudForm>
        </MudTabPanel>
    </MudTabs>
    <div class="fixed bottom-0 right-0 border-adlergrey-200">
        <MudButton Color="Color.Success" @onclick="SubmitAsync">
            @Localizer["Button.Submit.Text"]
        </MudButton>
    </div>
</div>

@code {

    [Inject, AllowNull]
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull]
    internal ILearningWorldPresenter LearningWorldPresenter { get; set; }
    
    [Inject, AllowNull]
    internal IStringLocalizer<CreateEditReferenceActionDialog> Localizer { get; set; }

    [Parameter]
    public IAdaptivityActionViewModel? ExistingAction { get; set; }

    [Parameter, EditorRequired, AllowNull]
    public IAdaptivityQuestionViewModel Question { get; set; }

    [CascadingParameter, AllowNull]
    public MudDialogInstance DialogInstance { get; set; }

    private IEnumerable<ILearningElementViewModel> LearningElements => LearningWorldPresenter.LearningWorldVm!.AllLearningElements;
    private IEnumerable<ILearningContentViewModel> LearningContents => PresentationLogic.GetAllContent();

    private MudForm _form = null!;
    private MudTabs _tabs = null!;
    private MudTabPanel _contentPanel = null!;
    private MudTabPanel _elementPanel = null!;
    private ILearningContentViewModel _learningContent = null!;
    private ILearningElementViewModel _learningElement = null!;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) return;
        switch (ExistingAction)
        {
            case null:
                return;
            case ContentReferenceActionViewModel cravm:
                _tabs.ActivatePanel(_contentPanel);
                _learningContent = GetLearningContentViewModel(cravm.Content);
                break;
            case ElementReferenceActionViewModel eravm:
                _tabs.ActivatePanel(_elementPanel);
                _learningElement = LearningElements.Single(lc => eravm.ElementId == lc.Id);
                break;
        }
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        try
        {
            switch (ExistingAction)
            {
                case ContentReferenceActionViewModel cravm when cravm.Content.Equals(_learningContent):
                    DialogInstance.Close();
                    return;
                case ContentReferenceActionViewModel cravm:
                    PresentationLogic.EditContentReferenceAction(cravm, _learningContent);
                    break;
                case ElementReferenceActionViewModel eravm when eravm.ElementId == _learningElement.Id:
                    DialogInstance.Close();
                    return;
                case ElementReferenceActionViewModel eravm:
                    PresentationLogic.EditElementReferenceAction(eravm, _learningElement.Id);
                    break;
                default:
                {
                    IAdaptivityActionViewModel action = _tabs.ActivePanel == _contentPanel
                        ? new ContentReferenceActionViewModel(_learningContent)
                        : new ElementReferenceActionViewModel(_learningElement.Id);
                    PresentationLogic.CreateAdaptivityRule(
                        Question,
                        new CorrectnessTriggerViewModel(AnswerResult.Incorrect),
                        action);
                    break;
                }
            }
        }
        finally
        {
            DialogInstance.Close();
        }
    }

    private ILearningContentViewModel GetLearningContentViewModel(ILearningContentViewModel actionContent) => actionContent switch
    {
        FileContentViewModel fileContent => LearningContents.OfType<FileContentViewModel>().Single(fc => fc.Equals(fileContent)),
        LinkContentViewModel question => LearningContents.OfType<LinkContentViewModel>().Single(q => q.Equals(question)),
        _ => throw new ArgumentOutOfRangeException(nameof(actionContent), "Content must be File or Link")
        };

}