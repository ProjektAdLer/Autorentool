@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Shared.Adaptivity
@using System.Diagnostics.CodeAnalysis
@using Presentation.Components.Adaptivity.Forms.AdaptivityQuestion
<div class="flex items-center max-h-[1500px] mx-4 p-0 overflow-hidden">
    @if (_isSidePanelOpen)
    {
        <div class="relative w-[310px] transition">
            <MudText Class="text-adlertextgrey text-sm">
                @(Task.Questions.FirstOrDefault(x => x.Difficulty != Difficulty) == null
                    ? Localizer["AdaptivityQuestionDialog.Sidebar.Header.NoQuestions"]
                    : Localizer["AdaptivityQuestionDialog.Sidebar.Header.ExistingQuestions"])
            </MudText>
            @foreach (var difficulty in Enum.GetValues(typeof(QuestionDifficulty)).Cast<QuestionDifficulty>())
            {
                if (difficulty != Difficulty &&
                    Task.Questions.FirstOrDefault(x => x.Difficulty == difficulty) is {} questionWithOtherDifficulty)
                {
                    <AdaptivityQuestionPreview AdaptivityQuestion="questionWithOtherDifficulty"></AdaptivityQuestionPreview>
                }
            }
        </div>
    }
    <MudToggleIconButton Title="@Localizer["AdaptivityQuestionDialog.Sidebar.Toggle.Text"]" Class="h-10 w-10" Icon="@Icons.Material.Filled.ChevronLeft" ToggledIcon="@Icons.Material.Filled.ChevronRight" @bind-Toggled="_isSidePanelOpen"></MudToggleIconButton>

    <div class="w-[500px]">
        <MudDialog ClassContent="p-0">
            <DialogContent>
                <div class="flex flex-col items-center">
                    @if (Task.Questions.FirstOrDefault(x => x.Difficulty == Difficulty) is IMultipleChoiceQuestionViewModel questionToEdit)
                    {
                        <MultipleChoiceQuestionForm Task="Task" Difficulty="Difficulty" QuestionToEdit="questionToEdit" OnSubmitted="CloseDialog"></MultipleChoiceQuestionForm>
                    }
                    else
                    {
                        <MultipleChoiceQuestionForm Task="Task" Difficulty="Difficulty" QuestionToEdit="null" OnSubmitted="CloseDialog"></MultipleChoiceQuestionForm>
                    }
                </div>
            </DialogContent>
        </MudDialog>
    </div>
</div>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IStringLocalizer<AdaptivityQuestionDialog> Localizer { get; set; }

    [Parameter, EditorRequired]
    public IAdaptivityTaskViewModel Task { get; set; } = null!;

    [Parameter, EditorRequired]
    public QuestionDifficulty Difficulty { get; set; }

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = default!;

    private bool _isSidePanelOpen = false;

    private void CloseDialog()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

}