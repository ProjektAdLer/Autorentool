@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Trigger
@using Shared.Adaptivity
<div class="relative max-w-full h-[315px] flex flex-col mx-4">
    <MudText Class="px-2 mb-1 text-sm">@Localizer["Comment.Text"]</MudText>
    <div class="border-adlergrey-200 border-4 rounded m-2 bg-adlerbgbright">
        <MudForm @ref="_form" Class="bg-adlerbgbright border-t-2 border-adlergrey-100">
            <div class="p-2 mb-4 bg-adlerbgbright">
                <MudText Class="cursor-default font-bold text-sm pl-2">@Localizer["Comment.Label.Text"]</MudText>
                <div class="border-4 border-adlergrey-100 bg-white rounded-md m-1.5">
                    <MudTextField Variant="Variant.Outlined"
                                  Class="shadow-none m-0" 
                                  T="string"
                                  Placeholder="@Localizer["Comment.Label.Text.Placeholder"]"
                                  @bind-Value="_comment"
                                  Lines="4"
                                  MaxLength="400"
                                  Required="true"
                                  RequiredError="@Localizer["Comment.RequiredError.Text"]"/>
                </div>
            </div>
        </MudForm>
    </div>
    <div class="flex justify-end items-center mt-2">
        <MudButton Class="btn-standard sticky" 
                   @onclick="SubmitAsync">
            @Localizer["Button.Submit.Text"]
        </MudButton>
    </div>
</div>


@code {

    [Inject, AllowNull] //allow null as injected - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }
    
    [Inject, AllowNull]
    internal IStringLocalizer<CreateEditCommentActionDialog> Localizer { get; set; }

    [Parameter]
    public CommentActionViewModel? ExistingAction { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null as we editor require it - n.stich
    public IAdaptivityQuestionViewModel Question { get; set; }
    
    [CascadingParameter, AllowNull] //injected by MudDialog - n.stich
    public IMudDialogInstance DialogInstance { get; set; }
    

    private MudForm _form = null!;
    private string _comment = null!; //set in OnParametersSet

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _comment = ExistingAction?.Comment ?? "";
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        try
        {
            if (ExistingAction is not null)
            {
                if (_comment != ExistingAction.Comment)
                {
                    PresentationLogic.EditCommentAction(ExistingAction, _comment);
                }
            }
            else
            {
                PresentationLogic.CreateAdaptivityRule(
                    Question,
                    new CorrectnessTriggerViewModel(AnswerResult.Incorrect),
                    new CommentActionViewModel(_comment)
                );
            }
        }
        finally
        {
            DialogInstance.Close();
        }
    }
}