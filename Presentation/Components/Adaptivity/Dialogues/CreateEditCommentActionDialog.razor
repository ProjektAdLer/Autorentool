@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Action
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Trigger
@using Shared.Adaptivity
<MudForm @ref="_form" Class="m-2 w-96">
    <MudCard>
        <MudCardContent>
            <MudTextField @bind-Value="_comment" T="string" Label="@Localizer["Comment.Label.Text"]" Lines="2" Required="true"
                          RequiredError="@Localizer["Comment.RequiredError.Text"]"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Class="btn-standard" OnClick="SubmitAsync">@Localizer["Button.Submit.Text"]</MudButton>
        </MudCardActions>
    </MudCard>
</MudForm>

@code {

    [Inject, AllowNull] //allow null as injected - n.stich
    internal IPresentationLogic PresentationLogic { get; set; }
    
    [Inject, AllowNull]
    internal IStringLocalizer<CreateEditCommentActionDialog> Localizer { get; set; }

    [Parameter]
    public CommentActionViewModel? ExistingAction { get; set; }

    [Parameter, EditorRequired, AllowNull] //allow null as we editor require it - n.stich
    public IAdaptivityQuestionViewModel Question { get; set; }
    
    [CascadingParameter, AllowNull] //injected by MudDialog - n.stich
    public MudDialogInstance DialogInstance { get; set; }
    

    private MudForm _form = null!;
    private string _comment = null!; //set in OnParametersSet

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _comment = ExistingAction?.Comment ?? "";
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        try
        {
            if (ExistingAction is not null)
            {
                if (_comment != ExistingAction.Comment)
                {
                    PresentationLogic.EditCommentAction(ExistingAction, _comment);
                }
            }
            else
            {
                PresentationLogic.CreateAdaptivityRule(
                    Question,
                    new CorrectnessTriggerViewModel(AnswerResult.Incorrect),
                    new CommentActionViewModel(_comment)
                );
            }
        }
        finally
        {
            DialogInstance.Close();
        }
    }
}