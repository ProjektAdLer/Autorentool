@using System.Diagnostics.CodeAnalysis
@using AutoMapper
@using Microsoft.Extensions.Localization
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Shared.Adaptivity
<p class="text-sm 2xl:text-base mx-6">@Localizer["AdaptivityContentDialog.Subtitle"]</p>
<MudTable @ref="@_table" Items="@MyContent.Tasks" Height="500px" Outlined="true" Class="rounded-lg border-4 border-adlerdarkblue-100 m-4"
          FixedHeader="true" r="false" CustomFooter="true" Bordered="true">
    <ColGroup>
        <col/>
        <col style="width: 15px;"/>
        <col/>
        <col/>
        <col/>
    </ColGroup>
    <HeaderContent>
        <MudTh Class="cursor-default font-bold text-adlerdarkblue-800 text-lg bg-adlergrey-100">@Localizer["AdaptivityContentDialog.Table.Header.Tasks"]</MudTh>
        <MudTh Class="cursor-default text-xs px-2 leading-tight font-bold text-adlerdarkblue-800 break-words bg-adlergrey-100">@Localizer["AdaptivityContentDialog.Table.Header.RequiredTask"]</MudTh>
        <MudTh Class="cursor-default text-adlerdarkblue-800 font-bold bg-adlerbgbright">
            <div class="flex justify-center items-center pa-3 gap-2">
                <MudText Class="font-bold text-sm pt-1">@Localizer["AdaptivityContentDialog.Table.Header.Easy"]</MudText>
                <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonEasy"></MudIcon>
            </div>
        </MudTh>
        <MudTh Class="cursor-default text-adlerdarkblue-800 font-bold bg-adlerbgbright">
            <div class="flex justify-center items-center pa-3 gap-2">
                <MudText Class="font-bold text-sm pt-1">@Localizer["AdaptivityContentDialog.Table.Header.Medium"]</MudText>
                <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonMedium"></MudIcon>
            </div>
        </MudTh>
        <MudTh Class="cursor-default text-adlerdarkblue-800 font-bold bg-adlerbgbright">
            <div class="flex justify-center items-center pa-3 gap-2">
                <MudText Class="font-bold text-sm pt-1">@Localizer["AdaptivityContentDialog.Table.Header.Hard"]</MudText>
                <MudIcon Class="drop-shadow" Icon="@CustomIcons.DifficultyPolygonHard"></MudIcon>
            </div>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@Localizer["AdaptivityContentDialog.Table.Header.Tasks"]">
            <MudForm Model="context" @ref="_nameMudFormRefs[context]">
                <span class="inline-flex min-w-full">
                    <MudTextField Class="break-words"
                                  T="string"
                                  @bind-Value="@_nameValues[context]"
                                  Lines="2"
                                  Required="true"
                                  RequiredError="@Localizer["AdaptivityContentDialog.Table.Field.Name.RequiredError.Text"]"
                                  DebounceInterval="DebounceInterval"
                                  OnDebounceIntervalElapsed="s => RenameTask(context, s)"/>
                    <MudIconButton title="@Localizer["AdaptivityContent.Dialog.Table.Header.DeleteTask"]" Icon="@Icons.Material.Filled.Delete" OnClick="() => RemoveTask(context)"/>
                </span>
            </MudForm>
        </MudTd>
        <MudTd DataLabel="@Localizer["AdaptivityContentDialog.Table.Header.RequiredTask"]">
            <div class="flex justify-center">
                <MudCheckBox T="bool?" Value="@(context.MinimumRequiredDifficulty != null)" Disabled="true"/>
            </div>
        </MudTd>
        @foreach (var difficulty in Enum.GetValues(typeof(QuestionDifficulty)).Cast<QuestionDifficulty>())
        {
            <MudTd Class="p-1" DataLabel="@Localizer["AdaptivityContentDialog.Table.Header." + difficulty]">
                @if (GetTaskQuestionWithQuestionDifficulty(context, difficulty) is { } question)
                {
                    <div class="flex flex-row justify-between">

                        <div class="flex items-center justify-center">
                            <MudTooltip Placement="Placement.Right" Duration="double.Epsilon" Style="background: transparent;">
                                <ChildContent>
                                    <MudIconButton Disabled="true" Icon="@Icons.Material.Filled.RemoveRedEye"></MudIconButton>
                                </ChildContent>
                                <TooltipContent>
                                    <AdaptivityQuestionPreview
                                        AdaptivityQuestion="question">
                                    </AdaptivityQuestionPreview>
                                </TooltipContent>
                            </MudTooltip>
                        </div>

                        <div style="vertical-align: top; align-items: center;" class="flex flex-col justify-center items-center">

                            <MudButton Class="shadow btn-standard px-1 w-36 2xl:w-40 mt-2 relative" OnClick="() => AddOrEditQuestion(context, difficulty)">
                                <MudText Class="flex justify-start items-center uppercase font-bold text-xs 2xl:text-sm">@Localizer["AdaptivityContentDialog.Table.Button.Question." + difficulty]</MudText>
                                <div class="flex justify-end absolute w-2.5 h-1.5 top-0.5 -right-0.5 m-0.5">
                                    <MudIconButton title="@Localizer["AdaptivityContentDialog.Table.Button.Question.Delete"]" Class="w-2 h-2 close-button rounded-full text-adlerdarkblue bg-adlerblue-200 p-3 transform ease-in-out duration-75 active:drop-shadow-none hover:bg-adlerblue-200 hover:text-adlerdarkblue" Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="() => RemoveQuestion(context, difficulty)"></MudIconButton>
                                </div>
                            </MudButton>

                            <MudDivider></MudDivider>

                            <AdaptivityContentDialogRuleControl Question="question"/>
                        </div>

                        <div class="flex justify-center items-start">
                            <MudToggleIconButton Toggled="@context.MinimumRequiredDifficulty.Equals(difficulty)"
                                                 ToggledChanged="b => ChangeRequiredDifficulty(context, difficulty, b)"
                                                 ToggledIcon="@Icons.Material.Filled.Key"
                                                 Icon="@Icons.Material.Outlined.KeyOff"
                                                 title="@(context.MinimumRequiredDifficulty.Equals(difficulty) ? Localizer["AdaptivityContentDialog.Table.Button.RequiredQuestionIsSelected"] : Localizer["AdaptivityContentDialog.Table.Button.RequiredQuestion"])"
                                                 />
                        </div>
                    </div>
                }
                else
                {
                    <div style="vertical-align: center; align-items: center;" class="flex justify-center items-start">
                        <MudButton Variant="Variant.Filled" Class="btn-standard shadow px-1 w-36 2xl:w-40 mt-2 relative" OnClick="() => AddOrEditQuestion(context, difficulty)">
                            <MudText Class="flex justify-start items-center uppercase font-bold text-xs 2xl:text-sm">@Localizer["AdaptivityContentDialog.Table.Button.Question." + difficulty]</MudText>
                        </MudButton>
                    </div>
                }
            </MudTd>
        }

    </RowTemplate>
    <FooterContent>
        <MudTFootRow>
            <MudTd DataLabel="@Localizer["AdaptivityContentDialog.Table.Header.Tasks"]">
                <span class="inline-flex">
                    <MudIconButton title="@Localizer["AdaptivityContentDialog.Table.Header.NewTask"]" Icon="@Icons.Material.Filled.Add" OnClick="AddNewTask"/>
                </span>
            </MudTd>
            <MudTd DataLabel="@Localizer["AdaptivityContentDialog.Table.Header.RequiredTask"]"/>
            <MudTd DataLabel="@Localizer["AdaptivityContentDialog.Table.Header.Easy"]"/>
            <MudTd DataLabel="@Localizer["AdaptivityContentDialog.Table.Header.Medium"]"/>
            <MudTd DataLabel="@Localizer["AdaptivityContentDialog.Table.Header.Hard"]"/>
        </MudTFootRow>
    </FooterContent>
</MudTable>

@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IStringLocalizer<AdaptivityContentDialog> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IMapper Mapper { get; set; }

    [Parameter, EditorRequired] public AdaptivityContentFormModel MyContent { get; set; } = null!;

    [Parameter]
    public ILearningContentViewModel? ContentToEdit { get; set; }

    [Parameter] public int DebounceInterval { get; set; } = 300;

    // ReSharper disable once NotAccessedField.Local
    private MudTable<IAdaptivityTaskViewModel>? _table;

    private readonly Dictionary<IAdaptivityTaskViewModel, MudForm> _nameMudFormRefs = new();

    // ReSharper disable once CollectionNeverQueried.Local
    private readonly Dictionary<IAdaptivityTaskViewModel, string> _nameValues = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
        foreach (var task in MyContent.Tasks)
        {
            _nameValues.Add(task, task.Name);
            _nameMudFormRefs.Add(task, null!);
        }
    }

    private async Task MapIntoContainer()
    {
        Mapper.Map(MyContent, ContentToEdit);
        await InvokeAsync(StateHasChanged);
    }

    private async void AddNewTask()
    {
        PresentationLogic.CreateAdaptivityTask(MyContent, Localizer["AdaptivityContentDialog.NewTask.Name", MyContent.Tasks.Count + 1]);
        var lastTask = MyContent.Tasks.Last();
        _nameValues.Add(lastTask, lastTask.Name);
        _nameMudFormRefs.Add(lastTask, null!);
        await MapIntoContainer();
    }

    private async Task RenameTask(IAdaptivityTaskViewModel task, string text)
    {
        await _nameMudFormRefs[task].Validate();
        if (!_nameMudFormRefs[task].IsValid) return;
        PresentationLogic.EditAdaptivityTask(task, text, task.MinimumRequiredDifficulty);
    }

    private void ChangeRequiredDifficulty(IAdaptivityTaskViewModel task, QuestionDifficulty difficulty, bool setChecked)
    {
        PresentationLogic.EditAdaptivityTask(task, task.Name, setChecked ? difficulty : null);
    }

    private async Task RemoveTask(IAdaptivityTaskViewModel task)
    {
        if (ContentToEdit != null && ContentToEdit is AdaptivityContentViewModel adaptivityContentViewModel)
        {
            PresentationLogic.DeleteAdaptivityTask(adaptivityContentViewModel, task);
            Mapper.Map(ContentToEdit, MyContent);
        }
        else
        {
            PresentationLogic.DeleteAdaptivityTask(MyContent, task);
        }

        _nameValues.Remove(task);
        _nameMudFormRefs.Remove(task);
        await MapIntoContainer();
    }

    private async Task AddOrEditQuestion(IAdaptivityTaskViewModel task, QuestionDifficulty difficulty)
    {
        var options = new DialogOptions
        {
            BackdropClick = true,
            MaxWidth = MaxWidth.ExtraExtraLarge,
            FullWidth = false,
            NoHeader = true,
            CloseButton = true,
        };
        var dialog = await DialogService.ShowAsync<AdaptivityQuestionDialog>("", new DialogParameters()
        {
            { nameof(AdaptivityQuestionDialog.Task), task },
            { nameof(AdaptivityQuestionDialog.Difficulty), difficulty }
        }, options);
        _ = await dialog.Result;
        await InvokeAsync(StateHasChanged);
    }

    private void RemoveQuestion(IAdaptivityTaskViewModel task, QuestionDifficulty difficulty)
    {
        if (task.Questions.FirstOrDefault(x => x.Difficulty == difficulty) is { } question)
        {
            PresentationLogic.DeleteAdaptivityQuestion(task, question);
        }
    }

    private static IAdaptivityQuestionViewModel? GetTaskQuestionWithQuestionDifficulty(IAdaptivityTaskViewModel context, QuestionDifficulty questionDifficulty)
    {
        return context.Questions.FirstOrDefault(x => x.Difficulty == questionDifficulty);
    }

}
