@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Shared.Adaptivity
@using Presentation.PresentationLogic.API
@using System.Diagnostics.CodeAnalysis
<h3>AdaptivityContentDialog</h3>
<MudTable @ref="@_table" Items="@MyContent.Tasks" Height="500px" Outlined="true" Style="border: 2px solid black; margin: 5px;"
          FixedHeader="true"
          FixedFooter="false" CustomFooter="true"
          Bordered="true">
    <HeaderContent>
        <MudTh>Aufgaben</MudTh>
        <MudTh>verpflichtende Aufgabe</MudTh>
        <MudTh>leicht</MudTh>
        <MudTh>mittelschwer</MudTh>
        <MudTh>schwer</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Aufgaben">
            <span class="inline-flex">
                <MudTextField DebounceInterval="300" OnDebounceIntervalElapsed="(t) => RenameTask(context, t)" Value="@context.Name"/>
                <MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="() => RemoveTask(context)"/>
            </span>
        </MudTd>
        <MudTd DataLabel="verpflichtende Aufgabe">
            <MudCheckBox T="bool?" Checked="@(context.MinimumRequiredDifficulty != null)" Disabled="true"/>
        </MudTd>
        <MudTd DataLabel="leicht">
            @if (context.Questions.FirstOrDefault(x => x.Difficulty == QuestionDifficulty.Easy) != null)
            {
                <MudToggleIconButton Toggled="@context.MinimumRequiredDifficulty.Equals(QuestionDifficulty.Easy)"
                                     ToggledChanged="b => ChangeDifficulty(context, QuestionDifficulty.Easy, b)"
                                     ToggledIcon="@Icons.Material.Filled.Key" Icon="@Icons.Material.Outlined.KeyOff"/>
            }
            @if (@context.Questions.FirstOrDefault(x => x.Difficulty == QuestionDifficulty.Easy) == null)
            {
                <MudButton OnClick="() => AddQuestion(context, QuestionDifficulty.Easy)">Add Easy Question</MudButton>
            }
            else
            {
                <MudButton OnClick="() => RemoveQuestion(context, QuestionDifficulty.Easy)">Remove Easy Question</MudButton>
            }
        </MudTd>
        <MudTd DataLabel="mittelschwer">
            @if (context.Questions.FirstOrDefault(x => x.Difficulty == QuestionDifficulty.Medium) != null)
            {
                <MudToggleIconButton Toggled="@context.MinimumRequiredDifficulty.Equals(QuestionDifficulty.Medium)"
                                     ToggledChanged="b => ChangeDifficulty(context, QuestionDifficulty.Medium, b)"
                                     ToggledIcon="@Icons.Material.Filled.Key" Icon="@Icons.Material.Outlined.KeyOff"/>
            }
            @if (@context.Questions.FirstOrDefault(x => x.Difficulty == QuestionDifficulty.Medium) == null)
            {
                <MudButton OnClick="() => AddQuestion(context, QuestionDifficulty.Medium)">Add Medium Question</MudButton>
            }
            else
            {
                <MudButton OnClick="() => RemoveQuestion(context, QuestionDifficulty.Medium)">Remove Medium Question</MudButton>
            }
        </MudTd>
        <MudTd DataLabel="schwer">
            @if (context.Questions.FirstOrDefault(x => x.Difficulty == QuestionDifficulty.Hard) != null)
            {
                <MudToggleIconButton Toggled="@context.MinimumRequiredDifficulty.Equals(QuestionDifficulty.Hard)"
                                     ToggledChanged="b => ChangeDifficulty(context, QuestionDifficulty.Hard, b)"
                                     ToggledIcon="@Icons.Material.Filled.Key" Icon="@Icons.Material.Outlined.KeyOff"/>
            }
            @if (@context.Questions.FirstOrDefault(x => x.Difficulty == QuestionDifficulty.Hard) == null)
            {
                <MudButton OnClick="() => AddQuestion(context, QuestionDifficulty.Hard)">Add Hard Question</MudButton>
            }
            else
            {
                <MudButton OnClick="() => RemoveQuestion(context, QuestionDifficulty.Hard)">Remove Hard Question</MudButton>
            }
        </MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTFootRow>
            <MudTd DataLabel="Aufgaben">
                <span class="inline-flex">
                    <MudTextField T="string" @bind-Value="@_newTaskName"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddNewTask"/>
                </span>
            </MudTd>
            <MudTd DataLabel="verpflichtende Aufgabe"/>
            <MudTd DataLabel="leicht"/>
            <MudTd DataLabel="mittelschwer"/>
            <MudTd DataLabel="schwer"/>
        </MudTFootRow>
    </FooterContent>
</MudTable>

@code {

    [Parameter, EditorRequired]
    public IAdaptivityContentViewModel MyContent { get; set; } = null!;

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IDialogService DialogService { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IPresentationLogic PresentationLogic { get; set; }

    private string _newTaskName = "";

    private MudTable<IAdaptivityTaskViewModel>? _table;

    private void AddNewTask()
    {
    //MyContent.Tasks.Add(new AdaptivityTaskViewModel(new List<IAdaptivityQuestionViewModel>(), QuestionDifficulty.Medium, _newTaskName.Length > 0 ? _newTaskName : "New Task " + MyContent.Tasks.Count()));
        PresentationLogic.CreateAdaptivityTask(MyContent, _newTaskName.Length > 0 ? _newTaskName : "New Task " + (MyContent.Tasks.Count() + 1));
        _newTaskName = "";
    }

    private void RenameTask(IAdaptivityTaskViewModel task, string text)
    {
        PresentationLogic.EditAdaptivityTask(task, text, task.MinimumRequiredDifficulty);
    }

    private void ChangeDifficulty(IAdaptivityTaskViewModel task, QuestionDifficulty difficulty, bool setChecked)
    {
        PresentationLogic.EditAdaptivityTask(task, task.Name, setChecked ? difficulty : null);
    }

    private void RemoveTask(IAdaptivityTaskViewModel task)
    {
        PresentationLogic.DeleteAdaptivityTask(MyContent, task);
    }

    private async void AddQuestion(IAdaptivityTaskViewModel task, QuestionDifficulty difficulty)
    {
        var options = new DialogOptions
        {
            DisableBackdropClick = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
        };
        var dialog = await DialogService.ShowAsync<AdaptivityQuestionDialog>("AdaptivityQuestionDialogTitle", new DialogParameters() {{"Task", task}, {"Difficulty", difficulty}}, options);
        var result = await dialog.Result;
        await InvokeAsync(StateHasChanged);
    }

    private void RemoveQuestion(IAdaptivityTaskViewModel task, QuestionDifficulty difficulty)
    {
        if (task.Questions.FirstOrDefault(x => x.Difficulty == difficulty) != null)
        {
            task.Questions.Remove(task.Questions.FirstOrDefault(x => x.Difficulty == difficulty)!);
        }
    }

}