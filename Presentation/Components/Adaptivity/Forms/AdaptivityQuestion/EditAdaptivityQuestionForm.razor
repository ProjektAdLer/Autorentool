@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Microsoft.Extensions.Localization
@using Presentation.Components.Adaptivity.Forms.Models
@using Presentation.Components.Forms
@using Presentation.PresentationLogic.API
@using BusinessLogic.Entities.LearningContent.Adaptivity.Question
@using AutoMapper
@using System.Diagnostics.CodeAnalysis
<BaseForm TForm="MultipleChoiceQuestionFormModel" TEntity="IMultipleChoiceQuestion" @ref="_editQuestionForm"
          OnValidSubmit="OnValidSubmit"
          SnackbarMessage=@Localizer["EditAdaptivityQuestionForm.SnackbarMessage"]
          FormDataContainer="FormDataContainer"
          CustomValidatorFunc="ValidateModel">
    <Fields>

        <div class="rounded-lg w-4/4 px-4 pb-2">
            <MudTextField @bind-Value="FormDataContainer.FormModel.Title"
                          For="@(() => FormModel.Title)"
                          DebounceInterval="DebounceInterval"
                          Label=@Localizer["EditAdaptivityQuestionForm.Field.Title.Text"]
                          Class="pb-4"/>

            <MudTextField @bind-Value="FormDataContainer.FormModel.Text"
                          For="@(() => FormModel.Text)"
                          Lines="3"
                          Variant="Variant.Outlined"
                          DebounceInterval="DebounceInterval"
                          Label="@Localizer["EditAdaptivityQuestionForm.Field.QuestionText.Text"]"
                          Class="pb-4 mt-0"/>

            <MudCheckBox T="bool" Checked="FormDataContainer.FormModel.IsSingleResponse" CheckedChanged="b => IsSingleResponseChanged((bool) b!)"
                         For="@(() => FormModel.IsSingleResponse)" Label="IsSingleResponse">
            </MudCheckBox>
        </div>

        <MudText>@Localizer["EditAdaptivityQuestionForm.Text.Choices"]</MudText>
        <div class="rounded-lg w-4/4 px-4">
            <br/>
            @if (FormModel.IsSingleResponse)
            {
                <MudRadioGroup T="ChoiceViewModel" SelectedOption="FormModel.CorrectChoices.First()" SelectedOptionChanged="ChangeCorrectChoice">
                    @foreach (var choice in FormDataContainer.FormModel.Choices)
                    {
                        <div class="inline-flex">
                            <MudRadio Option="choice"/>
                            <MudForm Model="choice" Validation="ValidateChoiceModel">
                                <MudTextField T="string" For="@(() => choice.Text)"
                                              @bind-Value="@choice.Text">
                                </MudTextField>
                            </MudForm>
                            <MudIconButton OnClick="() => RemoveChoice(choice)" Icon="@Icons.Material.Filled.Delete" Disabled="FormModel.Choices.Count <= 2"></MudIconButton>

                        </div>
                        <br/>
                    }
                </MudRadioGroup>
            }
            else
            {
                @foreach (var choice in FormDataContainer.FormModel.Choices)
                {
                    <div class="inline-flex">
                        <MudCheckBox T="bool"
                                     Checked="FormDataContainer.FormModel.CorrectChoices.Contains(choice)"
                                     CheckedChanged="b => ChangeCorrectness(choice, (bool) b!)"/>

                        <MudForm Model="choice" Validation="ValidateChoiceModel">
                            <MudTextField T="string" For="@(() => choice.Text)"
                                          @bind-Value="@choice.Text">
                            </MudTextField>
                        </MudForm>
                        <MudIconButton OnClick="() => RemoveChoice(choice)" Icon="@Icons.Material.Filled.Delete" Disabled="FormModel.Choices.Count <= 2"></MudIconButton>
                    </div>
                    <br/>
                }
            }
        </div>

        <div class="rounded-lg w-4/4 px-4">

            <span class="inline-flex">
                <MudButton OnClick="AddChoice" EndIcon="@Icons.Material.Filled.Add">@Localizer["EditAdaptivityQuestionForm.Text.AddChoice"]</MudButton>
            </span>
        </div>

    </Fields>
    <FooterButtons>
        <MudButton OnClick="() => { _editQuestionForm?.SubmitAsync(); }">@Localizer["EditAdaptivityQuestionForm.Button.Edit"]</MudButton>
    </FooterButtons>
</BaseForm>

@code {

    [Parameter, EditorRequired]
    public IMultipleChoiceQuestionViewModel QuestionToEdit { get; set; } = null!;

    [Parameter, EditorRequired]
    public IAdaptivityTaskViewModel Task { get; set; } = null!;

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IStringLocalizer<EditAdaptivityQuestionForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IFormDataContainer<MultipleChoiceQuestionFormModel, IMultipleChoiceQuestion> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    private IValidationWrapper<Choice> ChoiceValidator { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull]
    internal IValidationWrapper<MultipleChoiceMultipleResponseQuestion> MultipleResponseQuestionValidator { get; set; }

    [Inject, AllowNull]
    internal IValidationWrapper<MultipleChoiceSingleResponseQuestion> SingleResponseQuestionValidator { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IMapper Mapper { get; set; }

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public EventCallback OnSubmitted { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;


    private MultipleChoiceQuestionFormModel FormModel => FormDataContainer.FormModel;
    private BaseForm<MultipleChoiceQuestionFormModel, IMultipleChoiceQuestion>? _editQuestionForm;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await MapIntoContainer();
    }

    private async Task MapIntoContainer()
    {
        Mapper.Map(QuestionToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    private void OnValidSubmit(MultipleChoiceQuestionFormModel model)
    {
        if ((QuestionToEdit is MultipleChoiceMultipleResponseQuestionViewModel && model.IsSingleResponse) ||
            (QuestionToEdit is MultipleChoiceSingleResponseQuestionViewModel && !model.IsSingleResponse))
        {
            PresentationLogic.EditMultipleChoiceQuestionWithTypeChange(Task, QuestionToEdit, model.IsSingleResponse, model.Title, model.Text, model.Choices, model.CorrectChoices, model.ExpectedCompletionTime);
        }
        switch (QuestionToEdit)
        {
            case MultipleChoiceSingleResponseQuestionViewModel singleResponseQuestion:
                PresentationLogic.EditMultipleChoiceSingleResponseQuestion(singleResponseQuestion, model.Title, model.Text, model.Choices, model.CorrectChoices.First(), model.ExpectedCompletionTime);
                break;
            case MultipleChoiceMultipleResponseQuestionViewModel multipleResponseQuestion:
                PresentationLogic.EditMultipleChoiceMultipleResponseQuestion(multipleResponseQuestion, model.Title, model.Text, model.Choices, model.CorrectChoices, model.ExpectedCompletionTime);
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(QuestionToEdit), "Question to edit is not a valid type");
        }

        OnSubmitted.InvokeAsync();
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void AddChoice()
    {
        FormDataContainer.FormModel.Choices.Add(
            new ChoiceViewModel(Localizer["EditAdaptivityQuestionForm.Text.Choice"] + " " + (FormDataContainer.FormModel.Choices.Count + 1))
            );
    }

    private void RemoveChoice(ChoiceViewModel choice)
    {
        FormDataContainer.FormModel.Choices.Remove(choice);
        FormDataContainer.FormModel.CorrectChoices.Remove(choice);
    }

    private void ChangeCorrectness(ChoiceViewModel choice, bool b)
    {
        if (b)
        {
            FormDataContainer.FormModel.CorrectChoices.Add(choice);
        }
        else
        {
            var choiceToRemove = FormDataContainer.FormModel.CorrectChoices.FirstOrDefault(x => x.Id == choice.Id);
            if (choiceToRemove != null)
                FormDataContainer.FormModel.CorrectChoices.Remove(choiceToRemove);
        }
    }

    private Func<object, string, Task<IEnumerable<string>>> ValidateModel => (async (_, propertyName) =>
    {
        var modelEntity = FormDataContainer.GetMappedEntity();
        return modelEntity switch
        {
            MultipleChoiceSingleResponseQuestion singleResponseQuestion => await SingleResponseQuestionValidator.ValidateAsync(singleResponseQuestion, propertyName),
            MultipleChoiceMultipleResponseQuestion multipleResponseQuestion => await MultipleResponseQuestionValidator.ValidateAsync(multipleResponseQuestion, propertyName),
            _ => throw new ArgumentOutOfRangeException(nameof(modelEntity), "Model entity is not a valid type")
            };
    });

    private Func<object, string, Task<IEnumerable<string>>> ValidateChoiceModel => (async (obj, propertyName) =>
    {
        var modelEntity = Mapper.Map<ChoiceViewModel, Choice>((ChoiceViewModel) obj);
        return await ChoiceValidator.ValidateAsync(modelEntity, propertyName);
    });

    private void ChangeCorrectChoice(ChoiceViewModel correctChoice)
    {
        FormModel.CorrectChoices.Clear();
        FormModel.CorrectChoices.Add(correctChoice);
    }

    private void IsSingleResponseChanged(bool isSingleResponse)
    {
        FormModel.IsSingleResponse = isSingleResponse;
        if (!FormModel.IsSingleResponse) return;
        switch (FormModel.CorrectChoices.Count)
        {
            case > 1:
            {
                var correctChoice = FormModel.CorrectChoices.First();
                FormModel.CorrectChoices.Clear();
                FormModel.CorrectChoices.Add(correctChoice);
                break;
            }
            case 0:
                FormModel.CorrectChoices.Add(FormModel.Choices.First());
                break;
        }
    }

}