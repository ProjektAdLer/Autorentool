@using Microsoft.Extensions.Localization
@using Presentation.Components.Adaptivity.Forms.Models
@using Presentation.Components.Forms
@using Presentation.PresentationLogic.API
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent
@using Presentation.PresentationLogic.LearningContent.AdaptivityContent.Question
@using Shared.Adaptivity
@using BusinessLogic.Entities.LearningContent.Adaptivity.Question
@using AutoMapper
@using System.Diagnostics.CodeAnalysis

<div class="w-full flex flex-row items-center justify-between cursor-default">
    <MudText Class="px-2" Typo="Typo.h6">
        @(Task.Questions.FirstOrDefault(x => x.Difficulty == Difficulty) == null
            ? Localizer["MultipleChoiceQuestionForm.TitleContent.Create." + Difficulty]
            : Localizer["MultipleChoiceQuestionForm.TitleContent.Edit." + Difficulty])
    </MudText>
    <MudIconButton Icon="@Icons.Material.Filled.Close" DisableElevation="true" OnClick="() => OnSubmitted.InvokeAsync()" ButtonType="ButtonType.Submit" Class="relative items-center flex justify-end"/>
</div>

<MudText Class="p-2 text-sm cursor-default">@Localizer["MultipleChoiceQuestionForm.Create.Text"]</MudText>

    <BaseForm TForm="MultipleChoiceQuestionFormModel" TEntity="IMultipleChoiceQuestion" @ref="_questionForm"
              OnValidSubmit="OnValidSubmit"
              SnackbarMessage=@(QuestionToEdit == null ? Localizer["MultipleChoiceQuestionForm.Create.SnackbarMessage"] : Localizer["MultipleChoiceQuestionForm.Edit.SnackbarMessage"])
              FormDataContainer="FormDataContainer"
              CustomValidatorFunc="ValidateModel">
        
        <Fields>
            <div class="border-4 border-adlerdarkblue rounded-lg w-[500px] p-2">
                <div class="flex flex-col gap-1">
                    <MudText Class="cursor-default font-bold text-sm pl-2">@Localizer["MultipleChoiceQuestionForm.Field.QuestionText.Text"]</MudText>
                    <div class="border-4 border-adlergrey-100 rounded-md mx-1.5">
                        <MudTextField @bind-Value="FormDataContainer.FormModel.Text"
                                      For="@(() => FormModel.Text)"
                                      Placeholder="Textfeld"
                                      t="string"
                                      Lines="3"
                                      Variant="Variant.Outlined"
                                      Class="m-0"/>
                    </div>
                    
                    <MudSwitch T="bool"
                               Class="flex items-center justify-center"
                               Checked="FormDataContainer.FormModel.IsSingleResponse"
                               CheckedChanged="b => IsSingleResponseChanged((bool)b!)"
                               For="@(() => FormModel.IsSingleResponse)">
                               
                               @if (FormDataContainer.FormModel.IsSingleResponse == true)
                               {
                                   <MudText>@Localizer["MultipleChoiceQuestionForm.Switch.SingleChoice"]</MudText>
                               }
                               else
                               {
                                   <MudText>@Localizer["MultipleChoiceQuestionForm.Switch.MultipleChoice"]</MudText>
                               }
                    </MudSwitch>
                </div>

                <MudText Class="cursor-default font-bold text-sm pl-2">@Localizer["MultipleChoiceQuestionForm.Text.Choices"]</MudText>
                <MudCollectionValidation T="ICollection<ChoiceViewModel>" Value="FormModel.CorrectChoices" For="@(() => FormModel.CorrectChoices)"/>
           
            <div class="flex justify-center items-center w-full px-2 overflow-y-auto">
                @if (FormModel.IsSingleResponse)
                {
                    
                        <MudRadioGroup T="ChoiceViewModel" SelectedOption="FormModel.CorrectChoices.First()" SelectedOptionChanged="ChangeCorrectChoice" Class="overflow-y-auto">
                            <div class="overflow-y-scroll w-[460px] h-56 border-4 border-adlergrey-100 rounded-md">
                            @foreach (var choice in FormDataContainer.FormModel.Choices)
                            {
                                <div class="flex flex-row justify-center items-center">
                                    <MudRadio Size="Size.Small"
                                              Option="choice"
                                              Class="flex justify-center items-center m-0"/>
                                    <MudForm Model="choice" Validation="ValidateChoiceModel">
                                        <MudTextField T="string"
                                                      Class="w-[350px]"
                                                      For="@(() => choice.Text)"
                                                      @bind-Value="@choice.Text">
                                        </MudTextField>
                                    </MudForm>
                                    <MudIconButton OnClick="() => RemoveChoice(choice)"
                                                   Icon="@Icons.Material.Filled.Delete"
                                                   Disabled="FormModel.Choices.Count <= 2"
                                                   Size="Size.Small"
                                                   Class="w-10 h-10"/>

                                </div>
                            }</div>
                        </MudRadioGroup>
                    
                }
                else
                {
                    <div class="overflow-y-scroll w-[460px] h-56 border-4 border-adlergrey-100 rounded-md">
                    @foreach (var choice in FormDataContainer.FormModel.Choices)
                    {
                        <div class="flex flex-row justify-center items-center">
                            <MudCheckBox T="bool"
                                         Checked="FormDataContainer.FormModel.CorrectChoices.Contains(choice)"
                                         CheckedChanged="b => ChangeCorrectness(choice, (bool) b!)"
                                         Class="flex justify-center items-center m-0"
                                         Size="Size.Small"/>

                            <MudForm Model="choice" Validation="ValidateChoiceModel">
                                <MudTextField T="string"
                                              Class="w-[350px]"
                                              For="@(() => choice.Text)"
                                              @bind-Value="@choice.Text">
                                </MudTextField>
                            </MudForm>
                            <MudIconButton OnClick="() => RemoveChoice(choice)"
                                           Icon="@Icons.Material.Filled.Delete"
                                           Disabled="FormModel.Choices.Count <= 2"
                                           Size="Size.Small"
                                           Class="w-10 h-10"/>
                        </div>
                    }
                    </div>
                }
            </div>

            <div class="flex justify-end items-center py-2">
                <MudButton OnClick="AddChoice"
                           Disabled="@(FormModel.Choices.Count >= 10)"
                           StartIcon="@Icons.Material.Filled.Add"
                           Class="normal-case text-adlergrey text-xs"
                           IconSize="Size.Small">
                    @Localizer["MultipleChoiceQuestionForm.Text.AddChoice"]
                </MudButton>
            </div>
        </div>
        </Fields>
        
        <FooterButtons>
            <MudButton Class="btn-standard m-0" OnClick="() => { _questionForm?.SubmitAsync(); }">
                @(QuestionToEdit == null ? Localizer["MultipleChoiceQuestionForm.Button.Create"] : Localizer["MultipleChoiceQuestionForm.Button.Edit"])
            </MudButton>
        </FooterButtons>
        
    </BaseForm>


@code {

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IStringLocalizer<MultipleChoiceQuestionForm> Localizer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IFormDataContainer<MultipleChoiceQuestionFormModel, IMultipleChoiceQuestion> FormDataContainer { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IMapper Mapper { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IValidationWrapper<Choice> ChoiceValidator { get; set; }

    [Inject, AllowNull] //can never be null, DI will throw exception on unresolved types
    internal IPresentationLogic PresentationLogic { get; set; }

    [Inject, AllowNull]
    internal IValidationWrapper<MultipleChoiceMultipleResponseQuestion> MultipleResponseQuestionValidator { get; set; }

    [Inject, AllowNull]
    internal IValidationWrapper<MultipleChoiceSingleResponseQuestion> SingleResponseQuestionValidator { get; set; }

    [Parameter, EditorRequired]
    public IAdaptivityTaskViewModel Task { get; set; } = null!;

    [Parameter, EditorRequired]
    public QuestionDifficulty Difficulty { get; set; }

    [Parameter, EditorRequired]
    public IMultipleChoiceQuestionViewModel? QuestionToEdit { get; set; }

    [Parameter]
    public EventCallback OnSubmitted { get; set; }

    [Parameter]
    public int DebounceInterval { get; set; } = 300;

    private MultipleChoiceQuestionFormModel FormModel => FormDataContainer.FormModel;

    private BaseForm<MultipleChoiceQuestionFormModel, IMultipleChoiceQuestion>? _questionForm;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (QuestionToEdit == null && FormDataContainer.FormModel.Choices.Count == 0)
        {
            AddChoice();
            AddChoice();
        }
        else
        {
            await MapIntoContainer();
        }
    }

    private async Task MapIntoContainer()
    {
        Mapper.Map(QuestionToEdit, FormDataContainer.FormModel);
        await InvokeAsync(StateHasChanged);
    }

    private void OnValidSubmit(MultipleChoiceQuestionFormModel model)
    {
        if (QuestionToEdit == null)
        {
            CreatQuestionOnValidSubmit(model);
        }
        else
        {
            EditQuestionOnValidSubmit(model);
        }
        OnSubmitted.InvokeAsync();
    }

    private void CreatQuestionOnValidSubmit(MultipleChoiceQuestionFormModel model)
    {
        if (model.IsSingleResponse)
        {
            PresentationLogic.CreateMultipleChoiceSingleResponseQuestion(Task, Difficulty, model.Text,
                model.Choices, model.CorrectChoices.First(), model.ExpectedCompletionTime);
        }
        else
        {
            PresentationLogic.CreateMultipleChoiceMultipleResponseQuestion(Task, Difficulty, model.Text,
                model.Choices, model.CorrectChoices, model.ExpectedCompletionTime);
        }
    }

    private void EditQuestionOnValidSubmit(MultipleChoiceQuestionFormModel model)
    {
        if ((QuestionToEdit is MultipleChoiceMultipleResponseQuestionViewModel && model.IsSingleResponse) ||
            (QuestionToEdit is MultipleChoiceSingleResponseQuestionViewModel && !model.IsSingleResponse))
        {
            PresentationLogic.EditMultipleChoiceQuestionWithTypeChange(Task, QuestionToEdit, model.IsSingleResponse,
                model.Text, model.Choices, model.CorrectChoices, model.ExpectedCompletionTime);
        }
        switch (QuestionToEdit)
        {
            case MultipleChoiceSingleResponseQuestionViewModel singleResponseQuestion:
                PresentationLogic.EditMultipleChoiceSingleResponseQuestion(singleResponseQuestion, model.Text,
                    model.Choices, model.CorrectChoices.First(), model.ExpectedCompletionTime);
                break;
            case MultipleChoiceMultipleResponseQuestionViewModel multipleResponseQuestion:
                PresentationLogic.EditMultipleChoiceMultipleResponseQuestion(multipleResponseQuestion, model.Text,
                    model.Choices, model.CorrectChoices, model.ExpectedCompletionTime);
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(QuestionToEdit), "Question to edit is not a valid type");
        }
    }

    private void AddChoice()
    {
        var choice = new ChoiceViewModel(Localizer["MultipleChoiceQuestionForm.Text.Choice"] + " " + (FormDataContainer.FormModel.Choices.Count + 1));
        FormDataContainer.FormModel.Choices.Add(choice);
    }

    private void RemoveChoice(ChoiceViewModel choice)
    {
        FormDataContainer.FormModel.Choices.Remove(choice);
        FormDataContainer.FormModel.CorrectChoices.Remove(choice);
    }

    private void ChangeCorrectness(ChoiceViewModel choice, bool b)
    {
        if (b)
        {
            FormDataContainer.FormModel.CorrectChoices.Add(choice);
        }
        else
        {
            var choiceToRemove = FormDataContainer.FormModel.CorrectChoices.FirstOrDefault(x => x.Id == choice.Id);
            if (choiceToRemove != null)
                FormDataContainer.FormModel.CorrectChoices.Remove(choiceToRemove);
        }
    }

    private Func<object, string, Task<IEnumerable<string>>> ValidateModel => (async (_, propertyName) =>
    {
        var modelEntity = FormDataContainer.GetMappedEntity();
        return modelEntity switch
        {
            MultipleChoiceSingleResponseQuestion singleResponseQuestion => await SingleResponseQuestionValidator.ValidateAsync(singleResponseQuestion, propertyName),
            MultipleChoiceMultipleResponseQuestion multipleResponseQuestion => await MultipleResponseQuestionValidator.ValidateAsync(multipleResponseQuestion, propertyName),
            _ => throw new ArgumentOutOfRangeException(nameof(modelEntity), "Model entity is not a valid type")
            };
    });

    private Func<object, string, Task<IEnumerable<string>>> ValidateChoiceModel => (async (obj, propertyName) =>
    {
        var modelEntity = Mapper.Map<ChoiceViewModel, Choice>((ChoiceViewModel) obj);
        return await ChoiceValidator.ValidateAsync(modelEntity, propertyName);
    });

    private void ChangeCorrectChoice(ChoiceViewModel correctChoice)
    {
        FormModel.CorrectChoices.Clear();
        FormModel.CorrectChoices.Add(correctChoice);
    }

    private void IsSingleResponseChanged(bool isSingleResponse)
    {
        FormModel.IsSingleResponse = isSingleResponse;
        if (!FormModel.IsSingleResponse) return;
        switch (FormModel.CorrectChoices.Count)
        {
            case > 1:
            {
                var correctChoice = FormModel.Choices.First(x => FormModel.CorrectChoices.Contains(x));
                FormModel.CorrectChoices.Clear();
                FormModel.CorrectChoices.Add(correctChoice);
                break;
            }
            case 0:
                FormModel.CorrectChoices.Add(FormModel.Choices.First());
                break;
        }
    }

}