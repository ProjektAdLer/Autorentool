
<h3>DropZone</h3>

<div @ref="dropZoneElement" class="drop-zone">
    <label for="inputFileElement">Drop a file or paste an image from the clipboard or select a file using the input</label>
    <InputFile id="inputFileElement" OnChange="@OnChange" @ref="inputFile" accept=".awf,.asf,.aef,.jpg,.png,.webp,.bmp,.txt,.c,.h,.cpp,.cc,.c++,.py.,.cs,.js,.php,.html,.css,.h5p,.pdf"/>
</div>

@code {
    [Inject]
    public ILogger<DropZone> Logger { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<Tuple<string, MemoryStream>> OnNewStream { get; set; }


    ElementReference dropZoneElement;
    InputFile? inputFile;


    async Task OnChange(InputFileChangeEventArgs eventArgs)
    {
        var myS = new MemoryStream();
        try
        {
            await eventArgs.File.OpenReadStream(1073741824L).CopyToAsync(myS);
            myS.Position = 0;
            await OnNewStream.InvokeAsync(new Tuple<string, MemoryStream>(eventArgs.File.Name, myS));
        }
        catch (Exception e)
        {
            Logger.LogDebug("{EMessage} {InnerExceptionMessage}", e.Message, e.InnerException?.Message);
        }
        finally
        {
            myS.Close();
        }
    }
}