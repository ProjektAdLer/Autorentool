@using AuthoringTool.Extensions
@typeparam TItem

<div class="grid-layout-display-root">
     @if (HeaderTitle != null)
     {
          <div class="header">
               <h4>@HeaderTitle</h4>
          </div>
     }
     <div class="content container">
          @{
               foreach (var row in Items.Split(ItemsPerRow!.Value))
               {
                    <div class="row justify-content-center">
                         @foreach (var element in row)
                         {
                              @ItemRenderTemplate(element)
                         }
                    </div>
               }
          }
     </div>
</div>

@code {
     protected override void OnParametersSet()
     {
          base.OnParametersSet();
          HeaderTitle ??= null;
          ItemsPerRow ??= 3;
     }

     //null! because Rider doesn't understand [Parameter, EditorRequired] combination sets parameters
     //before any of our code is executed.
     ///<summary>Items to be displayed in the grid layout display.</summary>
     [Parameter, EditorRequired]
     public IEnumerable<TItem> Items { get; set; } = null!;

     ///<summary>Template component of how items should be rendered.</summary>
     [Parameter, EditorRequired]
     public RenderFragment<TItem> ItemRenderTemplate { get; set; } = null!;

     ///<summary>(Optional) Title displayed in the header above the items.</summary>
     [Parameter]
     public string? HeaderTitle { get; set; }
     
     ///<summary>(Optional) How many items should be displayed per row, defaults to 3.</summary>
     [Parameter]
     public uint? ItemsPerRow { get; set; }

}