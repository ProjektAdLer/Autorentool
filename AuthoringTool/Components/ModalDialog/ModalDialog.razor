@using System.Collections
@using System.ComponentModel
@using System.Threading.Tasks
<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                @if (DialogType is ModalDialogType.DeleteCancel or ModalDialogType.OkCancel or ModalDialogType.YesNoCancel)
                {
                    //Only display X in the Dialog if ModalDialogType contains Cancel.
                    <button type="button" class="close" @onclick="() => ModalTryClose(ModalDialogReturnValue.Cancel)">&times;</button>
                }
            </div>
            <div class="modal-body">
                <span style="white-space: pre-line">
                    @Text
                </span>
                @if (RequiredFieldsWarning && InputFields != null && InputFields.Any(FieldRequiredAndNotFilled))
                {
                    //Display the warning only if user tried to submit without required field and there are still fields
                    //that are required and not yet filled (in turn, it disappears as soon as it is filled out).
                    <div class="modal-input-warning">
                        <p><i class="bi bi-exclamation-triangle"></i> Please fill out: 
                            @foreach (var field in InputFields.Where(FieldRequiredAndNotFilled))
                            {
                                <span>@($"-{field.Name} ")</span>
                            }
                        </p>
                    </div>
                }
                @if (InputFields?.Count() > 0)
                {
                    <div class="modal-input container">
                        @foreach (var input in InputFields)
                        {
                            <div class="row pb-2 align-items-center">
                                <div class="col">@input.Name</div>
                                <div class="col">
                                    @if (input is ModalDialogDropdownInputField dropdownInput)
                                    {
                                        <select @onchange="args => { if (args.Value != null) _inputFieldValues[input.Name] = (string)args.Value; EnsureDropdownsUpdated(); }"
                                                value="@_inputFieldValues[input.Name]"
                                                disabled="@(!IsUnlocked(dropdownInput))" id="modal-input-drop-@input.Name.ToLower()">
                                            @if (_inputFieldValues[input.Name] == "")
                                            {
                                                <option value=""></option>
                                            }
                                            @if (IsUnlocked(dropdownInput))
                                            {
                                                @foreach (var option in dropdownInput.ValuesToChoiceMapping.First(MappingSatisfied).AvailableChoices)
                                                {
                                                    <option value="@option" id="modal-input-drop-@input.Name.ToLower()-@option.ToLower()">@option</option>
                                                }
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        var fieldType = input.Type.ToString().ToLower();
                                        //we are binding the oninput event to the value in our dictionary
                                        <input id="@($"modal-input-field-{input.Name.ToLower()}")"
                                               type="@fieldType"
                                               placeholder="@input.Name"
                                               value="@_inputFieldValues[input.Name]"
                                               @oninput="@(e => { if (e.Value != null) 
                                                             _inputFieldValues[input.Name] = (string)e.Value;  })"
                                               @onkeydown="@(e => {if (e.Code == "Enter") 
                                                               TryCloseWithPositiveResult();})"/>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="modal-footer">
                @switch (DialogType)
                {
                    case ModalDialogType.Ok:
                        <button type="button" class="btn btn-primary" id="btn-ok" @onclick="() => ModalTryClose(ModalDialogReturnValue.Ok)">OK</button>
                        break;
                    case ModalDialogType.OkCancel:
                        <button type="button" class="btn btn-warning" id="btn-cancel" @onclick="() => ModalTryClose(ModalDialogReturnValue.Cancel)">Cancel</button>
                        <button type="button" class="btn btn-success" id="btn-ok" @onclick="() => ModalTryClose(ModalDialogReturnValue.Ok)">OK</button>
                        break;
                    case ModalDialogType.DeleteCancel:
                        <button type="button" class="btn btn-warning" id="btn-cancel" @onclick="() => ModalTryClose(ModalDialogReturnValue.Cancel)">Cancel</button>
                        <button type="button" class="btn btn-danger" id="btn-delete" @onclick="() => ModalTryClose(ModalDialogReturnValue.Delete)">Delete</button>
                        break;
                    case ModalDialogType.YesNoCancel:
                        <button type="button" class="btn btn-success" id="btn-yes" @onclick="() => ModalTryClose(ModalDialogReturnValue.Yes)">Yes</button>
                        <button type="button" class="btn btn-danger" id="btn-no" @onclick="() => ModalTryClose(ModalDialogReturnValue.No)">No</button>
                        <button type="button" class="btn btn-warning" id="btn-cancel" @onclick="() => ModalTryClose(ModalDialogReturnValue.Cancel)">Cancel</button>
                        break;
                    case ModalDialogType.YesNo:
                        <button type="button" class="btn btn-success" id="btn-yes" @onclick="() => ModalTryClose(ModalDialogReturnValue.Yes)">Yes</button>
                        <button type="button" class="btn btn-danger" id="btn-no" @onclick="() => ModalTryClose(ModalDialogReturnValue.No)">No</button>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(DialogType));
                }
            </div>
        </div>
    </div>
</div>

@code
{
    ///<summary>Default constructor.</summary>
    public ModalDialog()
    {
        _inputFieldValues = new Dictionary<string, string>();
        RequiredFieldsWarning = false;
    }
    

    ///<summary>The title of the dialog.</summary>
    [Parameter, EditorRequired]
    public string Title { get; set; }
    ///<summary>The text of the dialog.</summary>
    [Parameter, EditorRequired]
    public string Text { get; set; }
    ///<summary>The callback function that should be called with the return value and optionally a dictionary of
    ///input values.</summary>
    ///<seealso cref="ModalDialogReturnValue"/>
    [Parameter, EditorRequired] 
    public EventCallback<Tuple<ModalDialogReturnValue, IDictionary<string, string>?>> OnClose { get; set; }
    ///<summary>The type of dialog.</summary>
    ///<seealso cref="ModalDialogType"/>
    [Parameter, EditorRequired] 
    public ModalDialogType DialogType { get; set; }
    ///<summary>A list of input fields on the dialog, optional.</summary>
    ///<seealso cref="ModalDialogInputField"/>
    [Parameter]
    public IEnumerable<ModalDialogInputField>? InputFields { get; set; }
    ///<summary>Dictionary with initial values for input fields, optional. Should be null if <see cref="InputFields"/>
    /// is also null.</summary>
    [Parameter]
    public IDictionary<string, string>? InputFieldsInitialValue { get; set; }
    
    
    ///<summary>Whether or not the required fields warning should be displayed or not.</summary>
    private bool RequiredFieldsWarning { get; set; }
    ///<summary>Internal dictionary for storing values of input fields on change.</summary>
    private IDictionary<string, string> _inputFieldValues;


    protected override void OnParametersSet()
    {
        if (InputFields != null)
        {
            foreach (var field in InputFields.Where(field => !_inputFieldValues.ContainsKey(field.Name)))
            {
                _inputFieldValues[field.Name] = "";
            }
        }
        if (InputFieldsInitialValue == null) return;
        foreach (var (key, initialValue) in InputFieldsInitialValue)
        {
            _inputFieldValues[key] = initialValue;
        }
    }

    /// <summary>Tries to close the dialog. If all required input fields are filled, will call <see cref="OnClose"/>
    /// with the passed dialog return value and, if applicable, the input field values.</summary>
    /// <param name="dialogReturnValue">The <see cref="ModalDialogReturnValue"/> that should be passed in the call to
    /// <see cref="OnClose"/>.</param>
    /// <returns>The Task returned by <see cref="OnClose"/> if all fields are required and filled;
    /// <see cref="Task.CompletedTask"/> otherwise.</returns>
    private Task ModalTryClose(ModalDialogReturnValue dialogReturnValue)
    {
        IDictionary<string, string>? inputFieldValues = null;
        //if this is a positive response, we will set the inputFieldValues to the dictionary we have been keeping this whole time
        if (dialogReturnValue is ModalDialogReturnValue.Ok or ModalDialogReturnValue.Yes && InputFields != null)
        {
            //check that all required fields are set
            if (InputFields.Any(FieldRequiredAndNotFilled))
            {
                RequiredFieldsWarning = true;
                return Task.CompletedTask;
            }
            inputFieldValues = _inputFieldValues;
        }
        //we return result and optional dictionary as tuple
        return OnClose.InvokeAsync(new Tuple<ModalDialogReturnValue, 
            IDictionary<string, string>?>(dialogReturnValue, inputFieldValues));
    }
    
    /// <summary>Tries to close the dialog with a positive result, depending on the <see cref="ModalDialogType"/>.</summary>
    /// <returns>The <see cref="Task"/> returned by <see cref="ModalTryClose"/>.</returns>
    private Task TryCloseWithPositiveResult()
    {
        return DialogType switch
        {
            ModalDialogType.Ok => ModalTryClose(ModalDialogReturnValue.Ok),
            ModalDialogType.OkCancel => ModalTryClose(ModalDialogReturnValue.Ok),
            ModalDialogType.DeleteCancel => ModalTryClose(ModalDialogReturnValue.Delete),
            ModalDialogType.YesNoCancel => ModalTryClose(ModalDialogReturnValue.Yes),
            ModalDialogType.YesNo => ModalTryClose(ModalDialogReturnValue.Yes),
            _ => throw new ArgumentOutOfRangeException()
        };
    }
    
    /// <summary>Determines whether an input field is required and not filled with a value other than the empty
    /// string.</summary>
    /// <returns>true if the input field is required and not filled with a string other than the empty string;
    /// false otherwise.</returns>
    /// <param name="field">The <see cref="ModalDialogInputField"/> to be checked.</param>
    private bool FieldRequiredAndNotFilled(ModalDialogInputField field) => 
        field.Required && (!_inputFieldValues.ContainsKey(field.Name) || _inputFieldValues[field.Name] == "");

    /// <summary>Determines whether the dropdown input field is unlocked or not.</summary>
    /// <returns>true if the input field is unlocked, false if it isn't.</returns>
    /// <param name="requiredValues">The input field to check for.</param>
    private bool IsUnlocked(ModalDialogDropdownInputField requiredValues)
    {
        return !requiredValues.ValuesToChoiceMapping.Any() || requiredValues.ValuesToChoiceMapping.Any(MappingSatisfied);
    }

    /// <summary>Determines whether a specific choice mapping is currently satisfied, meaning that all values
    /// required for the choices to be available in the dropdown are satisfied.</summary>
    /// <returns>true if all required values are satisfied or <c>mapping.RequiredValues</c> is null; false otherwise.</returns>
    /// <param name="mapping">The <see cref="ModalDialogDropdownInputFieldChoiceMapping"/> to be checked.</param>
    private bool MappingSatisfied(ModalDialogDropdownInputFieldChoiceMapping mapping)
    {
        return mapping.RequiredValues == null || mapping.RequiredValues.All(KeyPresentAndValueEquals);
    }
    
    /// <summary>Determines whether a key-value-pair is present in <see cref="_inputFieldValues"/> and the value
    /// is equal to the desired value.</summary>
    /// <returns>true if the key is present and the value is equal to the desired value; false otherwise.</returns>
    /// <param name="keyValuePair">The <see cref="KeyValuePair"/></param>
    private bool KeyPresentAndValueEquals(KeyValuePair<string, string> keyValuePair)
    {
        var (key, value) = keyValuePair;
        return _inputFieldValues.ContainsKey(key) && _inputFieldValues[key] == value;
    }

    /// <summary>Ensures that, on change of a dropdown input field in the dialog, all other dropdowns in the dialog
    /// will be updated. This means if the current value set in the backing dictionary <see cref="_inputFieldValues"/>
    /// is not a valid choice for the dropdown anymore (because the required values in
    /// <see cref="ModalDialogDropdownInputFieldChoiceMapping"/> are not satisfied anymore), the current value will be
    /// set to the first now valid choice, which alignes with the behaviour of the html <c>select</c> element.</summary>
    private void EnsureDropdownsUpdated()
    {
        if (InputFields == null) return;
        foreach (var dropdownInputField in InputFields.OfType<ModalDialogDropdownInputField>())
        {
            var availableChoices = dropdownInputField.ValuesToChoiceMapping.First(MappingSatisfied)
                .AvailableChoices.ToArray();
            if (!_inputFieldValues.ContainsKey(dropdownInputField.Name)) return;
            if (_inputFieldValues[dropdownInputField.Name] != "" && 
                !availableChoices.Contains(_inputFieldValues[dropdownInputField.Name]))
            {
                _inputFieldValues[dropdownInputField.Name] = availableChoices.First();
            }
        }
    }
}
