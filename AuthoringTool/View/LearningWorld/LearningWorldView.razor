@using AuthoringTool.PresentationLogic.AuthoringToolWorkspace
@using AuthoringTool.PresentationLogic.LearningElement
@using AuthoringTool.PresentationLogic.LearningSpace
@using AuthoringTool.PresentationLogic.LearningWorld
@using AuthoringTool.Components
@using AuthoringTool.Components.ModalDialog
@using AuthoringTool.View.LearningSpace
@inject IMouseService _mouseService
@inject ILearningWorldPresenter _learningWorldP

<h2>LearningWorld @_learningWorldP.LearningWorldVm?.Name</h2>
@ChildContent
@if (_learningWorldP.ShowingLearningSpaceView)
{
    <LearningSpaceView>
        <button class="btn btn-primary" @onclick="CloseLearningSpaceView">Close Learning Space View</button>
    </LearningSpaceView>
}
else
{
    <h5>Workload: @_learningWorldP.LearningWorldVm?.Workload minutes</h5>
    <button class="btn btn-primary" @onclick="AddNewLearningSpace">Add Learning Space</button>
    <button class="btn btn-primary" @onclick="LoadLearningSpaceAsync">Load Learning Space</button>
    @if (_learningWorldP.CreateLearningSpaceDialogueOpen)
    {
        <ModalDialog Title="Create new learning space" Text="Please enter the required data for the learning space below:"
                     OnClose="@OnCreateSpaceDialogClose" DialogType=@ModalDialogType.OkCancel
                     InputFields="@_learningWorldP.ModalDialogSpaceInputFields">
        </ModalDialog>
    }
    <button class="btn btn-primary" @onclick="AddNewLearningElement">Add Learning Element</button>
    <button class="btn btn-primary" @onclick="LoadLearningElementAsync">Load Learning Element</button>
    @if (_learningWorldP.CreateLearningElementDialogOpen)
    {
        <ModalDialog Title="Create new learning element" Text="Please enter the required data for the learning element below:"
                     OnClose="@OnCreateElementDialogClose" DialogType=@ModalDialogType.OkCancel
                     InputFields="@_learningWorldP.ModalDialogCreateElementInputFields">
        </ModalDialog>
    }
    <br>

    @if (_learningWorldP.LearningWorldVm?.SelectedLearningObject != null)
    {
        <label>
            Selected element:
            <text>
                @_learningWorldP.LearningWorldVm.SelectedLearningObject.Name
                , Description:
                @_learningWorldP.LearningWorldVm.SelectedLearningObject.Description
            </text>
        </label>
        <br>
        <button class="btn btn-primary" @onclick="EditLearningObject">Edit selected Learning Object</button>
        <button class="btn btn-primary" @onclick="DeleteSelectedLearningObject">Delete Learning Object</button>
        <button class="btn btn-primary" @onclick="SaveSelectedLearningObjectAsync">Save selected Learning Object</button>
        <button class="btn btn-primary" @onclick="ShowSelectedLearningSpaceView"
                hidden="@(!_learningWorldP.SelectedLearningObjectIsSpace)">Open selected Learning Space</button>
    }
    <svg style="width: 100%; height: 600px; border: 1px solid green"
         xmlns="http://www.w3.org/2000/svg"
         @onmousemove=@(e => _mouseService.FireMove(this, e))
             @onmouseup=@(e => _mouseService.FireUp(this, e))
             @onmouseleave=@(() => _mouseService.FireOut(this, null))>
        @if (_learningWorldP.LearningWorldVm != null)
        {
            @foreach (var learningObject in _learningWorldP.LearningWorldVm.LearningObjects)
            {
                <Draggable LearningObject="learningObject" OnClicked="@_learningWorldP.SetSelectedLearningObject"
                           @bind-X="@learningObject.PositionX" @bind-Y="@learningObject.PositionY">
                    @{
                        var rectStyle = learningObject switch
                        {
                            LearningSpaceViewModel => "fill:lightgreen;stroke:black",
                            TransferElementViewModel => "fill:royalblue",
                            ActivationElementViewModel => "fill:blueviolet",
                            InteractionElementViewModel => "fill:steelblue",
                            TestElementViewModel => "fill:deepskyblue",
                            LearningElementViewModel => "fill:blue",
                            _ => "grey"
                            };

                        var polygonColor = learningObject switch
                        {
                            LearningSpaceViewModel => "lightgreen",
                            LearningElementViewModel elementViewModel => elementViewModel.Difficulty switch
                            {
                                LearningElementDifficultyEnum.Easy => "green",
                                LearningElementDifficultyEnum.Medium => "yellow",
                                LearningElementDifficultyEnum.Hard => "red",
                                _ => "grey"
                                },
                            _ => "grey"
                            };
                    }
                    <rect height="50" width="100" style=@rectStyle></rect>
                    <polygon transform="translate(75,1)" fill=@polygonColor
                             points="12.5,1.25 5,24.75 23.75,9.75 1.25,9.75 20,24.75"></polygon>
                    <text x="3" y="15">@learningObject.Name</text>

                </Draggable>
            }
        }
    </svg>
    @if (_learningWorldP.EditLearningSpaceDialogOpen && _learningWorldP.LearningWorldVm != null)
    {
        <ModalDialog Title="Edit existing learning space" Text="Please enter the required data for the learning space below:"
                     OnClose="@OnEditSpaceDialogClose" DialogType=@ModalDialogType.OkCancel
                     InputFields="@_learningWorldP.ModalDialogSpaceInputFields" InputFieldsInitialValue="@_learningWorldP.LearningWorldVm.EditDialogInitialValues">
        </ModalDialog>
    }

    @if (_learningWorldP.EditLearningElementDialogOpen && _learningWorldP.LearningWorldVm != null)
    {
        <ModalDialog Title="Edit existing learning element" Text="Please enter the required data for the learning element below:"
                     OnClose="@OnEditElementDialogClose" DialogType=@ModalDialogType.OkCancel
                     InputFields="@_learningWorldP.ModalDialogEditElementInputFields" InputFieldsInitialValue="@_learningWorldP.LearningWorldVm.EditDialogInitialValues">
        </ModalDialog>
    }

    @if (ErrorState != null)
    {
        <ModalDialog Title="Exception encountered" Text=@ErrorState.ToString()
                     OnClose="@(() => { ErrorState = null; })" DialogType=@ModalDialogType.Ok/>
    }
}

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private ExceptionWrapper? ErrorState { get; set; }


    private void AddNewLearningSpace()
    {
        _learningWorldP.CreateLearningSpaceDialogueOpen = true;
    }

    private void AddNewLearningElement()
    {
        _learningWorldP.CreateLearningElementDialogOpen = true;
    }

    private void DeleteSelectedLearningObject()
    {
        _learningWorldP.DeleteSelectedLearningObject();
    }

    private async Task LoadLearningSpaceAsync()
    {
        try
        {
            await _learningWorldP.LoadLearningSpace();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning space", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            StateHasChanged();
        }
    }

    private async Task LoadLearningElementAsync()
    {
        try
        {
            await _learningWorldP.LoadLearningElement();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning element", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            StateHasChanged();
        }
    }

    private async Task SaveSelectedLearningObjectAsync()
    {
        try
        {
            await _learningWorldP.SaveSelectedLearningObjectAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Save learning object", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            StateHasChanged();
        }
    }

    private Task OnCreateSpaceDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return _learningWorldP.OnCreateSpaceDialogClose(returnValueTuple);
    }

    private Task OnCreateElementDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return _learningWorldP.OnCreateElementDialogClose(returnValueTuple);
    }

    private void EditLearningObject()
    {
        _learningWorldP.OpenEditSelectedLearningObjectDialog();
    }

    private Task OnEditSpaceDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return _learningWorldP.OnEditSpaceDialogClose(returnValueTuple);
    }

    private Task OnEditElementDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return _learningWorldP.OnEditElementDialogClose(returnValueTuple);
    }

    public void TriggerStateHasChanged()
    {
        StateHasChanged();
    }

    private void ShowSelectedLearningSpaceView()
    {
        _learningWorldP.ShowSelectedLearningSpaceView();
        _learningWorldP.UpdateWorldWorkload();
    }

    private void CloseLearningSpaceView()
    {
        _learningWorldP.CloseLearningSpaceView();
        _learningWorldP.UpdateWorldWorkload();
    }

}