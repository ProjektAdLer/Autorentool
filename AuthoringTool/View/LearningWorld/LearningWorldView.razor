@using AuthoringTool.PresentationLogic.AuthoringToolWorkspace
@using AuthoringTool.PresentationLogic.LearningElement
@using AuthoringTool.PresentationLogic.LearningSpace
@using AuthoringTool.PresentationLogic.LearningWorld
@using AuthoringTool.Components
@using AuthoringTool.Components.ModalDialog
@using AuthoringTool.PresentationLogic.LearningElement.ActivationElement
@using AuthoringTool.PresentationLogic.LearningElement.InteractionElement
@using AuthoringTool.PresentationLogic.LearningElement.TestElement
@using AuthoringTool.PresentationLogic.LearningElement.TransferElement
@using AuthoringTool.PresentationLogic.ModalDialog
@using AuthoringTool.View.LearningSpace
@using AuthoringTool.View.LearningElement
@using System.ComponentModel

<h2>World: @LearningWorldP.LearningWorldVm?.Name</h2>
@ChildContent
@if (LearningWorldP.ShowingLearningSpaceView)
{
    <LearningSpaceView>
        <button class="btn btn-primary" @onclick="CloseLearningSpaceView">Close Learning Space View</button>
    </LearningSpaceView>
}
else
{
    <h5>Workload: @LearningWorldP.LearningWorldVm?.Workload minutes</h5>
    <button class="btn btn-primary add-learning-space" @onclick="AddNewLearningSpace">Add Learning Space</button>
    <button class="btn btn-primary load-learning-space" @onclick="LoadLearningSpaceAsync">Load Learning Space</button>
    <button class="btn btn-primary add-learning-element" @onclick="AddNewLearningElement">Add Learning Element</button>
    <button class="btn btn-primary load-learning-element" @onclick="LoadLearningElementAsync">Load Learning Element</button>
    <br>

    @if (LearningWorldP.LearningWorldVm?.SelectedLearningObject != null)
    {
        <label>
            Selected element:
            <text>
                @LearningWorldP.LearningWorldVm.SelectedLearningObject.Name
                , Description:
                @LearningWorldP.LearningWorldVm.SelectedLearningObject.Description
            </text>
        </label>
        <br>
        <button class="btn btn-primary edit-learning-object" @onclick="EditLearningObject">Edit selected Learning Object</button>
        <button class="btn btn-primary delete-learning-object" @onclick="DeleteSelectedLearningObject">Delete Learning Object</button>
        <button class="btn btn-primary save-learning-object" @onclick="SaveSelectedLearningObjectAsync">Save selected Learning Object</button>
        <button class="btn btn-primary show-learning-space" @onclick="ShowSelectedLearningSpaceView"
                hidden="@(!LearningWorldP.SelectedLearningObjectIsSpace)">Open selected Learning Space</button>
    }
    <svg style="width: 100%; height: 600px; border: 1px solid green"
         xmlns="http://www.w3.org/2000/svg"
         @onmousemove=@(e => MouseService.FireMove(this, e))
             @onmouseup=@(e => MouseService.FireUp(this, e))
             @onmouseleave=@(() => MouseService.FireOut(this, null))>
        @if (LearningWorldP.LearningWorldVm != null)
        {
            @foreach (var learningObject in LearningWorldP.LearningWorldVm.LearningObjects)
            {
                @switch (learningObject)
                {
                    case ILearningElementViewModel learningElementViewModel:
                        <DraggableLearningElement LearningElement="learningElementViewModel"
                                                  OnClicked="@LearningWorldP.SetSelectedLearningObject"/>
                        break;
                    case ILearningSpaceViewModel learningSpaceViewModel:
                        <DraggableLearningSpace LearningSpace="learningSpaceViewModel"
                                                OnClicked="@LearningWorldP.SetSelectedLearningObject"/>
                        break;
                }
            }
        }
    </svg>
    //create space modal
    @if (LearningWorldP.CreateLearningSpaceDialogOpen)
    {
        @ModalDialogFactory.GetCreateLearningSpaceFragment(OnCreateSpaceDialogClose);
    }
    
    //create element modal
    @if (LearningWorldP.CreateLearningElementDialogOpen)
    {
        <!-- LearningWorld can't be null at this point - n.stich -->
        @ModalDialogFactory.GetCreateLearningElementFragment(LearningWorldP.DragAndDropLearningContent,
            LearningWorldP.LearningWorldVm!.LearningSpaces, LearningWorldP.LearningWorldVm.Name, OnCreateElementDialogClose);
    }
    
    //edit space modal
    @if (LearningWorldP.EditLearningSpaceDialogOpen && LearningWorldP.LearningWorldVm != null)
    {
        <!-- EditSpaceDialogInitialValues is set by presenter before setting EditLearningSpaceDialogOpen to true -->
        @ModalDialogFactory.GetEditLearningSpaceFragment(LearningWorldP.EditSpaceDialogInitialValues!, OnEditSpaceDialogClose)
    }

    //edit element modal
    @if (LearningWorldP.EditLearningElementDialogOpen && LearningWorldP.LearningWorldVm != null)
    {
        <!-- EditElementDialogInitialValues is set by presenter before setting EditLearningElementDialogOpen to true -->
        @ModalDialogFactory.GetEditLearningElementFragment(LearningWorldP.EditElementDialogInitialValues!, OnEditElementDialogClose)
    }

    @if (ErrorState != null)
    {
        <ModalDialog Title="Exception encountered" Text=@ErrorState.ToString()
                     OnClose="@ErrorDialogOnClose" DialogType=@ModalDialogType.Ok/>
    }
}

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

#pragma warning disable CS8618 injected by framework - n.stich
    [Inject]
    public IMouseService MouseService { get; set; }
    
    [Inject]
    public ILearningWorldPresenter LearningWorldP { get; set; }
    
    [Inject]
    public ILearningWorldViewModalDialogFactory ModalDialogFactory { get; set; }
#pragma warning restore CS8618
    
    private ExceptionWrapper? ErrorState { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LearningWorldP.PropertyChanging += OnLearningWorldPresenterPropertyChanging;
        LearningWorldP.PropertyChanged += OnLearningWorldPresenterPropertyChanged;
    }


    private void AddNewLearningSpace()
    {
        LearningWorldP.AddNewLearningSpace();
    }

    private void AddNewLearningElement()
    {
        LearningWorldP.AddNewLearningElement();
    }

    private void DeleteSelectedLearningObject()
    {
        LearningWorldP.DeleteSelectedLearningObject();
    }

    private async Task LoadLearningSpaceAsync()
    {
        try
        {
            await LearningWorldP.LoadLearningSpaceAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning space", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            StateHasChanged();
        }
    }

    private async Task LoadLearningElementAsync()
    {
        try
        {
            await LearningWorldP.LoadLearningElementAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning element", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            StateHasChanged();
        }
    }

    private async Task SaveSelectedLearningObjectAsync()
    {
        try
        {
            await LearningWorldP.SaveSelectedLearningObjectAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Save learning object", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            StateHasChanged();
        }
    }

    private void OnCreateSpaceDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnCreateSpaceDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    private void OnCreateElementDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnCreateElementDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    private void EditLearningObject()
    {
        LearningWorldP.OpenEditSelectedLearningObjectDialog();
    }

    private void OnEditSpaceDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnEditSpaceDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    private void OnEditElementDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        LearningWorldP.OnEditElementDialogClose(returnValueTuple);
        InvokeAsync(StateHasChanged);
    }

    public void TriggerStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void ErrorDialogOnClose(ModalDialogOnCloseResult _)
    {
        ErrorState = null;
        TriggerStateHasChanged();
    }

    private void ShowSelectedLearningSpaceView()
    {
        LearningWorldP.ShowSelectedLearningSpaceView();
    }

    private void CloseLearningSpaceView()
    {
        LearningWorldP.CloseLearningSpaceView();
    }

    private void OnLearningWorldViewModelPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged += OnLearningWorldViewModelPropertyChanged;
        }
        TriggerStateHasChanged();
    }

    private void OnLearningWorldPresenterPropertyChanging(object? sender, PropertyChangingEventArgs args)
    {
        if (args.PropertyName == nameof(LearningWorldP.LearningWorldVm) && LearningWorldP.LearningWorldVm != null)
        {
            LearningWorldP.LearningWorldVm.PropertyChanged -= OnLearningWorldViewModelPropertyChanged;
        }
    }
}