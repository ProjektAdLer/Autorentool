@using AuthoringTool.PresentationLogic
@using AuthoringTool.PresentationLogic.Toolbox
<div class="col-3 element text-center text-wrap @CssClassSelector" @ondblclick="OnDoubleClick">
    @Obj?.Name
    @if (ChildContent != null)
    {
        <br/>
        @ChildContent
    }
</div>
@code {
    [Inject] 
    internal IToolboxController? ToolboxController { get; private init; }
    [Parameter, EditorRequired]
    public IDisplayableLearningObject? Obj { get; set; }
    [Parameter, EditorRequired]
    public string? CssClassSelector { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /*
    public override Task SetParametersAsync(ParameterView parameters)
    {
        var success = parameters.TryGetValue<IDisplayableLearningObject>(nameof(Obj), out var obj);
        if (!success || obj == null)
            throw new ArgumentNullException(nameof(Obj), "Obj cannot be null for LearingObjectRenderFragmentBase");
        return base.SetParametersAsync(parameters);
    }
    */

    protected override void OnParametersSet()
    {
        if (Obj is null)
            throw new ArgumentNullException(nameof(Obj), "Obj cannot be null for LearingObjectRenderFragmentBase");
    }

    private void OnDoubleClick()
    {
        if (Obj != null)
            ToolboxController?.LoadObjectIntoWorkspace(Obj);
    }
}