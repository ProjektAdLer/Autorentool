@using AuthoringTool.PresentationLogic.AuthoringToolWorkspace
@using AuthoringTool.PresentationLogic.LearningElement
@using AuthoringTool.PresentationLogic.LearningSpace
@using AuthoringTool.PresentationLogic.LearningWorld
@using AuthoringTool.Components
@using AuthoringTool.Components.ModalDialog
@using AuthoringTool.PresentationLogic.LearningElement.ActivationElement
@using AuthoringTool.PresentationLogic.LearningElement.InteractionElement
@using AuthoringTool.PresentationLogic.LearningElement.TestElement
@using AuthoringTool.PresentationLogic.LearningElement.TransferElement
@using AuthoringTool.PresentationLogic.ModalDialog

<h2>LearningSpace @LearningSpaceP.LearningSpaceVm?.Name</h2>
<h5>Workload: @LearningSpaceP.LearningSpaceVm?.Workload minutes</h5>
<button class="btn btn-primary" @onclick="AddNewLearningElement">Add Learning Element</button>
<button class="btn btn-primary" @onclick="LoadLearningElementAsync">Load Learning Element</button>
@ChildContent
<br>

@if (LearningSpaceP.LearningSpaceVm?.SelectedLearningObject != null)
{
    <label>
        Selected element: 
        @LearningSpaceP.LearningSpaceVm.SelectedLearningObject.Name, 
        Description: @LearningSpaceP.LearningSpaceVm.SelectedLearningObject.Description
    </label>
    <br>
    <button class="btn btn-primary edit-learning-object" @onclick="EditLearningObject">Edit selected Learning Object</button>
    <button class="btn btn-primary delete-learning-object" @onclick="DeleteSelectedLearningObject">Delete Learning Object</button>
    <button class="btn btn-primary save-learning-object" @onclick="SaveSelectedLearningObjectAsync">Save selected Learning Object</button>
}
<svg style="width: 100%; height: 600px; border: 1px solid green"
     xmlns="http://www.w3.org/2000/svg"
     @onmousemove=@(e => MouseService.FireMove(this, e))
         @onmouseup=@(e => MouseService.FireUp(this, e))
         @onmouseleave=@(() => MouseService.FireOut(this, null))>
    @if (LearningSpaceP.LearningSpaceVm != null)
    {
        @foreach (var learningObject in LearningSpaceP.LearningSpaceVm.LearningElements)
        {
            <Draggable LearningObject="learningObject" OnClicked="@LearningSpaceP.SetSelectedLearningObject"
                       @bind-X="@learningObject.PositionX" @bind-Y="@learningObject.PositionY">
                @{
                    var rectStyle = learningObject switch
                    {
                        LearningElementViewModel => "fill:lightblue",
                        _ => "grey"
                        };
                    
                    string polygonPoints, polygonColor;

                    switch (learningObject.Difficulty)
                    {
                        case LearningElementDifficultyEnum.Easy:
                            polygonPoints = "13 1 10 10 2 13 10 16 13 25 16 16 24 13 16 10";
                            polygonColor = "green";
                            break;
                        case LearningElementDifficultyEnum.Medium:
                            polygonPoints = "13 1 5 25 24 10 2 10 21 25";
                            polygonColor = "yellow";
                            break;
                        case LearningElementDifficultyEnum.Hard:
                            polygonPoints = "13 1 10 8 2 7 8 13 2 19 10 18 13 25 16 18 24 19 19 13 24 7 16 8 13 1";
                            polygonColor = "red";
                            break;
                        case LearningElementDifficultyEnum.None:
                            polygonPoints = "0";
                            polygonColor = "lightblue";
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                }
                <rect height="50" width="100" style=@rectStyle></rect>
                <polygon transform="translate(75,1)" fill=@polygonColor
                         points=@polygonPoints></polygon>
                <text x="3" y="15">@learningObject.Name</text>

            </Draggable>
        }
    }
</svg>
@if (LearningSpaceP.EditLearningSpaceDialogOpen && LearningSpaceP.LearningSpaceVm != null)
{
    @ModalDialogFactory.GetEditLearningSpaceFragment(LearningSpaceP.EditLearningSpaceDialogInitialValues, OnEditSpaceDialogClose);
}

@if (LearningSpaceP.CreateLearningElementDialogOpen)
{
    @ModalDialogFactory.GetCreateLearningElementFragment(LearningSpaceP.DragAndDropLearningContent, OnCreateElementDialogClose);
}

@if (LearningSpaceP.EditLearningElementDialogOpen && LearningSpaceP.LearningSpaceVm != null)
{
    @ModalDialogFactory.GetEditLearningElementFragment(LearningSpaceP.EditLearningElementDialogInitialValues, OnEditElementDialogClose);
}


@code {
#pragma warning disable CS8618 injected by framework - n.stich
    [Inject]
    public IMouseService MouseService { get; set; }
    [Inject]
    public ILearningSpacePresenter LearningSpaceP { get; set; }
    [Inject]
    public ILearningSpaceViewModalDialogFactory ModalDialogFactory { get; set; }
#pragma warning restore CS8618

    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    private ExceptionWrapper? ErrorState { get; set; }

    private void AddNewLearningElement()
    {
        LearningSpaceP.CreateLearningElementDialogOpen = true;
    }

    private void DeleteSelectedLearningObject()
    {
        LearningSpaceP.DeleteSelectedLearningObject();
    }

    private async Task LoadLearningElementAsync()
    {
        try
        {
            await LearningSpaceP.LoadLearningElement();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning element", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task SaveSelectedLearningObjectAsync()
    {
        try
        {
            await LearningSpaceP.SaveSelectedLearningObjectAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Save learning object", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnCreateElementDialogClose(ModalDialogOnCloseResult closeResult)
    {
        LearningSpaceP.OnCreateElementDialogClose(closeResult);
        InvokeAsync(StateHasChanged);
    }

    private void EditLearningObject()
    {
        LearningSpaceP.OpenEditSelectedLearningObjectDialog();
    }

    private void OnEditSpaceDialogClose(ModalDialogOnCloseResult closeResult)
    {
        LearningSpaceP.OnEditSpaceDialogClose(closeResult);
        InvokeAsync(StateHasChanged);
    }

    private void OnEditElementDialogClose(ModalDialogOnCloseResult closeResult)
    {
        LearningSpaceP.OnEditElementDialogClose(closeResult);
        InvokeAsync(StateHasChanged);
    }

}