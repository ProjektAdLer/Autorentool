@using AuthoringTool.PresentationLogic.AuthoringToolWorkspace
@using AuthoringTool.PresentationLogic.LearningElement
@using AuthoringTool.PresentationLogic.LearningSpace
@using AuthoringTool.PresentationLogic.LearningWorld
@using AuthoringTool.Components
@using AuthoringTool.Components.ModalDialog
@inject IMouseService _mouseService
@inject ILearningSpacePresenter _learningSpaceP

<h2>LearningSpace @_learningSpaceP.LearningSpaceVm?.Name</h2>
<h5>Workload: @_learningSpaceP.LearningSpaceVm?.Workload minutes</h5>
<button class="btn btn-primary" @onclick="AddNewLearningElement">Add Learning Element</button>
<button class="btn btn-primary" @onclick="LoadLearningElementAsync">Load Learning Element</button>
@ChildContent
@if (_learningSpaceP.CreateLearningElementDialogOpen)
{
    <ModalDialog Title="Create new learning element" Text="Please enter the required data for the learning element below:"
                 OnClose="@OnCreateElementDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@_learningSpaceP.ModalDialogCreateElementInputFields">
    </ModalDialog>
}
<br>

@if (_learningSpaceP.LearningSpaceVm?.SelectedLearningObject != null)
{
    <label>
        Selected element:
        <text>
            @_learningSpaceP.LearningSpaceVm.SelectedLearningObject.Name
            , Description:
            @_learningSpaceP.LearningSpaceVm.SelectedLearningObject.Description
        </text>
    </label>
    <br>
    <button class="btn btn-primary" @onclick="EditLearningObject">Edit selected Learning Object</button>
    <button class="btn btn-primary" @onclick="DeleteSelectedLearningObject">Delete Learning Object</button>
    <button class="btn btn-primary" @onclick="SaveSelectedLearningObjectAsync">Save selected Learning Object</button>
}
<svg style="width: 100%; height: 600px; border: 1px solid green"
     xmlns="http://www.w3.org/2000/svg"
     @onmousemove=@(e => _mouseService.FireMove(this, e))
         @onmouseup=@(e => _mouseService.FireUp(this, e))
         @onmouseleave=@(() => _mouseService.FireOut(this, null))>
    @if (_learningSpaceP.LearningSpaceVm != null)
    {
        @foreach (var learningObject in _learningSpaceP.LearningSpaceVm.LearningElements)
        {
            <Draggable LearningObject="learningObject" OnClicked="@_learningSpaceP.SetSelectedLearningObject"
                       @bind-X="@learningObject.PositionX" @bind-Y="@learningObject.PositionY">
                @{
                    var rectStyle = learningObject switch
                    {
                        TransferElementViewModel => "fill:royalblue",
                        ActivationElementViewModel => "fill:blueviolet",
                        InteractionElementViewModel => "fill:steelblue",
                        TestElementViewModel => "fill:deepskyblue",
                        LearningElementViewModel => "fill:blue",
                        _ => "grey"
                        };

                    var polygonColor = learningObject.Difficulty switch
                    {
                        LearningElementDifficultyEnum.Easy => "green",
                        LearningElementDifficultyEnum.Medium => "yellow",
                        LearningElementDifficultyEnum.Hard => "red",
                        _ => "grey"
                        };
                }
                <rect height="50" width="100" style=@rectStyle></rect>
                <polygon transform="translate(75,1)" fill=@polygonColor
                         points="12.5,1.25 5,24.75 23.75,9.75 1.25,9.75 20,24.75"></polygon>
                <text x="3" y="15">@learningObject.Name</text>

            </Draggable>
        }
    }
</svg>
@if (_learningSpaceP.EditLearningSpaceDialogOpen && _learningSpaceP.LearningSpaceVm != null)
{
    <ModalDialog Title="Edit existing learning space" Text="Please enter the required data for the learning space below:"
                 OnClose="@OnEditSpaceDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@_learningSpaceP.ModalDialogSpaceInputFields" InputFieldsInitialValue="@_learningSpaceP.LearningSpaceVm.EditDialogInitialValues">
    </ModalDialog>
}

@if (_learningSpaceP.EditLearningElementDialogOpen && _learningSpaceP.LearningSpaceVm != null)
{
    <ModalDialog Title="Edit existing learning element" Text="Please enter the required data for the learning element below:"
                 OnClose="@OnEditElementDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@_learningSpaceP.ModalDialogEditElementInputFields" InputFieldsInitialValue="@_learningSpaceP.LearningSpaceVm.EditDialogInitialValues">
    </ModalDialog>
}


@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    private ExceptionWrapper? ErrorState { get; set; }

    private void AddNewLearningElement()
    {
        _learningSpaceP.CreateLearningElementDialogOpen = true;
    }

    private void DeleteSelectedLearningObject()
    {
        _learningSpaceP.DeleteSelectedLearningObject();
    }

    private async Task LoadLearningElementAsync()
    {
        try
        {
            await _learningSpaceP.LoadLearningElement();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Load learning element", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            StateHasChanged();
        }
    }

    private async Task SaveSelectedLearningObjectAsync()
    {
        try
        {
            await _learningSpaceP.SaveSelectedLearningObjectAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, show notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Save learning object", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning object
            StateHasChanged();
        }
    }

    private Task OnCreateElementDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return _learningSpaceP.OnCreateElementDialogClose(returnValueTuple);
    }

    private void EditLearningObject()
    {
        _learningSpaceP.OpenEditSelectedLearningObjectDialog();
    }

    private Task OnEditSpaceDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return _learningSpaceP.OnEditSpaceDialogClose(returnValueTuple);
    }

    private Task OnEditElementDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return _learningSpaceP.OnEditElementDialogClose(returnValueTuple);
    }

}