@page "/AuthoringToolWorkspaceView"
@using AuthoringTool.BusinessLogic
@using AuthoringTool.Components
@using AuthoringTool.Components.ModalDialog
@using AuthoringTool.PresentationLogic
@using AuthoringTool.PresentationLogic.API
@using AuthoringTool.PresentationLogic.AuthoringToolWorkspace
@using AuthoringTool.PresentationLogic.LearningElement
@using AuthoringTool.PresentationLogic.LearningSpace
@using static System.IO.Directory;
@inject IMouseService _mouseService
@inject ILogger<AuthoringToolWorkspaceView> _logger
@inject AuthoringToolWorkspacePresenter AuthoringToolWorkspaceP
@inject IAuthoringToolWorkspaceViewModel AuthoringToolWorkspaceVm
@inject IPresentationLogic presentationLogic

<h3>AuthoringTool Workspace</h3>

<p role="status">Current count of learning worlds: @AuthoringToolWorkspaceVm.LearningWorlds.Count</p>
<p role="status" id="filepath">Filepath: @filePath</p>
<label>
    Select learning world:
    <select @onchange="args => AuthoringToolWorkspaceP.ChangeSelectedLearningWorld((string) args.Value!)"
            value="@(AuthoringToolWorkspaceVm.SelectedLearningWorld?.Name)">
        @foreach (var learningWorld in AuthoringToolWorkspaceVm.LearningWorlds)
        {
            <option value="@learningWorld.Name">@learningWorld.Name</option>
        }
        @if (AuthoringToolWorkspaceVm.LearningWorlds.Count == 0 ||
             AuthoringToolWorkspaceVm.LearningWorlds.Count == 1 && AuthoringToolWorkspaceVm.SelectedLearningWorld == null)
        {
            <option value=""></option>
        }
    </select>
</label>
<div>
    @if (AuthoringToolWorkspaceVm.SelectedLearningWorld != null)
    {
        <label>
            Selected world: @AuthoringToolWorkspaceVm.SelectedLearningWorld.Name,
            Description: @AuthoringToolWorkspaceVm.SelectedLearningWorld.Description,
            Elements: @AuthoringToolWorkspaceVm.SelectedLearningWorld.LearningElements.Count,
            Spaces: @AuthoringToolWorkspaceVm.SelectedLearningWorld.LearningSpaces.Count
        </label>
    }
</div>
<div>
    <button class="btn btn-primary" @onclick="AddNewLearningWorld">Add Learning World</button>
    <button class="btn btn-primary" @onclick="LoadLearningWorld">Load Learning World</button>
    <button class="btn btn-primary" @onclick="EditSelectedLearningWorld" disabled="@(!AuthoringToolWorkspaceP.LearningWorldSelected)">Edit Learning World</button>
    <button class="btn btn-primary" @onclick="DeleteSelectedLearningWorld" disabled="@(!AuthoringToolWorkspaceP.LearningWorldSelected)">Delete selected Learning World</button>
    <button class="btn btn-primary" @onclick="SaveSelectedLearningWorld" disabled="@(!AuthoringToolWorkspaceP.LearningWorldSelected)">Save selected Learning World</button>
    <button class="btn btn-primary" id="btnExport" @onclick="Export">Create Export-File</button>
</div>

@if (AuthoringToolWorkspaceP.CreateLearningWorldDialogOpen)
{
    <ModalDialog Title="Create new learning world" Text="Please enter the required data for the learning world below:"
                 OnClose="@OnCreateWorldDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@AuthoringToolWorkspaceVm.ModalDialogWorldInputFields">
    </ModalDialog>
}
@if (AuthoringToolWorkspaceVm.SelectedLearningWorld != null)
{
    <br>
    <button class="btn btn-primary" @onclick="AddNewLearningSpace">Add Learning Space</button>
    @if (AuthoringToolWorkspaceP.CreateLearningSpaceDialogueOpen)
    {
        <ModalDialog Title="Create new learning space" Text="Please enter the required data for the learning space below:"
                     OnClose="@OnCreateSpaceDialogClose" DialogType=@ModalDialogType.OkCancel
                     InputFields="@AuthoringToolWorkspaceVm.ModalDialogSpaceInputFields">
        </ModalDialog>
    }
    <button class="btn btn-primary" @onclick="AddNewLearningElement">Add Learning Element</button>
    @if (AuthoringToolWorkspaceP.CreateLearningElementDialogOpen)
    {
        <ModalDialog Title="Create new learning element" Text="Please enter the required data for the learning element below:"
                     OnClose="@OnCreateElementDialogClose" DialogType=@ModalDialogType.OkCancel
                     InputFields="@AuthoringToolWorkspaceVm.ModalDialogElementInputFields">
        </ModalDialog>
    }
    <br>
    <label>
        Selected element:
        @if (AuthoringToolWorkspaceVm.SelectedLearningWorld.SelectedLearningObject != null)
        {
            <text>@AuthoringToolWorkspaceVm.SelectedLearningWorld.SelectedLearningObject.Name
                , Description:
                @AuthoringToolWorkspaceVm.SelectedLearningWorld.SelectedLearningObject.Description
            </text>
            <br>
            <button class="btn btn-primary" @onclick="EditLearningObject">Edit selected Learning Object</button>
            <button class="btn btn-primary" @onclick="DeleteSelectedLearningObject">Delete Learning Object</button>
        }
    </label>
    <svg style="width: 100%; height: 600px; border: 1px solid green"
         xmlns="http://www.w3.org/2000/svg"
         @onmousemove=@(e => _mouseService.FireMove(this, e))
         @onmouseup=@(e => _mouseService.FireUp(this, e))
         @onmouseleave=@(() => _mouseService.FireOut(this, null))>
        @foreach (var learningObject in AuthoringToolWorkspaceVm.SelectedLearningWorld.LearningObjects)
        {
            <Draggable LearningObject="learningObject" OnClicked="@OnLearningObjectSelect"
                       @bind-X="@learningObject.PositionX" @bind-Y="@learningObject.PositionY">
                @{
                    var color = learningObject switch
                    {
                        LearningSpaceViewModel => "lightgreen",
                        LearningElementViewModel => "blue",
                        _ => "grey"
                        };
                }
                <rect height="50" width="60" fill=@color></rect>
                <text x="3" y="15">@learningObject.Name</text>

            </Draggable>
        }
    </svg>
}

@if (AuthoringToolWorkspaceP.EditLearningWorldDialogOpen)
{
    <ModalDialog Title="Create new learning world" Text="Please enter the required data for the learning world below:"
                 OnClose="@OnEditWorldDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@AuthoringToolWorkspaceVm.ModalDialogWorldInputFields" InputFieldsInitialValue="@AuthoringToolWorkspaceVm.EditDialogInitialValues">
    </ModalDialog>
}

@if (AuthoringToolWorkspaceP.EditLearningSpaceDialogOpen)
{
    <ModalDialog Title="Edit existing learning space" Text="Please enter the required data for the learning space below:"
                 OnClose="@OnEditSpaceDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@AuthoringToolWorkspaceVm.ModalDialogSpaceInputFields" InputFieldsInitialValue="@AuthoringToolWorkspaceVm.EditDialogInitialValues">
    </ModalDialog>
}

@if (AuthoringToolWorkspaceP.EditLearningElementDialogOpen)
{
    <ModalDialog Title="Edit existing learning element" Text="Please enter the required data for the learning element below:"
                 OnClose="@OnEditElementDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@AuthoringToolWorkspaceVm.ModalDialogElementInputFields" InputFieldsInitialValue="@AuthoringToolWorkspaceVm.EditDialogInitialValues">
    </ModalDialog>
}

@code {

    /// <summary>
    /// Default constructor
    /// </summary>
    public AuthoringToolWorkspaceView()
    {
    }

    /// <summary>
    /// Testable constructor: use only for test purpose!
    /// </summary>
    public AuthoringToolWorkspaceView(
        AuthoringToolWorkspacePresenter authoringToolWorkspaceP,
        AuthoringToolWorkspaceViewModel authoringToolWorkspaceVm)
    {
        AuthoringToolWorkspaceP = authoringToolWorkspaceP;
        AuthoringToolWorkspaceVm = authoringToolWorkspaceVm;
    }

    private void AddNewLearningWorld()
    {
        AuthoringToolWorkspaceP.CreateLearningWorldDialogOpen = true;
    }

    private void EditSelectedLearningWorld()
    {
        AuthoringToolWorkspaceP.EditSelectedLearningWorld();
    }

    private void DeleteSelectedLearningWorld()
    {
        AuthoringToolWorkspaceP.DeleteSelectedLearningWorld();
    }

    private async void LoadLearningWorld()
    {
        await AuthoringToolWorkspaceP.LoadLearningWorld();
        //we need to tell blazor explicitly to re-render our component after we added the loaded learning world
        StateHasChanged();
    }

    private void SaveSelectedLearningWorld()
    {
        AuthoringToolWorkspaceP.SaveSelectedLearningWorld();
    }

    private Task OnCreateWorldDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return AuthoringToolWorkspaceP.OnCreateWorldDialogClose(returnValueTuple);
    }

    private Task OnEditWorldDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return AuthoringToolWorkspaceP.OnEditWorldDialogClose(returnValueTuple);
    }

    private void AddNewLearningSpace()
    {
        AuthoringToolWorkspaceP.CreateLearningSpaceDialogueOpen = true;
    }

    private void AddNewLearningElement()
    {
        AuthoringToolWorkspaceP.CreateLearningElementDialogOpen = true;
    }

    private void DeleteSelectedLearningObject()
    {
        AuthoringToolWorkspaceP.DeleteSelectedLearningObject();
    }

    private Task OnCreateSpaceDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return AuthoringToolWorkspaceP.OnCreateSpaceDialogClose(returnValueTuple);
    }

    private Task OnCreateElementDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return AuthoringToolWorkspaceP.OnCreateElementDialogClose(returnValueTuple);
    }

    private void EditLearningObject()
    {
        AuthoringToolWorkspaceP.EditLearningObject();
    }

    private Task OnEditSpaceDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return AuthoringToolWorkspaceP.OnEditSpaceDialogClose(returnValueTuple);
    }

    private Task OnEditElementDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return AuthoringToolWorkspaceP.OnEditElementDialogClose(returnValueTuple);
    }

    private Task OnLearningObjectSelect(ILearningObjectViewModel learningObject)
    {
        return AuthoringToolWorkspaceP.OnLearningObjectSelect(learningObject);
    }

    /// Export Learningworld
    private string filePath = "";

    private void Export()
    {
        //Create XMl-files, Overwrite Encoding to UTF-8 and Create Backup-File
        presentationLogic.ConstructBackup();
        filePath = GetCurrentDirectory()+"\\EmptyWorld.mbz";
    }

}