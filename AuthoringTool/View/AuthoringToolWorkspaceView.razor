@page "/AuthoringToolWorkspaceView"
@using AuthoringTool.Components.ModalDialog
@using AuthoringTool.Components
@using AuthoringTool.PresentationLogic.API
@using AuthoringTool.PresentationLogic.AuthoringToolWorkspace
@using AuthoringTool.View.LearningWorld


@inject IMouseService _mouseService
@inject ILogger<AuthoringToolWorkspaceView> _logger
@inject AuthoringToolWorkspacePresenter AuthoringToolWorkspaceP
@inject IAuthoringToolWorkspaceViewModel AuthoringToolWorkspaceVm
@inject IPresentationLogic presentationLogic

<h3>AuthoringTool Workspace</h3>

<p role="status">Current count of learning worlds: @AuthoringToolWorkspaceVm.LearningWorlds.Count()</p>
<p role="status" id="filepath">Filepath: @filePath</p>
<label>
    Select learning world:
    <select @onchange="args => SetSelectedLearningWorld((string) args.Value!)"
            value="@(AuthoringToolWorkspaceVm.SelectedLearningWorld?.Name)">
        @foreach (var learningWorld in AuthoringToolWorkspaceVm.LearningWorlds)
        {
            <option value="@learningWorld.Name">@learningWorld.Name</option>
        }
        @if (!AuthoringToolWorkspaceVm.LearningWorlds.Any() ||
             AuthoringToolWorkspaceVm.LearningWorlds.Count() == 1 && AuthoringToolWorkspaceVm.SelectedLearningWorld == null)
        {
            <option value=""></option>
        }
    </select>
</label>
<div>
    @if (AuthoringToolWorkspaceVm.SelectedLearningWorld != null)
    {
        <label>
            Selected world: @AuthoringToolWorkspaceVm.SelectedLearningWorld.Name,
            Description: @AuthoringToolWorkspaceVm.SelectedLearningWorld.Description,
            Elements: @AuthoringToolWorkspaceVm.SelectedLearningWorld.LearningElements.Count,
            Spaces: @AuthoringToolWorkspaceVm.SelectedLearningWorld.LearningSpaces.Count
        </label>
    }
</div>
<div>
    <button class="btn btn-primary" @onclick="AddNewLearningWorld">Add Learning World</button>
    <button class="btn btn-primary" @onclick="LoadLearningWorldAsync">Load Learning World</button>
    <button class="btn btn-primary" @onclick="OpenEditSelectedLearningWorldDialog" disabled="@(!AuthoringToolWorkspaceP.LearningWorldSelected)">Edit Learning World</button>
    <button class="btn btn-primary" @onclick="DeleteSelectedLearningWorld" disabled="@(!AuthoringToolWorkspaceP.LearningWorldSelected)">Delete selected Learning World</button>
    <button class="btn btn-primary" @onclick="SaveSelectedLearningWorldAsync" disabled="@(!AuthoringToolWorkspaceP.LearningWorldSelected)">Save selected Learning World</button>
    <button class="btn btn-primary" id="btnExport" @onclick="ExportLearningWorld">Create Export-File</button>
</div>
<DropZone OnNewStream=OnDragAndDropResult></DropZone>

@if (AuthoringToolWorkspaceP.InformationMessageToShow != null)
{
    <ModalDialog Title="Information"
                 Text=@(AuthoringToolWorkspaceP.InformationMessageToShow)
                 OnClose=OnShowInformationDialogClose DialogType=ModalDialogType.Ok/>
}
<!-- Save dialog for shutting down -->
@if (AuthoringToolWorkspaceP.SaveUnsavedChangesDialogOpen && AuthoringToolWorkspaceP.UnsavedWorldsQueue != null
     && AuthoringToolWorkspaceP.UnsavedWorldsQueue.Any())
{
    <ModalDialog Title="Save unsaved worlds?"
                 Text=@($"World {AuthoringToolWorkspaceP.UnsavedWorldsQueue.Peek().Name} has unsaved changes. Do you want to save it?")
                 OnClose=OnSaveWorldDialogCloseAsync DialogType=@ModalDialogType.YesNoCancel/>
}

@if (AuthoringToolWorkspaceP.WorldToReplaceWith != null)
{
    <ModalDialog Title="Replace world?"
                 Text=@($"You already have a world with the name {AuthoringToolWorkspaceP.WorldToReplaceWith.Name} loaded." + "Do you want to replace it?")
                 OnClose=OnReplaceDialogClose DialogType=ModalDialogType.OkCancel/>
}

<!-- Save dialog for saving when replacing -->
@if (AuthoringToolWorkspaceP.ReplacedUnsavedWorld != null)
{
    <ModalDialog Title="Save replaced world?"
                 Text=@($"Replaced world {AuthoringToolWorkspaceP.ReplacedUnsavedWorld.Name} has unsaved changes. Do you want to save it?")
                 OnClose=OnSaveReplacedWorldDialogCloseAsync DialogType=ModalDialogType.YesNo/>
}

<!-- Save dialog for saving when deleting -->
@if (AuthoringToolWorkspaceP.DeletedUnsavedWorld != null)
{
    <ModalDialog Title="Save deleted world?"
                 Text=@($"Deleted world {AuthoringToolWorkspaceP.DeletedUnsavedWorld.Name} has unsaved changes. Do you want to save it?")
                 OnClose=OnSaveDeletedWorldDialogCloseAsync DialogType=ModalDialogType.YesNo/>
}

@if (AuthoringToolWorkspaceP.CreateLearningWorldDialogOpen)
{
    <ModalDialog Title="Create new learning world" Text="Please enter the required data for the learning world below:"
                 OnClose="@OnCreateWorldDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@AuthoringToolWorkspaceP.ModalDialogWorldInputFields">
    </ModalDialog>
}
@if (AuthoringToolWorkspaceVm.SelectedLearningWorld != null)
{
    <LearningWorldView @ref="_activeView">
    </LearningWorldView>
}

@if (AuthoringToolWorkspaceP.EditLearningWorldDialogOpen)
{
    <ModalDialog Title="Create new learning world" Text="Please enter the required data for the learning world below:"
                 OnClose="@OnEditWorldDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@AuthoringToolWorkspaceP.ModalDialogWorldInputFields" InputFieldsInitialValue="@AuthoringToolWorkspaceVm.EditDialogInitialValues">
    </ModalDialog>
}

@if (ErrorState != null)
{
    <ModalDialog Title="Exception encountered" Text=@ErrorState.ToString()
                 OnClose="@(_ => { ErrorState = null; })" DialogType=@ModalDialogType.Ok/>
}


@code {

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        AuthoringToolWorkspaceP.OnForceViewUpdate += StateHasChanged;
        AuthoringToolWorkspaceVm.PropertyChanged += async (_, _) => await InvokeAsync(StateHasChanged);
    }

    private LearningWorldView? _activeView;
    private string filePath = "";

    private ExceptionWrapper? ErrorState { get; set; }

    private void AddNewLearningWorld()
    {
        AuthoringToolWorkspaceP.CreateLearningWorldDialogOpen = true;
    }

    private void OpenEditSelectedLearningWorldDialog()
    {
        AuthoringToolWorkspaceP.OpenEditSelectedLearningWorldDialog();
    }

    private void DeleteSelectedLearningWorld()
    {
        AuthoringToolWorkspaceP.DeleteSelectedLearningWorld();
    }

    private async void LoadLearningWorldAsync()
    {
        try
        {
            await AuthoringToolWorkspaceP.LoadLearningWorldAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, perhaps we want to show a notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Loading learning world", exception);
        }
        finally
        {
    //we need to tell blazor explicitly to re-render our component after we added the loaded learning world
            StateHasChanged();
        }
    }

    private async Task SaveSelectedLearningWorldAsync()
    {
        try
        {
            await AuthoringToolWorkspaceP.SaveSelectedLearningWorldAsync();
        }
        catch (OperationCanceledException)
        {
    //nothing to do, perhaps we want to show a notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Saving learning world", exception);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnCreateWorldDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        AuthoringToolWorkspaceP.OnCreateWorldDialogClose(returnValueTuple);
        StateHasChanged();
    }

    private void OnEditWorldDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        AuthoringToolWorkspaceP.OnEditWorldDialogClose(returnValueTuple);
        StateHasChanged();
    }

    private void OnSaveWorldDialogCloseAsync(ModalDialogOnCloseResult returnValueTuple)
    {
        try
        {
            AuthoringToolWorkspaceP.OnSaveWorldDialogClose(returnValueTuple);
        }
        catch (Exception ex)
        {
            ErrorState = new ExceptionWrapper(nameof(OnSaveWorldDialogCloseAsync), ex);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnSaveReplacedWorldDialogCloseAsync(ModalDialogOnCloseResult returnValueTuple)
    {
        AuthoringToolWorkspaceP.OnSaveReplacedWorldDialogClose(returnValueTuple);
        StateHasChanged();
    }

    private void OnReplaceDialogClose(ModalDialogOnCloseResult returnValueTuple)
    {
        AuthoringToolWorkspaceP.OnReplaceDialogClose(returnValueTuple);
        StateHasChanged();
        _activeView?.TriggerStateHasChanged();
    }

    private void OnSaveDeletedWorldDialogCloseAsync(ModalDialogOnCloseResult returnValueTuple)
    {
        AuthoringToolWorkspaceP.OnSaveDeletedWorldDialogClose(returnValueTuple);
        StateHasChanged();
    }

    private void SetSelectedLearningWorld(string argsValue)
    {
        AuthoringToolWorkspaceP.SetSelectedLearningWorld(argsValue);
        _activeView?.TriggerStateHasChanged();
    }

    private async void ExportLearningWorld()
    {
    //Create XMl-files, Overwrite Encoding to UTF-8 and Create Backup-File
        if (AuthoringToolWorkspaceVm.SelectedLearningWorld == null) return;
        try
        {
            filePath = await presentationLogic.ConstructBackupAsync(AuthoringToolWorkspaceVm.SelectedLearningWorld);
        }
        catch (OperationCanceledException)
        {
    //do nothing
        }
        StateHasChanged();
    }

    private async Task OnDragAndDropResult(Tuple<string, Stream> result)
    {
        await AuthoringToolWorkspaceP.ProcessDragAndDropResult(result);
        StateHasChanged();
        _activeView?.TriggerStateHasChanged();
    }

    private void OnShowInformationDialogClose(ModalDialogOnCloseResult result)
    {
        AuthoringToolWorkspaceP.InformationMessageToShow = null;
    }

}