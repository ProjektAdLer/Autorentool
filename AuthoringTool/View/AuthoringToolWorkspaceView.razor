@page "/AuthoringToolWorkspaceView"
@using AuthoringTool.Components.ModalDialog
@using AuthoringTool.PresentationLogic.API
@using AuthoringTool.PresentationLogic.AuthoringToolWorkspace
@using AuthoringTool.View.LearningWorld
@using static System.IO.Directory;
@inject IMouseService _mouseService
@inject ILogger<AuthoringToolWorkspaceView> _logger
@inject AuthoringToolWorkspacePresenter AuthoringToolWorkspaceP
@inject IAuthoringToolWorkspaceViewModel AuthoringToolWorkspaceVm
@inject IPresentationLogic presentationLogic

<h3>AuthoringTool Workspace</h3>

<p role="status">Current count of learning worlds: @AuthoringToolWorkspaceVm.LearningWorlds.Count</p>
<p role="status" id="filepath">Filepath: @filePath</p>
<label>
    Select learning world:
    <select @onchange="args => SetSelectedLearningWorld((string) args.Value!)"
            value="@(AuthoringToolWorkspaceVm.SelectedLearningWorld?.Name)">
        @foreach (var learningWorld in AuthoringToolWorkspaceVm.LearningWorlds)
        {
            <option value="@learningWorld.Name">@learningWorld.Name</option>
        }
        @if (AuthoringToolWorkspaceVm.LearningWorlds.Count == 0 ||
             AuthoringToolWorkspaceVm.LearningWorlds.Count == 1 && AuthoringToolWorkspaceVm.SelectedLearningWorld == null)
        {
            <option value=""></option>
        }
    </select>
</label>
<div>
    @if (AuthoringToolWorkspaceVm.SelectedLearningWorld != null)
    {
        <label>
            Selected world: @AuthoringToolWorkspaceVm.SelectedLearningWorld.Name,
            Description: @AuthoringToolWorkspaceVm.SelectedLearningWorld.Description,
            Elements: @AuthoringToolWorkspaceVm.SelectedLearningWorld.LearningElements.Count,
            Spaces: @AuthoringToolWorkspaceVm.SelectedLearningWorld.LearningSpaces.Count
        </label>
    }
</div>
<div>
    <button class="btn btn-primary" @onclick="AddNewLearningWorld">Add Learning World</button>
    <button class="btn btn-primary" @onclick="LoadLearningWorld">Load Learning World</button>
    <button class="btn btn-primary" @onclick="OpenEditSelectedLearningWorldDialog" disabled="@(!AuthoringToolWorkspaceP.LearningWorldSelected)">Edit Learning World</button>
    <button class="btn btn-primary" @onclick="DeleteSelectedLearningWorld" disabled="@(!AuthoringToolWorkspaceP.LearningWorldSelected)">Delete selected Learning World</button>
    <button class="btn btn-primary" @onclick="SaveSelectedLearningWorldAsync" disabled="@(!AuthoringToolWorkspaceP.LearningWorldSelected)">Save selected Learning World</button>
    <button class="btn btn-primary" id="btnExport" @onclick="ExportLearningWorld">Create Export-File</button>
</div>

@if (AuthoringToolWorkspaceP.CreateLearningWorldDialogOpen)
{
    <ModalDialog Title="Create new learning world" Text="Please enter the required data for the learning world below:"
                 OnClose="@OnCreateWorldDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@AuthoringToolWorkspaceP.ModalDialogWorldInputFields">
    </ModalDialog>
}
@if (AuthoringToolWorkspaceVm.SelectedLearningWorld != null)
{
    <LearningWorldView @ref="_activeView">
    </LearningWorldView>
}

@if (AuthoringToolWorkspaceP.EditLearningWorldDialogOpen)
{
    <ModalDialog Title="Create new learning world" Text="Please enter the required data for the learning world below:"
                 OnClose="@OnEditWorldDialogClose" DialogType=@ModalDialogType.OkCancel
                 InputFields="@AuthoringToolWorkspaceP.ModalDialogWorldInputFields" InputFieldsInitialValue="@AuthoringToolWorkspaceVm.EditDialogInitialValues">
    </ModalDialog>
}

@if (ErrorState != null)
{
    <ModalDialog Title="Exception encountered" Text=@ErrorState.ToString()
                 OnClose="@(() => { ErrorState = null;})" DialogType=@ModalDialogType.Ok />
}


@code {

    /// <summary>
    /// Default constructor
    /// </summary>
    public AuthoringToolWorkspaceView()
    {
    }

    /// <summary>
    /// Testable constructor: use only for test purpose!
    /// </summary>
    public AuthoringToolWorkspaceView(
        AuthoringToolWorkspacePresenter authoringToolWorkspaceP,
        AuthoringToolWorkspaceViewModel authoringToolWorkspaceVm)
    {
        AuthoringToolWorkspaceP = authoringToolWorkspaceP;
        AuthoringToolWorkspaceVm = authoringToolWorkspaceVm;
    }

    private LearningWorldView? _activeView;
    private string filePath = "";
    
    private ExceptionWrapper? ErrorState { get; set; }
    
    private void AddNewLearningWorld()
    {
        AuthoringToolWorkspaceP.CreateLearningWorldDialogOpen = true;
    }

    private void OpenEditSelectedLearningWorldDialog()
    {
        AuthoringToolWorkspaceP.OpenEditSelectedLearningWorldDialog();
    }

    private void DeleteSelectedLearningWorld()
    {
        AuthoringToolWorkspaceP.DeleteSelectedLearningWorld();
    }

    private async void LoadLearningWorld()
    {
        try
        {
            await AuthoringToolWorkspaceP.LoadLearningWorld();
        }
        catch (OperationCanceledException) 
        {
            //nothing to do, perhaps we want to show a notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Loading learning world", exception);
        }
        finally
        {
            //we need to tell blazor explicitly to re-render our component after we added the loaded learning world
            StateHasChanged();
        }
    }

    private async Task SaveSelectedLearningWorldAsync()
    {
        try
        {
            await AuthoringToolWorkspaceP.SaveSelectedLearningWorldAsync();
        }
        catch (OperationCanceledException)
        {
            //nothing to do, perhaps we want to show a notification?
        }
        catch (Exception exception)
        {
            ErrorState = new ExceptionWrapper("Saving learning world", exception);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private Task OnCreateWorldDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return AuthoringToolWorkspaceP.OnCreateWorldDialogClose(returnValueTuple);
    }

    private Task OnEditWorldDialogClose(Tuple<ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        return AuthoringToolWorkspaceP.OnEditWorldDialogClose(returnValueTuple);
    }

    private void SetSelectedLearningWorld(string argsValue)
    {
        AuthoringToolWorkspaceP.SetSelectedLearningWorld(argsValue);
        _activeView?.TriggerStateHasChanged();
    }
    
    private void ExportLearningWorld()
    {
        //Create XMl-files, Overwrite Encoding to UTF-8 and Create Backup-File
        presentationLogic.ConstructBackup();
        filePath = Path.Join(GetCurrentDirectory(),"EmptyWorld.mbz");
    }

}