@page "/AuthoringToolWorkspaceView"
@using AuthoringTool.PresentationLogic
@using AuthoringTool.Components

<h3>AuthoringTool Workspace</h3>

<p role="status">Current count of learning worlds: @AuthoringToolWorkspaceVm.LearningWorlds.Count</p>
<label>
    Select learning world: <!--TODO: refactor this into presenter call -->
    <select @onchange="args => AuthoringToolWorkspaceVm.SelectedLearningWorld = 
    AuthoringToolWorkspaceVm.LearningWorlds.First(world => world.Name == (string)args.Value!)">
        @foreach (var learningWorld in AuthoringToolWorkspaceVm.LearningWorlds)
        {
            <option value="@learningWorld.Name">@learningWorld.Name</option>
        }
        @if (AuthoringToolWorkspaceVm.LearningWorlds.Count == 0 || 
         AuthoringToolWorkspaceVm.LearningWorlds.Count == 1 && AuthoringToolWorkspaceVm.SelectedLearningWorld == null)
        {
            <option value=""></option>
        }
    </select>
</label>
@if (AuthoringToolWorkspaceVm.SelectedLearningWorld != null)
{
    <label>Selected world: @AuthoringToolWorkspaceVm.SelectedLearningWorld.Name, 
        Description: @AuthoringToolWorkspaceVm.SelectedLearningWorld.Description</label>
}
<button class="btn btn-primary" @onclick="AddNewLearningWorld">Add Learning World</button>
<button class="btn btn-primary" @onclick="DeleteLastLearningWorld">Delete Learning World</button>
@if (AuthoringToolWorkspaceP.CreateLearningWorldDialogueOpen)
{
    <ModalDialog Title="Create new learning world" Text="Please enter the required data for the learning world below:"
                 OnClose="@OnCreateDialogClose" DialogType=@ModalDialog.ModalDialogType.OkCancel
                 InputFields="@(new ModalDialog.ModalDialogInputField[]{
                                  new("Name", ModalDialog.ModalDialogInputType.Text, true),
                                  new("Description", ModalDialog.ModalDialogInputType.Text, true),
                                  new("Author(s), comma separated", ModalDialog.ModalDialogInputType.Text),
                                  new ModalDialog.ModalDialogDropdownInputField("Lernelement Typ",
                                      new []{"Inhalt", "Aktivierung", "baz"}, required:true),
                                  new ModalDialog.ModalDialogDropdownInputField("",
                                      new[]{"Text", "Bild"}, 
                                      new Dictionary<string, string>{{"Lernelement Typ", "Inhalt"}},
                                      required:true)
                              })">
    </ModalDialog>
}

@code {

    /// <summary>
    /// Default constructor
    /// </summary>
    public AuthoringToolWorkspaceView()
    {
        AuthoringToolWorkspaceVm = new AuthoringToolWorkspaceViewModel();
        AuthoringToolWorkspaceP = new AuthoringToolWorkspacePresenter(AuthoringToolWorkspaceVm);
        
    }
    
    /// <summary>
    /// Testable constructor: use only for test purpose!
    /// </summary>
    public AuthoringToolWorkspaceView(
        AuthoringToolWorkspacePresenter authoringToolWorkspaceP,
        AuthoringToolWorkspaceViewModel authoringToolWorkspaceVm)
    {
        AuthoringToolWorkspaceP = authoringToolWorkspaceP;
        AuthoringToolWorkspaceVm = authoringToolWorkspaceVm;
    }
    
    private AuthoringToolWorkspacePresenter AuthoringToolWorkspaceP { get; set; }
    private AuthoringToolWorkspaceViewModel AuthoringToolWorkspaceVm { get; set; }
    
    private void AddNewLearningWorld()
    {
        AuthoringToolWorkspaceP.CreateLearningWorldDialogueOpen = true;
    //AuthoringToolWorkspaceP.CreateNewLearningWorld();
    }
    
    private void DeleteLastLearningWorld()
    {
        AuthoringToolWorkspaceP.DeleteLastLearningWorld();
    }

    private Task OnCreateDialogClose(Tuple<ModalDialog.ModalDialogReturnValue, IDictionary<string, string>?> returnValueTuple)
    {
        var (response, data) = returnValueTuple;
        AuthoringToolWorkspaceP.CreateLearningWorldDialogueOpen = false;
        
        if (response == ModalDialog.ModalDialogReturnValue.Cancel) return Task.CompletedTask;
        if (data == null) throw new ApplicationException("dialog data unexectedly null after Ok return value");

        foreach (var pair in data)
        {
            Console.Write($"{pair.Key}:{pair.Value}\n");
        }
        AuthoringToolWorkspaceP.CreateNewLearningWorld(
            data["Name"] as string ?? throw new InvalidOperationException("Name unexpectedly null"),
            data["Description"] as string ?? throw new InvalidOperationException("Description unexpectedly null"));
    //StateHasChanged();
        return Task.CompletedTask;
    }
    
}